{"config":{"lang":["en","pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Diving into pygeoapi workshop!","text":"<p>Version: 1.6.0</p> <p></p> <p>pygeoapi is a Python server implementation of the OGC API suite of standards. The project emerged as part of the next generation OGC API efforts in 2018 and provides the capability for organizations to deploy a RESTful OGC API endpoint using OpenAPI, GeoJSON, and HTML. pygeoapi is open source and released under an MIT license.</p> <p>Diving into pygeoapi is a half day workshop designed for users to become familiar with installing, configuring, publishing data to and extending pygeoapi. This workshop will cover publishing geospatial data to the Web using pygeoapi in support of the suite of OGC API standards.</p> <p>This workshop covers a wide range of topics (install/setup/configuration, publishing, cloud, templating, plugins, etc.). Please see the left hand navigation for the table of contents.</p>"},{"location":"#your-fsl-workshop-team","title":"Your FSL workshop team","text":""},{"location":"#about-this-tutorial","title":"About this tutorial","text":"<p>This tutorial is a combination of step-by-step explanations of various aspects of pygeoapi as well as a series of exercises to familiarize yourself with the project.</p> <p>Exercises are indicated as follows:</p> <p>Example exercise</p> <p>A section marked like this indicates that you can try out the exercise.</p> <p>Example exercise with tabs</p> <p>A section marked like this indicates that you can try out the exercise and choose your environment (Linux/Mac or Windows).</p> Linux/MacWindows <p> <pre><code>docker run -p 5000:80 -v $(pwd)/default.config.yml:/pygeoapi/local.config.yml geopython/pygeoapi:latest\n</code></pre> </p> <p> <pre><code>docker run -p 5000:80 -v ${pwd}/default.config.yml:/pygeoapi/local.config.yml geopython/pygeoapi:latest\n</code></pre> </p> <p>Also you will notice tips and notes sections within the text:</p> <p>Tip</p> <p>Tips share additional help on how to best achieve tasks</p> <p>Examples are indicated as follows:</p> <p>Code <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;This is an HTML sample&lt;/title&gt;\n    &lt;/head&gt;\n&lt;/html&gt;\n</code></pre></p> <p>Configuration <pre><code>my-collection:\n    type: collection\n    title: my cool collection title\n    description: my cool collection description\n</code></pre></p> <p>Snippets which need to be typed in a on a terminal/console are indicated as:</p> <pre><code>echo 'Hello world'\n</code></pre>"},{"location":"#workshop-location-and-materials","title":"Workshop location and materials","text":"<p>This workshop is always provided live at https://dive.pygeoapi.io.</p> <p>The workshop contents, wiki and issue tracker are managed on GitHub at https://github.com/geopython/diving-into-pygeoapi.</p>"},{"location":"#printing-this-workshop","title":"Printing this workshop","text":"<p>To print this workshop, navigate to the print page and select File &gt; Print &gt; Save as PDF.</p>"},{"location":"#support","title":"Support","text":"<p>A Gitter channel exists for discussion and live support from the developers of the workshop and other workshop participants.</p> <p>For issues/bugs/suggestions or improvements/contributions, please use the GitHub issue tracker.</p> <p>All bugs, enhancements and issues can be reported on GitHub.</p> <p>As always, core pygeoapi support and community information can be found on the pygeoapi website.</p> <p>Contributions are always encouraged and welcome!</p>"},{"location":"#now-on-to-the-workshop-lets-go","title":"Now, on to the workshop.  Let's go!","text":""},{"location":"conclusion/","title":"Conclusion","text":"<p>We hope this workshop provided a valuable overview of the many features of pygeoapi. The project's goal is enabling low barrier, simple and flexible data publishing, using the OGC API suite of standards.</p> <p></p> <p></p>"},{"location":"conclusion/#foss4g-europe-2025","title":"FOSS4G Europe 2025","text":"<p>For those in attendance at FOSS4G Europe 2025:</p> <ul> <li>come to the pygeoapi project status presentation on Wednesday 16 July 17:45, in room EL11 (Geosolutions)</li> <li>or the other talks related to pygeoapi:</li> <li>the pygeoapi team will be at the Community Sprint on 19-20 July, at the conference venue, Faculty of Humanities and Social Sciences (building P)</li> </ul>"},{"location":"conclusion/#contributing","title":"Contributing","text":"<p>Suggestions, improvements and fixes are always welcome. Please visit our community page for more information on getting in touch.</p> <p>Thank you for your interest in pygeoapi!</p>"},{"location":"introduction/","title":"Introduction to pygeoapi","text":"<p>The development team of pygeoapi (yes, spelled in lowercase) is excited to welcome you in this workshop! </p> <p>In this half day workshop, we will give you an introduction to pygeoapi, how to publish data, and provide resources and tips for future reading and reference (i.e. where to go when you don't know!).</p> <p>Although pygeoapi is written in Python and can be customizable and extensible (plugins)  for Python developers, Python skills are not required to install, setup and publish your geospatial data as part of this workshop. All you need for the workshop is your favorite text editor and Docker (we will more information in the setup section).</p>"},{"location":"introduction/#background-reading","title":"Background reading","text":"<p>The pygeoapi website is the main entrypoint for both end-users and developers where you can find:</p> <ul> <li>official documentation</li> <li>the default and latest presentations</li> <li>documentation and presentations archive</li> <li>code on GitHub</li> <li>Docker images available on Docker Hub</li> <li>pygeoapi releases in the Python Package Index (PyPI)</li> </ul> <p>Given pygeoapi implements a number of OGC API standards, you may also want to read about these on ogcapi.ogc.org.</p>"},{"location":"introduction/#existing-deployments","title":"Existing Deployments","text":"<p>A number of organizations have deployed pygeoapi to their operations. To get a feel of how pygeoapi is used in practice, check out our up to date live deployments page. By default, the pygeoapi public demo at demo.pygeoapi.io is always maintained and made available by the development team. Check out the main instance which always runs the latest GitHub version.</p> <p>Interested in the demo site setup itself? demo.pygeoapi.io is developed in a GitHub repository using a DevOps continuous deployment (CD) workflow. Even more recent GitOps deployments were developed for Geonovum and the European Commission Joint Research Center.</p> <p>The above examples may help as starting points for your own pygeoapi setup and deployment, so feel free to study and use them!</p>"},{"location":"introduction/#history","title":"History","text":"<p>Starting in 2018, pygeoapi emerged as part of the initial efforts for the development of OGC API standards. OGC API code sprints were instrumental for agile development and pouring the foundation of the project.</p> <p>The core design principles are as follows:</p> <ul> <li>simplicity / low barrier to entry</li> <li>long term sustainability</li> <li>modularity</li> <li>extensibility</li> <li>building on a large ecosystem of Free Open Source and OSGeo components such as GDAL, rasterio, Shapely, Pandas, Elasticsearch, PostGIS and many others</li> </ul> <p>The project was initiated by Tom Kralidis. Within weeks, several talented developers joined the project, which led to the formation of a core team and Project Steering Committee (PSC). Contributions continued as well from additional developers and users who happily provided new functionality, bug fixes, and documentation updates. As a result, a healthy community quickly emerged with a common interest in open source, OGC API standards, low barrier, modular and extensible. The rest, as they say, is history.</p> <p>pygeoapi is an OSGeo Project and an OGC Reference Implementation.</p>"},{"location":"setup/","title":"Workshop environment setup","text":"<p>In this workshop we use the following materials:</p> <ol> <li>Documentation - (like this page): access latest on dive.pygeoapi.io</li> <li>Exercises - download the latest zip file, unzip, find exercises in <code>workshop/exercises</code> <sup>2</sup></li> <li>Docker - all examples/exercises are run in a <code>Docker container</code> in <code>workshop/exercises</code></li> </ol>"},{"location":"setup/#text-editor","title":"Text editor","text":"<p>Your text editor needs to be able to edit configuration files in plain text. Below are some choices for text editors (there may be others), along with what some of the pygeoapi developers prefer to use:</p> <ul> <li>Notepad or Notepad++ (Windows)</li> <li>Sublime Text: Angelos</li> <li>PyCharm: Just</li> <li>Emacs: Just</li> <li>Visual Studio Code: Francesco, Angelos, Joana</li> <li><code>vi</code> / <code>vim</code>: Tom, Angelos</li> </ul> <p>Having said this, please feel free to use what works for you :)</p>"},{"location":"setup/#yaml","title":"YAML","text":"<p>Most exercises will focus on editing the pygeoapi configuration, which is in the YAML format. If you are not familiar with YAML, it is worth reading through a tutorial to become aware of YAML syntax and indentation.</p> <p>The main requirement for the training is to install Docker and/with Docker Compose on your system. We strongly advise to install Docker before the workshop starts.</p> <p>Although several custom installation scenarios are possible (see the documentation for more information), these are not considered in this workshop given the ability to install a fully reproducible environment via Docker and Docker Compose.</p> <p>Workshop Exercises will also be based on Docker, hence a custom installation would at least be 'challenging'. The good news is that only a single installation (Docker) is needed! The Docker images used in this workshop contain the latest pygeoapi and all its dependencies and external services (e.g. PostGIS).</p>"},{"location":"setup/#about-docker","title":"About Docker","text":"<p>Docker has been available since 2013, and provided as a deployment option on numerous FOSS software and OSGeo projects. Given the current era of computing, chances are that you have heard of Docker and containerization. Or, perhaps are already familiar and hopefully using Docker already. If not, there is an abundance of introductory materials that can be found online like this tutorial from IBM.</p> <p>FOSS4G software has benefitted greatly from Docker (consistent packaging, isolation, integration and upgrade patterns) in comparison to custom installations. Though today we mainly use Docker, the bigger picture is the use of Containers as a next step in virtualization. Containerization certainly deserves its own workshop, so for the purpose of this workshop we only cover the basics of Docker and Docker Compose.</p> <p>Docker Compose is an addition to Docker to facilitate the orchestration (configuration) of one or more Docker 'Containers' (a Container is a running instance of a Docker image) using a configuration convention (the Docker Compose YAML file), usually named <code>docker-compose.yml</code>.</p> <p>Stepping up further are even more sophisticated Docker orchestrators like  Rancher and Kubernetes, but for this workshop, Docker and Docker Compose are all we need.</p>"},{"location":"setup/#installation","title":"Installation","text":"<p>Docker installation has greatly progressed over the years. This is the only part of the workshop which is dependent on the system/OS you are running (e.g. Windows, Mac or Linux). For each system the Docker website provides detailed installation instructions. Please follow these consistently.</p> <p>For many platforms a product called Docker Desktop is available, which includes the main Docker components:</p> <ul> <li>Windows installation</li> <li>Mac installation</li> <li>Linux installation</li> </ul> <p>Some notes:</p> <ul> <li>On Windows we recommend using the Windows Subsystem for Linux (WSL) as it also provides a powerful (Bash) command line and has optimal integration with Docker.  Before installing Docker Desktop, install WSL by opening Microsoft PowerShell (run as administrator) and running <code>wsl --install</code><ul> <li>installing WSL requires administrator privileges on your system</li> </ul> </li> <li>On Mac, if you are using Homebrew, consider (as the author has) using the brew Docker formula</li> <li>On Mac OSX Monterey and later, there may be an issue with local port 5000 already in use, therefore conflicting with the default one used by the pygeoapi container. If you see this error <code>OSError: [Errno 48] Address already in use</code>, you need to disable the Airplay Receiver. Go to <code>System Settings | Sharing</code> or like in Sonoma type 'airplay' in the search box. See image below for Mac OSX Sonoma. Also a detailed description in this blog post. </li> <li>On Linux, you can choose the relevant installer for your platform. You can also use Virtualbox with a Ubuntu Image or use a cloud VM</li> <li>On Linux, when encountering permission issues: the Docker daemon normally runs as \"root\". This requires prefixing commands with <code>sudo</code> as a non-root user. On most distributions Docker is accessible by users in the <code>docker</code> group. You can omit the use of <code>sudo</code> and prevent possibly other permission issues as follows:<ul> <li>Test if the <code>docker</code> group exists: <code>cat /etc/group | grep docker</code>.</li> <li>When non-existing: <code>sudo groupadd docker</code>. </li> <li>Add your user to this group: <code>sudo usermod -aG docker $USER</code> </li> <li>Log-out and log-in.</li> <li>See all details and more options in this instruction.</li> </ul> </li> <li>Docker Desktop includes a graphical user interface with some interesting options. You can see logs and information about running containers, open their service in a browser or even open a terminal inside the container</li> </ul> <p>If all goes well, you should be able to run Docker from the command line as follows: <sup>1</sup></p> Linux/MacWindows (PowerShell) <p> <pre><code>docker version\nDocker version 20.10.17, build 100c701\n\ndocker compose version\nDocker Compose version v2.6.1\n</code></pre> </p> <p> <pre><code>docker version\nDocker version 20.10.17, build 100c701\n\ndocker compose version\nDocker Compose version v2.6.1\n</code></pre> </p> <p>(It is not required that your version numbers exactly match).</p>"},{"location":"setup/#quickstart","title":"Quickstart","text":"<p>Once Docker is available on your system, running the pygeoapi container with its built-in configuration and  data is a one-liner. </p> <p>Open a terminal session and run:</p> <p>First run via Docker</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run --rm -p 5000:80 geopython/pygeoapi:latest\nUnable to find image 'geopython/pygeoapi:latest' locally\nlatest: Pulling from geopython/pygeoapi\nd7bfe07ed847: Already exists \nd5d0144a7164: Already exists \nafe0923a0fa0: Already exists \n75f8618c4e86: Already exists \nc603397fd6ad: Already exists \n6584a95328b3: Already exists \nfd93e44631d9: Already exists \n6a3201071a5d: Already exists \n4f4fb700ef54: Already exists \nDigest: sha256:27b2b219497a6ea382a946ee90ae96ad00b5c1d8e9b725fccf23211978fef124\nStatus: Downloaded newer image for geopython/pygeoapi:latest\nSTART /entrypoint.sh\nTrying to generate openapi.yml\nopenapi.yml generated continue to pygeoapi\nmake SCRIPT_NAME empty from /\nStart gunicorn name=pygeoapi on 0.0.0.0:80 with 4 workers and SCRIPT_NAME=\n[2022-08-09 12:59:00 +0000] [1] [INFO] Starting gunicorn 20.0.4\n[2022-08-09 12:59:00 +0000] [1] [INFO] Listening at: http://0.0.0.0:80 (1)\n[2022-08-09 12:59:00 +0000] [1] [INFO] Using worker: gevent\n[2022-08-09 12:59:00 +0000] [18] [INFO] Booting worker with pid: 18\n[2022-08-09 12:59:00 +0000] [19] [INFO] Booting worker with pid: 19\n[2022-08-09 12:59:00 +0000] [21] [INFO] Booting worker with pid: 21\n[2022-08-09 12:59:00 +0000] [22] [INFO] Booting worker with pid: 22\n</code></pre> </p> <p> <pre><code>docker run --rm -p 5000:80 geopython/pygeoapi:latest\nUnable to find image 'geopython/pygeoapi:latest' locally\nlatest: Pulling from geopython/pygeoapi\nd7bfe07ed847: Already exists \nd5d0144a7164: Already exists \nafe0923a0fa0: Already exists \n75f8618c4e86: Already exists \nc603397fd6ad: Already exists \n6584a95328b3: Already exists \nfd93e44631d9: Already exists \n6a3201071a5d: Already exists \n4f4fb700ef54: Already exists \nDigest: sha256:27b2b219497a6ea382a946ee90ae96ad00b5c1d8e9b725fccf23211978fef124\nStatus: Downloaded newer image for geopython/pygeoapi:latest\nSTART /entrypoint.sh\nTrying to generate openapi.yml\nopenapi.yml generated continue to pygeoapi\nmake SCRIPT_NAME empty from /\nStart gunicorn name=pygeoapi on 0.0.0.0:80 with 4 workers and SCRIPT_NAME=\n[2022-08-09 12:59:00 +0000] [1] [INFO] Starting gunicorn 20.0.4\n[2022-08-09 12:59:00 +0000] [1] [INFO] Listening at: http://0.0.0.0:80 (1)\n[2022-08-09 12:59:00 +0000] [1] [INFO] Using worker: gevent\n[2022-08-09 12:59:00 +0000] [18] [INFO] Booting worker with pid: 18\n[2022-08-09 12:59:00 +0000] [19] [INFO] Booting worker with pid: 19\n[2022-08-09 12:59:00 +0000] [21] [INFO] Booting worker with pid: 21\n[2022-08-09 12:59:00 +0000] [22] [INFO] Booting worker with pid: 22\n</code></pre> </p> <p>That's all! Open your browser and navigate to <code>http://localhost:5000</code>, the pygeoapi page will display. As part of the initial <code>docker run</code>, Docker will download the pygeoapi Docker Image from Docker Hub. This may take some time, as the Docker image includes all dependencies (such as GDAL, etc.). Be patient! This is a one-time download for the entire workshop, or you may want to do this beforehand. </p> <p>Some notes:</p> <ul> <li>Docker runs a pygeoapi container on your local system on port 5000, which is mapped to port 80 inside the container</li> <li>the pygeoapi Docker container runs with the default configuration and data from the GitHub repo </li> <li>both configuration and data (from GitHub repo) is embedded in the Docker Image - we will override these later</li> <li>the <code>--rm</code> option removes the Docker Container (but not the image), after execution</li> <li>type <code>CTRL-C</code> to stop the container and return to the terminal</li> </ul> <p>Next, you can override the default configuration and add your own data using Docker volumes.</p>"},{"location":"setup/#customizing-configuration","title":"Customizing configuration","text":"<p>In the upcoming exercises we are going to update the configuration file multiple times. For ease of development we are overriding the pygeoapi configuration which resides by default at <code>/pygeoapi/local.config.yml</code> within the container by a local file which you can edit in your favourite text editor. </p> <p>Override the pygeoapi config file</p> <p>Download pygeoapi's default Docker configuration from default.config.yml to the current folder (or navigate to the folder where you downloaded the file), for example with:</p> Linux/MacWindows (PowerShell) <p> <pre><code>curl -O https://raw.githubusercontent.com/geopython/pygeoapi/master/docker/default.config.yml\n</code></pre> </p> <p> <pre><code>curl https://raw.githubusercontent.com/geopython/pygeoapi/master/docker/default.config.yml\n</code></pre> </p> <p>Open the file in your favourite text editor and change the title and description of the API:</p> <pre><code>metadata:\n    identification:\n        title: My first pygeoapi run\n        description: pygeoapi provides an API to geospatial data\n</code></pre> <p>Now run the container with the overridden config file:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -p 5000:80 \\\n-v $(pwd)/default.config.yml:/pygeoapi/local.config.yml \\\ngeopython/pygeoapi:latest\n</code></pre> </p> <p> <pre><code>docker run -p 5000:80 -v ${pwd}/default.config.yml:/pygeoapi/local.config.yml geopython/pygeoapi:latest\n</code></pre> </p> <p>At this point, navigate to <code>http://localhost:5000</code> to verify the new title and description.</p> <p>Note</p> <p>On Windows, the file downloaded may be renamed to <code>default.config.yml.txt</code>.  Ensure to rename the file to <code>default.config.yml</code>.</p> <p>By using a Docker volume mount (<code>-v</code> option), Docker attaches or 'mounts' a directory or single file from your host/local system into the Docker Container.</p> <p>In the above snippet, <code>$(pwd)</code> indicates the working folder from which you start the Docker container.</p>"},{"location":"setup/#adding-data-and-setting-the-configuration-file","title":"Adding data and setting the configuration file","text":"<p>In addition to adapting the configuration you will usually add your own data as files or remote data services like PostGIS or WFS.</p> <p>You can also mount a local directory such as <code>data/</code> to <code>/pygeoapi/mydata</code> within the Container. Within the data directory you can store vector data, raster files or sets of image of vector tiles.</p> <p>Below is an example where the configuration is explicitly set to <code>pygeoapi-config.yml</code> via an environment variable (<code>-e</code>) and uses a Docker mount to mount the local <code>data</code> folder as <code>/pygeoapi/mydata</code>:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -p 5000:80 \\\n-v $(pwd)/data:/pygeoapi/mydata \\\n-v $(pwd)/default.config.yml:/pygeoapi/pygeoapi-config.yml \\\n-e PYGEOAPI_CONFIG=/pygeoapi/pygeoapi-config.yml \\\ngeopython/pygeoapi:latest\n</code></pre> </p> <p> <pre><code>docker run -p 5000:80 -v ${pwd}/data:/pygeoapi/mydata -v ${pwd}/default.config.yml:/pygeoapi/pygeoapi-config.yml -e PYGEOAPI_CONFIG=/pygeoapi/pygeoapi-config.yml geopython/pygeoapi:latest\n</code></pre> </p> <p>In the next sections we will review additional examples of mounts to the data folder. More Docker deployment examples can be found in the pygeoapi GitHub repository.</p>"},{"location":"setup/#using-docker-for-python-clients","title":"Using Docker for Python Clients","text":"<p>In some exercises we access <code>pygeoapi</code> remote endpoints using OWSLib,  a Python library to interact with OGC Web Services. OWSLib can be installed using standard  Python <code>pip3 install OWSLib</code>, but you may not have Python available, or you want to keep your system 'clean'.</p> <p>As Docker is already available on your system, you can start up a  Container with a complete Python environment, and access it from a <code>bash</code> shell prompt.  The magic line is:</p> <p><code>docker run -it --rm --network=host --name owslib python:3.10-slim /bin/bash</code></p> <p>This will pull a small (125MB) official Python Docker Image. When the Container is started, you are directed into  a <code>bash</code> session/prompt. The argument <code>--network=host</code> allows you to directly interact with services on your host system, thus with <code>pygeoapi</code>, without setting up a Docker network. From there you can start <code>python3</code>, install OWSLib and maybe even other tools like <code>curl</code> and <code>wget</code>.</p> <p>Below is a complete example, assuming pygeoapi runs on your <code>localhost</code> at port 5000:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -it --rm --network=host --name owslib python:3.10-slim /bin/bash\nUnable to find image 'python:3.10-slim' locally\n3.10-slim: Pulling from library/python\n5b5fe70539cd: Pull complete \nf4b0e4004dc0: Pull complete \nc5424f0ac885: Pull complete \n9d21fe1624ec: Pull complete \nde0194aa1c21: Pull complete \nDigest: sha256:7dc5b4e948acd18c1633b0e593ad0224298646612ce7d0b5ac6d4e17616d7e4b\nStatus: Downloaded newer image for python:3.10-slim\n\nroot@docker-desktop:/# pip3 install owslib\nroot@docker-desktop:/# python3\n&gt;&gt;&gt; from owslib.ogcapi.features import Features\n&gt;&gt;&gt; w = Features('http://localhost:5000')\n&gt;&gt;&gt; w\n&lt;owslib.ogcapi.features.Features object at 0x7ff493e6f850&gt;\n&gt;&gt;&gt; conformance = w.conformance()\n&gt;&gt;&gt; conformance\netc\n</code></pre> </p> <p> <pre><code>docker run -it --rm --network=host --name owslib python:3.10-slim /bin/bash\nUnable to find image 'python:3.10-slim' locally\n3.10-slim: Pulling from library/python\n5b5fe70539cd: Pull complete \nf4b0e4004dc0: Pull complete \nc5424f0ac885: Pull complete \n9d21fe1624ec: Pull complete \nde0194aa1c21: Pull complete \nDigest: sha256:7dc5b4e948acd18c1633b0e593ad0224298646612ce7d0b5ac6d4e17616d7e4b\nStatus: Downloaded newer image for python:3.10-slim\n\nroot@docker-desktop:/# pip3 install owslib\nroot@docker-desktop:/# python3\n&gt;&gt;&gt; from owslib.ogcapi.features import Features\n&gt;&gt;&gt; w = Features('http://localhost:5000')\n&gt;&gt;&gt; w\n&lt;owslib.ogcapi.features.Features object at 0x7ff493e6f850&gt;\n&gt;&gt;&gt; conformance = w.conformance()\n&gt;&gt;&gt; conformance\netc\n</code></pre> </p> <p>We will refer to this installation in some of the Exercises where OWSLib is used.</p> <ol> <li> <p>For recent version of Docker run <code>docker compose version</code> \u21a9</p> </li> <li> <p>Alternatively, you can fork/clone the GitHub repository of this workshop directly from https://github.com/geopython/diving-into-pygeoapi.\u00a0\u21a9</p> </li> </ol>"},{"location":"standards/","title":"Overview","text":"<p>This section provides a high level overview of standards support in pygeoapi.</p>"},{"location":"standards/#standards","title":"Standards","text":"<p>Open standards are core to pygeoapi, and allow for broad interoperability and plug and play capability. pygeoapi supports a number of open standards (both formal standards and defacto or community driven).</p>"},{"location":"standards/#api-standards","title":"API standards","text":""},{"location":"standards/#ogc-api","title":"OGC API","text":"<p>pygeoapi implements the OGC API suite of standards from the Open Geospatial Consortium (OGC). From the OGC API website:</p> <p>Citation</p> <p>The OGC API family of standards are being developed to make it easy for anyone to provide geospatial data to the web. These standards build upon the legacy of the OGC Web Service standards (WMS, WFS, WCS, WPS, etc.), but define resource-centric APIs that take advantage of modern web development practices. This web page provides information on these standards in a consolidated location.</p> <p>These standards are being constructed as \"building blocks\" that can be used to assemble novel APIs for web access to geospatial content. The building blocks are defined not only by the requirements of the specific standards, but also through interoperability prototyping and testing in OGC's Innovation Program. </p> <p>Tip</p> <p>You can learn more about OGC APIs in the OGC API workshop</p>"},{"location":"standards/#ogc-api-common","title":"OGC API - Common","text":"<p>OGC API - Common is a common framework used in all OGC API's.  OGC API - Common provides the following functionality:</p> <ul> <li>based on OpenAPI 3.0</li> <li>HTML and JSON as the dominant encodings, alternative encodings are possible</li> <li>shared endpoints such as:<ul> <li><code>/</code> (landing page)</li> <li><code>/conformance</code></li> <li><code>/openapi</code></li> <li><code>/collections</code></li> <li><code>/collections/foo</code></li> </ul> </li> <li>aspects such as pagination, links between resources, basic filtering, query parameters (<code>bbox</code>, <code>datetime</code>, etc.)</li> <li>shared models (exceptions, links, etc.)</li> </ul> <p>OGC API - Common allows for specification developers to focus on the key functionality of a given API (i.e. data access, etc.) while using common constructs. This harmonizes OGC API standards and enables deeper integration with less code. This also allows for OGC API client software to be more streamlined.</p> <p>The <code>/conformance</code> endpoint indicates which standards and extensions are supported by a deployment of OGC API.</p>"},{"location":"standards/#ogc-api-building-blocks","title":"OGC API building blocks","text":"<p>The OGC API approach allows for modularity and \"profiling\" of APIs depending on your requirements.  This means you can mix and match OGC APIs together.</p> <p></p> <p>You can read more about this topic in the building blocks website.</p>"},{"location":"standards/#more-ogc-apis","title":"More OGC APIs","text":"<p>The OGC API effort is rapidly evolving. Numerous OGC API standards are in development, and will be implemented in pygeoapi over time:</p> <ul> <li>Routes provides access to routing data</li> <li>Styles defines a Web API that enables map servers, clients as well as visual style editors, to manage and fetch styles</li> <li>3D GeoVolumes facilitates efficient discovery of and access to 3D content in multiple formats based on a space-centric perspective</li> <li>Moving Features defines an API that provides access to data representing features that move as rigid bodies</li> <li>Joins  supports the joining of data, from multiple sources, with feature collections or directly with other input files</li> <li>Discrete Global Grid System enables applications to organise and access data arranged according to a Discrete Global Grid System (DGGS)</li> </ul> <p></p>"},{"location":"standards/#ogc-api-roadmap","title":"OGC API Roadmap","text":"<p>The OGC Standards Roadmap highlights the current and planned standards efforts as well as related extensions to those standards.  The Roadmap is useful for planning new functionality to users, as well as software implementation.</p> <p>Note</p> <p>The OGC Standards Roadmap provides a status and timeline on all OGC standards.  To filter the Roadmap on OGC APIs only, use the \"Filter by title, repo, label...\" text box (top left) and filter on \"OGC API\"</p>"},{"location":"standards/#ogc-apis-supported-by-pygeoapi","title":"OGC APIs supported by pygeoapi","text":"<p>pygeoapi implements numerous OGC API standards and draft standards. In addition, it is compliance certified and even a Reference Implementation (RI) for some of them. Compliance certification is important to remove interoperability risks. RI are always compliance certified. From OGC Compliance Testing Program Policies &amp; Procedures 08-134r11:</p> <p>Citation</p> <p>Candidate Products that pass all the tests in a Compliance Test Package, and that OGC has reviewed and certified as having passed those tests, are considered compliant with that Implementation Standard version. </p> <p>Citation</p> <p>A Reference Implementation is a fully functional, licensed copy of a tested, branded software that has passes the test for an associated conformance class in a version of an Implementation Standard and that is free and publicly available for testing via a web service or download.</p> Standard pygeoapi status Included in this workshop OGC API - Features Reference \u2705 OGC API - Coverages Implementing \u2705 OGC API - Tiles Reference \u2705 OGC API - Maps Implementing \u2705 OGC API - Processes Certified \u2705 OGC API - Records Implementing \u2705 OGC API - Environmental Data Retrieval Reference \u2705 SpatioTemporal Asset Catalog Implementing OGC API - Routes Planned OGC API - Styles Planned OGC API - Moving Features Planned OGC API - DGGS Planned <p>In the next section we will dive into the dedicated API's related to specific types of information. You will notice that all APIs are combined and available via a single OGC API endpoint, thanks to OGC API - Common.</p>"},{"location":"standards/#openapi","title":"OpenAPI","text":"<p>Core to OGC API - Common is the OpenAPI initiative to help describe and document an API. OpenAPI defines its structure in an OpenAPI document.  OGC API - Common suggests this document to be located at <code>/openapi</code>. With pygeoapi in a browser  this URL opens an interactive HTML page which facilitates  an API query. Append <code>?f=json</code> to view the document in JSON. The OpenAPI document indicates which endpoints are available in the service, which parameters it accepts and  what types of responses can be expected. The OpenAPI document is a similar concept to Capabilities XML as part of the first genration OGC Web Service standards.</p> <p>OpenAPI Specification parsing in a browser</p> <p>A common approach to interact with Open API's using json is to use a program like  Postman. Also there are browser plugins which enable to define api  requests interactively within a browser. For firefox download the plugin  poster. For Chrome  and Edge use Boomerang.  In Boomerang you can create individual web requests, but also load the open api specification  document and interact with any of the advertised endpoints. </p> <p>The OpenAPI community provides various tools, such as a validator for OAS documents or  generate code as a starting point for client development.</p>"},{"location":"standards/#content-and-format-standards","title":"Content and format standards","text":"<p>JSON is core in pygeoapi, providing a format that is machine readable and easy to parse and handle by client software and tools.  OGC API - Common provides uniform JSON formats for the various endpoints it supports.  Specific OGC API standards may specify domain specific formats (for example, GeoJSON for OGC API - Features, GeoTIFF for OGC API - Coverages) depending on the data type(s).</p>"},{"location":"standards/#pygeoapi-specific-conventions","title":"pygeoapi specific conventions","text":"<p>pygeoapi provides some conventions that are not put forth by OGC API standards, however facilitate some features and capabilities.</p>"},{"location":"standards/#the-f-parameter","title":"the <code>f</code> parameter","text":"<p>The <code>f</code> parameter can be used with any pygeoapi endpoint to specify an output format for a given   API request.  Examples are <code>f=html</code>, <code>f=json</code>, etc.</p> <p>Using a web browser to access OGC API</p> <p>Use your web browser to navigate to demo.pygeoapi.io. A browser by default opens  any OGC API in HTML (as a webpage) due to the HTTP Accept header  sent by the browser (<code>text/html</code>). On the right top corner you will notice a JSON link. The link  adds the parameter to the url: <code>f=json</code>, which is a mechanism of pygeoapi to override the HTTP Accept header sent by the web browser.</p> <p>Note</p> <p>When calling an OGC API from javascript, and the aim is to receive JSON, you can use the <code>?f=json</code> pygeoapi convention, or the content  negotiation as provided by the standard; include an HTTP header <code>Accept: \"application/json\"</code> in your request.</p> <p>In jQuery for example, this is represented by the dataType property:</p> <pre><code>$.ajax({\n    method: \"GET\",\n    url: \"https://demo.pygeoapi.io/master\",\n    dataType: \"json\"\n});\n</code></pre> <p>Or using the native fetch API:</p> <pre><code>const response = await fetch('https://demo.pygeoapi.io/master', {\n    method: 'GET',\n    headers: {\n        'Accept': 'application/json'\n    }\n});\n</code></pre>"},{"location":"standards/#the-skipgeometry-parameter","title":"the <code>skipGeometry</code> parameter","text":"<p>The <code>skipGeometry</code> (<code>true|false</code>, default is <code>false</code>) parameter can be used with feature data access to facilitate downloading vector data without geometry if desired.</p>"},{"location":"standards/#summary","title":"Summary","text":"<p>Standards are a cornerstone of pygeoapi, and will enable you to publish your data efficiently and with a low barrier for users.  Now, let's get to the action: Publishing data!</p>"},{"location":"advanced/","title":"Advanced topics","text":"<p>In this section, we will discuss more advanced pygeoapi topics primarily focused on extending pygeoapi via custom development and deployment.</p> <ul> <li>Multilingual support</li> <li>CRS support</li> <li>UI customization and templating</li> <li>Using pygeoapi in downstream applications</li> <li>Search Engine Optimization (SEO)</li> <li>Security and access control</li> <li>Semantic Web and Linked Data</li> <li>Cloud deployment</li> <li>INSPIRE support</li> <li>pygeoapi as a Bridge to Other Services</li> </ul>"},{"location":"advanced/administration/","title":"Administration","text":""},{"location":"advanced/administration/#overview","title":"Overview","text":"<p>pygeoapi provides an administration API (see the pygeoapi documentation for more information on how to enable, configure and use) in support of managing its configuration.  The API (not an OGC API) is implementated as a RESTful service to help create, update, replace or delete various elements of pygeoapi configuration.  A simple read-only UI is implemented as part of the admin API.</p>"},{"location":"advanced/administration/#user-interface","title":"User interface","text":"<p>By design, pygeoapi does not provide a true user interface to administer the configuration.  Given that the admin API exists, a few options can be considered for developing an admin UI:</p> <ul> <li>standalone<ul> <li>simple application with no connectivity to the pygeoapi admin API</li> <li>built off the pygeoapi configuration schema</li> <li>allows for paste of existing pygeoapi configuration</li> <li>allows for generating pygeoapi configuration for copy/paste into a pygeoapi deployment</li> <li>can be deployed anywhere (for example, GitHub Pages)</li> </ul> </li> <li>integrated<ul> <li>connected application to a pygeoapi deployment</li> <li>built off the pygeoapi configuration schema</li> <li>reads/writes a live pygeoapi configuration via the pygeoapi admin API (access controlled)</li> <li>deployed as part of a Docker Compose application</li> </ul> </li> </ul> <p>Note</p> <p>Have your own idea for a pygeoapi admin UI?  Connect with the pygeoapi community to discuss your idea!</p>"},{"location":"advanced/bridges/","title":"Exercise 9 - pygeoapi as a bridge to other services","text":"<p>In this section we explore how pygeoapi can be used as a facade, or a bridge, to re-publish web services with different interfaces. These bridges can help organisations migrating from OWS to OGC API.</p>"},{"location":"advanced/bridges/#publishing-wfs-as-ogc-api-features","title":"Publishing WFS as OGC API - Features","text":"<p>A powerful use case for pygeoapi is to provide an OGC API - Features interface over existing Web Feature Service (WFS)  or ESRI FeatureServer endpoints. In this scenario, you lower the barrier and increase the usability of existing services to  a wider audience. Let's set up an API on top of an existing WFS hosted by the city of Florence.</p> <p>Update the pygeoapi configuration</p> <p>Open the pygeoapi configuration in a text editor.  Find the line <code># START - EXERCISE 8 - WFS Proxy</code>.</p> <p>Add a new dataset section by uncommenting the lines up to <code># END - EXERCISE 8 - WFS Proxy</code>:</p> <pre><code>suol_epicentri_storici:\n    type: collection\n    title: Epicenters of the main historical earthquakes\n    description: Location of the epicenters of the main historical earthquakes in the territory of the Metropolitan City of Florence classified by year and intensity\n    keywords:\n        - earthquakes\n    links:\n        - type: text/xml\n          rel: canonical\n          title: Epicenters of the main historical earthquakes\n          href: http://pubblicazioni.cittametropolitana.fi.it/geoserver/territorio/wfs?request=getCapabilities&amp;service=WFS&amp;version=2.0.0\n          hreflang: it\n    extents:\n        spatial:\n            bbox: [10.94, 43.52, 11.65, 44.17]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: feature\n          name: OGR\n          data:\n              source_type: WFS\n              source: WFS:http://pubblicazioni.cittametropolitana.fi.it/geoserver/territorio/wfs?\n              source_capabilities:\n                  paging: True\n              source_options:\n                  OGR_WFS_LOAD_MULTIPLE_LAYER_DEFN: NO\n              gdal_ogr_options:\n                  EMPTY_AS_NULL: NO\n                  GDAL_CACHEMAX: 64\n                  CPL_DEBUG: NO\n          id_field: cpti_id\n          crs:\n            - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            - http://www.opengis.net/def/crs/EPSG/0/4258\n            - http://www.opengis.net/def/crs/EPSG/0/3857\n            - http://www.opengis.net/def/crs/EPSG/0/3003\n          storage_crs: http://www.opengis.net/def/crs/EPSG/0/3003\n          title_field: d\n          layer: territorio:suol_epicentri_storici\n</code></pre> <p>Save the file and restart Docker Compose. Navigate to http://localhost:5000/collections to evaluate whether the new dataset has been published.</p> <p>Note these important configuration slices under <code>providers</code>:</p> <ul> <li> <p>We use the pygeoapi OGR Provider.  This is the most versatile backend of pygeoapi for supporting numerous formats. Using the GDAL/OGR library (Python bindings) allows pygeoapi to connect to around 80+ Vector Formats. We could have used the <code>OGR</code> Provider instead of the <code>SQLiteGPKG</code> Provider above in the <code>osm_places-vec</code> exercise above.</p> </li> <li> <p><code>storage_crs</code> denotes the CRS (Coordinate Reference System) in which the dataset is stored (default is CRS84, i.e. 'longitude, latitude') </p> </li> <li><code>crs</code> is an array of CRSs that can be specified for the Features to be returned (<code>crs=</code> parameter), or for their bounding box (<code>bbox-crs=</code> parameter). Default is also CRS84.</li> </ul> <p>CRS support effectively allows pygeoapi to reproject the data from its storage CRS (here EPSG:3003) according to OGC API - Features - Part 2: Coordinate Reference Systems by Reference. The Advanced section of this workshop will further elaborate pygeoapi CRS support.</p>"},{"location":"advanced/bridges/#publishing-wms-as-ogc-api-maps","title":"Publishing WMS as OGC API - Maps","text":"<p>We can use the pygeoapi's WMSFacade provider to publish OGC Web Map Service (WMS) interfaces as OGC API - Maps.</p> <p>Let's set up an API on top of an existing WMS on the MapServer Demonstration Server:</p> <p>https://demo.mapserver.org/cgi-bin/msautotest</p> <p>Note</p> <p>Feel free to use an WMS of your choice, as you wish!</p> <p>Update the pygeoapi configuration</p> <p>Open the pygeoapi configuration in a text editor.  Find the line <code>## START - EXERCISE 8 - WMS Proxy</code>.</p> <p>Add a new dataset section by uncommenting the lines up to <code>## END - EXERCISE 8 - WMS Proxy</code>:</p> <p>Be sure to keep the proper YAML indentation.</p> <pre><code>wms-facade-demo:\n    type: collection\n    title: WMS Facade demo\n    description: WMS Facade demo\n    keywords:\n        - WMS facade\n    links:\n        - type: text/html\n          rel: canonical\n          title: MapServer\n          href: https://mapserver.org\n          hreflang: en\n    extents:\n        spatial:\n            bbox: [-180,-90,180,90]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: map\n          name: WMSFacade\n          data: https://demo.mapserver.org/cgi-bin/msautotest\n          options:\n              layer: world_latlong\n              style: default\n          format:\n              name: png\n              mimetype: image/png\n</code></pre> <p>Run the following requests in your web browser:</p> <ul> <li>default map: http://localhost:5000/collections/wms-facade-demo/map?f=png</li> <li>specific width/height: http://localhost:5000/collections/wms-facade-demo/map?f=png&amp;width=800&amp;height=600</li> <li>specific area of interest (bbox of Canada): http://localhost:5000/collections/wms-facade-demo/map?f=png&amp;width=800&amp;height=600&amp;bbox=-142,42,-52,84</li> </ul> <p></p> <p>Tip</p> <p>Try with your own bbox and width/height values!</p>"},{"location":"advanced/bridges/#publishing-csw-as-ogc-api-records","title":"Publishing CSW as OGC API - Records","text":"<p>In this section we'll have a look at how to publish Catalogue Service for the Web (CSW) as OGC API - Records. For that, we will use the pycsw OGC CITE demo CSW service.</p> <p>Update the pygeoapi configuration</p> <p>Open the pygeoapi configuration in a text editor.  Find the line <code># START - EXERCISE 8 - CSW Proxy</code>.</p> <p>Add a new dataset section by uncommenting the lines up to <code># END - EXERCISE 8 - CSW Proxy</code>:</p> <pre><code>cite_demo:\n    type: collection\n    title: pycsw OGC CITE demo and Reference Implementation\n    description: pycsw is an OARec and OGC CSW server implementation written in Python. pycsw fully implements the OGC API - Records and OpenGIS Catalogue Service Implementation Specification (Catalogue Service for the Web). Initial development started in 2010 (more formally announced in 2011). The project is certified OGC Compliant, and is an OGC Reference Implementation. Since 2015, pycsw is an official OSGeo Project. pycsw allows for the publishing and discovery of geospatial metadata via numerous APIs (CSW 2/CSW 3, OpenSearch, OAI-PMH, SRU). Existing repositories of geospatial metadata can also be exposed, providing a standards-based metadata and catalogue component of spatial data infrastructures. pycsw is Open Source, released under an MIT license, and runs on all major platforms (Windows, Linux, Mac OS X)\n    keywords:\n        - ogc\n        - cite\n        - compliance\n        - interoperability\n    extents:\n        spatial:\n            bbox: [-180,-90,180,90]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: record\n          name: CSWFacade\n          data: https://demo.pycsw.org/cite/csw\n          id_field: identifier\n          time_field: datetime\n          title_field: title\n</code></pre> <p>You can explore the proxied catalogue collection using this endpoints:</p> <ul> <li>collection metadata page: http://localhost:5000/collections/cite_demo</li> <li>list of records: http://localhost:5000/collections/cite_demo/items</li> <li>record: http://localhost:5000/collections/cite_demo/items/urn:uuid:19887a8a-f6b0-4a63-ae56-7fba0e17801f</li> </ul> <p>Tip</p> <p>Remember that you can use the QGIS client suggested here to explore this API.</p>"},{"location":"advanced/bridges/#publishing-sensorthings-api-as-ogc-api-features","title":"Publishing SensorThings API as OGC API - Features","text":"<p>The OGC SensorThings API standard offers RESTfull interfaces to interconnect IoT devices, data, in an open and unified way. Although there are some clients that support this standard, there are many more that support OGC API - Features.</p> <p>The pygeoapi SensorThings bridge enables to proxy the SensorThings entities (e.g.:  <code>Thing</code> , <code>Sensor</code>, <code>DataStream</code>, <code>ObservedProperty</code> ) into feature collections.</p> <p>In this section we'll have a look at how to Publish a SensorThings API <code>Thing</code> as an OGC API - Features collection, which can then be consumed by various clients, like the ones listed here</p> <p>Update the pygeoapi configuration</p> <p>Open the pygeoapi configuration in a text editor.  Find the line <code># START - EXERCISE 8 - SensorThings Proxy</code>.</p> <p>Add a new dataset section by uncommenting the lines up to <code># END - EXERCISE 8 - SensorThings Proxy</code>:</p> <pre><code>toronto_bikes:\n    type: collection\n    title: Toronto Bikes SensorThings\n    description: The geographic location with coordinates for the Toronto bike share station\n    keywords:\n        - sediments\n    extents:\n        spatial:\n            bbox: [-180,-90,180,90]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: feature\n          name: SensorThings\n          data: https://toronto-bike-snapshot.sensorup.com/v1.0/\n          entity: Things\n</code></pre>"},{"location":"advanced/cloud/","title":"Cloud deployment","text":"<p>Deployment to cloud infratructure and concepts such as Microservices and Twelve-Factor present specific requirements to how software is designed and implemented. pygeoapi supports these concepts, having a low footprint on CPU and memory, and does not persist user state, therefore being able to scale without risks.</p>"},{"location":"advanced/cloud/#pygeoapi-and-docker","title":"pygeoapi and Docker","text":"<p>A Docker image is available for pygeoapi. You can run the image locally as:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -p 5000:80 geopython/pygeoapi:latest\n</code></pre> </p> <p> <pre><code>docker run -p 5000:80 geopython/pygeoapi:latest\n</code></pre> </p> <p>Review the pygeoapi Dockerfile</p> <p>Notice in the pygeoapi Dockerfile how the open api file is generated as part of the Docker startup script. </p> <p>In a typical configuration one would override the default pygeoapi configuration file in the image with a customized one and include the data folder:</p> <p>using custom configuration</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -p 5000:80 \\ \n-v $(pwd)/pygeoapi-config.yml:/pygeoapi/local.config.yml \\\n-v $(pwd)/geodata:/geodata https://hub.docker.com/r/geopython/pygeoapi:latest\n</code></pre> </p> <p> <pre><code>docker run -p 5000:80 -v ${pwd}/pygeoapi-config.yml:/pygeoapi/local.config.yml -v ${pwd}/geodata:/geodata https://hub.docker.com/r/geopython/pygeoapi:latest\n</code></pre> </p> <p>Alternatively, you can build a fresh Docker image including both the configuration and data for the service. </p> <pre><code>FROM geopython/pygeoapi:latest\nCOPY ./my.config.yml /pygeoapi/local.config.yml\n</code></pre> <p>You may have noticed that the pygeoapi configuration file includes a reference to the endpoint on which pygeoapi is published. This configuration should match the public endpoint of the service (domain, path and port).</p> <p>By default the pygeoapi Docker image will run from the <code>root</code> path <code>/</code>. If you need to run from a sub-path and have all internal URLs correct you can set the <code>SCRIPT_NAME</code> environment variable.</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -p 5000:80 -e SCRIPT_NAME='/mypygeoapi' \\\n-v $(pwd)/my.config.yml:/pygeoapi/local.config.yml -it geopython/pygeoapi\n# browse to http://localhost:5000/mypygeoapi\n</code></pre> </p> <p> <pre><code>docker run -p 5000:80 -e SCRIPT_NAME='/mypygeoapi' -v ${pwd}/my.config.yml:/pygeoapi/local.config.yml -it geopython/pygeoapi\n# browse to http://localhost:5000/mypygeoapi\n</code></pre> </p>"},{"location":"advanced/cloud/#summary","title":"Summary","text":"<p>Congratulations! You can now deploy pygeopi as a cloud native service.</p>"},{"location":"advanced/crs/","title":"CRS support","text":"<p>Starting with version 0.15.0, pygeoapi fully supports OGC API - Features - Part 2: Coordinate Reference Systems by Reference. This enables the import and export of any data according to dedicated projections. A \"projection\" is specified with a Coordinate Reference System (CRS) identifier. These are in URI formats like <code>http://www.opengis.net/def/crs/OGC/1.3/CRS84</code> (basically WGS84 in longitude, latitude axis order) or the \"OpenGIS\" format like <code>http://www.opengis.net/def/crs/EPSG/0/4258</code>. Note that the \"EPSG:\" format like <code>EPSG:4326</code> is outside the scope of the OGC standard.</p> <p>In particular CRS support allows for the following:</p> <ul> <li>to specify the CRS in which the data is stored, in pygeoapi the <code>storageCRS</code> config option </li> <li>to specify the list of CRSs in which Feature data can be retrieved, in pygeoapi the <code>crs</code> config option</li> <li>to publish these CRSs in the collection metadata</li> <li>the <code>crs=</code> query parameter for a collection or collection item</li> <li>the <code>bbox-crs=</code> query parameter to indicate that the <code>bbox=</code> parameter is encoded in that CRS</li> <li>the HTTP response header <code>Content-Crs</code> denotes the CRS of the Feature(s) in the data returned</li> </ul> <p>So although GeoJSON mandates WGS84 in longitude, latitude order, the client and server may still agree on other CRSs.</p> <p>Under the hood, pygeoapi uses the well-known pyproj Python wrapper to the PROJ library.</p> <p>Read more in the pygeoapi documentation in the CRS Chapter.</p>"},{"location":"advanced/crs/#exercise","title":"Exercise","text":"<p>Adding CRS support to pygeoapi collections for the <code>provider</code> type <code>feature</code> is as simple as for example extending the Exercise 2 config with this snippet:</p> <pre><code>  crs:\n      - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n      - http://www.opengis.net/def/crs/EPSG/0/4258\n      - http://www.opengis.net/def/crs/EPSG/0/3857\n      - http://www.opengis.net/def/crs/EPSG/0/4326\n  storage_crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n</code></pre> <p>Axis</p> <p>Axis order (are coordinates it longitude, latitude or latitude, longitude order?) in projections is often a source of confusion.  However the URI format is quite clear on this, at least more than the <code>EPSG:</code> format. So http://www.opengis.net/def/crs/OGC/1.3/CRS84 is longitude, latitude order, while http://www.opengis.net/def/crs/EPSG/0/4326 is latitude, longitude order.</p> <p>In the config below, we basically indicate that the data is stored in WGS84 (longitude, latitude axis order) and can be retrieved in CRSs like <code>http://www.opengis.net/def/crs/EPSG/0/4258</code> (ETRS89 latitude, longitude axis order) etc.</p> <p>Add CRS to a pygeoapi configuration</p> <p>Open the pygeoapi configuration file in a text editor. Find the line <code># START - EXERCISE 2 - firenze-terrain</code></p> <p>Update the dataset section with CRS support by replacing it with the snippet below:</p> <pre><code>firenze-terrains-vec:\n    type: collection\n    title: Administrative boundaries before 2014\n    description: Cadastral parcels (terrains) from the cadastre. Territory Agency; SIT and Information Networks;\n    keywords:\n        - Cadastral parcels\n    links:\n        - type: text/html\n          rel: canonical\n          title: Administrative boundaries before 2014\n          href: http://dati.cittametropolitana.fi.it/geonetwork/srv/metadata/cmfi:c539d359-4387-4f83-a6f4-cd546b3d8443\n          hreflang: it\n    extents:\n        spatial:\n            bbox: [11.23,43.75,11.28,43.78]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: feature\n          name: SQLiteGPKG\n          data: /data/firenze_terrains.gpkg # place correct path here\n          id_field: fid\n          crs:\n            - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            - http://www.opengis.net/def/crs/EPSG/0/4258\n            - http://www.opengis.net/def/crs/EPSG/0/3857\n            - http://www.opengis.net/def/crs/EPSG/0/4326\n          storage_crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n          title_field: codbo\n          table: firenze_terrains\n</code></pre> <p>Now we can inspect the collection metadata and retrieve Features in various CRSs. We can even do this in the Swagger UI, but using the browser is quite fast and clear.</p>"},{"location":"advanced/crs/#metadata","title":"Metadata","text":"<p>Collection Metadata</p> <p>Open the URL:  http://localhost:5000/collections/firenze-terrains-vec Your configured CRSs are displayed at the bottom of the page: \"Reference Systems\" and \"Storage CRS\".</p> <p>See these in JSON format, also at the bottom:  http://localhost:5000/collections/firenze-terrains-vec?f=json <pre><code>   .\n   .\n   \"crs\":[\n    \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\",\n    \"http://www.opengis.net/def/crs/EPSG/0/4258\",\n    \"http://www.opengis.net/def/crs/EPSG/0/3857\",\n    \"http://www.opengis.net/def/crs/EPSG/0/4326\"\n   ],\n   \"storageCRS\":\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n }\n</code></pre></p>"},{"location":"advanced/crs/#reproject-features","title":"Reproject Features","text":"<p>Using the CRS query parameter</p> <p>Open the URL:  http://localhost:5000/collections/firenze-terrains-vec/items?f=json&amp;crs=http://www.opengis.net/def/crs/EPSG/0/4258</p> <p>This is ETRS89, similar to WGS84, but for the European Continent (Datum) and in lat,lon order. This is e.g. used in INSPIRE.</p> <p>See these in JSON format, also at the bottom:</p> <pre><code>\"type\":\"FeatureCollection\",\n  \"features\":[\n      {\n          \"type\":\"Feature\",\n          \"geometry\":{\n              \"type\":\"MultiPolygon\",\n              \"coordinates\":[\n                  [\n                      [\n                          [\n                              43.77805936835436,\n                              11.23486287997071\n                          ],\n                          [\n                              43.77809089595012,\n                              11.2348943159564\n                          ],\n                          [\n                              43.77810038978989,\n                              11.23491359066035\n                          ],\n                          [\n                              43.77705757917591,\n                              11.2368990806804\n   .\n   .\n   \"crs\":[\n    \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\",\n    \"http://www.opengis.net/def/crs/EPSG/0/4258\",\n    \"http://www.opengis.net/def/crs/EPSG/0/3857\",\n    \"http://www.opengis.net/def/crs/EPSG/0/4326\"\n   ],\n   \"storageCRS\":\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n }\n</code></pre> <p>If you open the browser development console, you can observe the HTTP response header:</p> <p><code>Content-Crs: &lt;http://www.opengis.net/def/crs/EPSG/0/4258&gt;</code></p> <p>(The CRS URI is always enclosed in <code>&lt;</code> <code>&gt;</code>)</p>"},{"location":"advanced/downstream-applications/","title":"Using pygeoapi in downstream applications","text":"<p>While pygeoapi is typically run as a standalone application, it is also designed to enable direct usage via external Python applications in a number of different design patterns.at multiple levels. From the official documentation, the below diagram provides an overview of how pygeoapi is designed and architected:</p> <p></p> <p>There are two main ways to create a downstream application:</p> <ul> <li>Using the core API</li> <li>Extending through the web interface of the frameworks supported out-of-the box</li> </ul>"},{"location":"advanced/downstream-applications/#using-the-core-api-directly","title":"Using the core API directly","text":"<p>The core pygeoapi Python API entrypoint is <code>pygeoapi.api.API</code>, which is initialized with the pygeoapi configuration as a Python <code>dict</code>.</p> <p>Note</p> <p>The pygeoapi core API enables the developer to manage pygeoapi configuration in any number of ways (file on disk, object storage, database driven, etc.)</p> <p>From here, API objects provide a number of functions, most of which require a <code>pygeoapi.api.APIRequest</code> object according to the web framework. Examples include:</p> <ul> <li>Flask</li> <li>Starlette</li> <li>FastAPI</li> <li>Django</li> </ul> <p>Note</p> <p>See the official documentation for more information about <code>pygeoapi.api.APIRequest</code> (you can even use your own custom request object as long as it satisfies the interface requirements of <code>pygeoapi.api.APIRequest</code>.</p> <p>Let's take a look at what a bare bones API integration would look like, using Flask as an example:</p> <pre><code>from flask import Flask, make_response, request\n\nfrom pygeoapi.api import API\nfrom pygeoapi.util import yaml_load\n\nmy_flask_app = Flask(__name__)\n\nwith open('my-pygeoapi-config.yml') as fh:\n    my_pygeoapi_config = yaml_load(fh)\n\nmy_pygeoapi_api = API(my_pygeoapi_config)\n\n@my_flask_app.route('/my-landing-page-route')\ndef my_def():\n\n    headers, status, content = my_pygeoapi_api.landing_page(request)\n\n    response = make_response(content, status)\n\n    if headers: \n        response.headers = headers\n\n    return response\n</code></pre> <p>Note</p> <p>See the official documentation for more information on the core Python API</p>"},{"location":"advanced/downstream-applications/#extending-through-a-web-framework","title":"Extending through a web framework","text":"<p>pygeoapi can be installed and used at the web routing level as a dependency in your project. This is pretty much the easier way to leverage the flexibility and the modularity of its architecture. Once the interfaces are available then the developer can use the preferred framework for serving the frontend application. In practice the following modules:</p> <ul> <li><code>pygeoapi.flask_app.py</code> for Flask blueprints</li> <li><code>pygeoapi.starlette_app.py</code> for Starlette/FastAPI</li> <li><code>pygeoapi.django_app.py</code> for Django (ongoing PR)</li> </ul> <p>Some examples are available below for developers.</p>"},{"location":"advanced/downstream-applications/#examples","title":"Examples","text":""},{"location":"advanced/downstream-applications/#flask-blueprints","title":"Flask blueprints","text":"<pre><code>from flask import Flask\n\nfrom pygeoapi.flask_app import BLUEPRINT as pygeoapi_blueprint\n\nmy_flask_app = Flask(__name__, static_url_path='/static')\nmy_flask_app.url_map.strict_slashes = False\n\n# mount all pygeoapi endpoints to /oapi\nmy_flask_app.register_blueprint(pygeoapi_blueprint, url_prefix='/oapi')\n\n\n@my_flask_app.route('/')\ndef home():\n    return '&lt;p&gt;home page&lt;/p&gt;'\n</code></pre>"},{"location":"advanced/downstream-applications/#starlette-and-fastapi","title":"Starlette and FastAPI","text":"<pre><code>import uvicorn\nfrom fastapi import FastAPI\nfrom fastapi.exceptions import RequestValidationError\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\nfrom starlette.middleware.cors import CORSMiddleware\n\nfrom pygeoapi.starlette_app import app as pygeoapi_app\n\n\ndef create_app() -&gt; FastAPI:\n    \"\"\"Handle application creation.\"\"\"\n    app = FastAPI(title=\"my_pygeoapi\", root_path=\"\", debug=True)\n\n    # Set all CORS enabled origins\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=[\"*\"],\n        allow_credentials=True,\n        allow_methods=[\"*\"],\n        allow_headers=[\"*\"],\n    )\n\n    @app.exception_handler(StarletteHTTPException)\n    async def custom_http_exception_handler(request, e):\n        return await http_exception_handler(request, e)\n\n    @app.exception_handler(RequestValidationError)\n    async def custom_validation_exception_handler(request, e):\n        return await request_validation_exception_handler(request, e)\n\n    # mount all pygeoapi endpoints to /oapi\n    app.mount(path=\"/oapi\", app=pygeoapi_app)\n\n    return app\n\napp = create_app()\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, port=5000)\n</code></pre>"},{"location":"advanced/i18n/","title":"Multilingual support","text":"<p>pygeoapi supports multilinguality at three levels:</p> <ul> <li>In the pygeoapi configuration you can provide titles and abstracts of the service and collections in multiple languages.</li> <li>A set of translatable text-strings which are translated and introduced as part of the JSON and HTML output formats. Translations are managed by the Babel framework</li> <li>Column names/values in feature based datasets. If a dataset contains columns in multiple languages, pygeoapi will try to return data responses in the requested language</li> </ul> <p>Note</p> <p>Error messages are not translated, to facilitate copy-paste of the error into  stackoverflow and  GitHub issues.</p> <p>Language negotiation is triggered by the HTTP <code>Accept-Language</code> header as sent by the client, and can always be overridden with the <code>?lang=fr</code> url parameter.</p>"},{"location":"advanced/i18n/#multilingual-configuration","title":"Multilingual configuration","text":"<p>In the pygeoapi configuration you can indicate the languages supported by the instance. The first language is the default language. For most of the textual configuration properties you can provide a translation in alternative languages.</p> <pre><code>lakes:\n  type: collection\n  title:\n      en: Large Lakes\n      fr: Grands Lacs\n  description:\n      en: lakes of the world, public domain\n      fr: lacs du monde, domaine public\n  keywords:\n      en:\n          - lakes\n          - water bodies\n      fr:\n          - lacs\n          - plans d'eau\n</code></pre>"},{"location":"advanced/i18n/#text-strings-within-jinja2-html-templates","title":"Text strings within Jinja2 HTML templates","text":"<p>Most of the translatable text strings exist within the Jinja2 HTML templates. Text strings to be translated are placed in a <code>trans</code> tag, as follows:</p> <pre><code>&lt;title&gt;{% trans %}Page title{% endtrans %}&lt;/title&gt;\n</code></pre> <p>Babel provides a utility which extracts all keys to be translated from the templates into a single <code>.pot</code> file. </p> Linux/MacWindows (PowerShell) <p> <pre><code>pybabel extract -F babel-mapping.ini -o locale/messages.pot ./\n</code></pre> </p> <p> <pre><code>pybabel extract -F babel-mapping.ini -o locale/messages.pot ./\n</code></pre> </p> <p>The resulting <code>.pot</code> file is used to create or update existing <code>.po</code> files, which exist for each language, containing the actual translations.</p> Linux/MacWindows (PowerShell) <p> <pre><code>pybabel init -d locale -l it -i locale/messages.pot\n</code></pre> </p> <p> <pre><code>pybabel init -d locale -l it -i locale/messages.pot\n</code></pre> </p> <p>The <code>.po</code> files are stored in pygeoapi's source code repository on GitHub. You can create a Pull Request to add or update your favourite languages. <code>.po</code> files can also be added to translation software such as transifex.com. </p> <p>Edit a <code>.po</code> file</p> <p>Open a <code>.po</code> file from the locale folder in a text editor. Edit some values. Save the file and restart the service. Verify that the updated content is available. You can also try to add a new key to a template and translate it via the <code>.po</code> mechanism.</p>"},{"location":"advanced/i18n/#annotating-the-language-of-data-columns","title":"Annotating the language of data columns","text":"<p>pygeoapi includes a meachanism to influence the API responses based on the requested language. If your service operates with multilingual requirements, it may make sense to add textual columns in multiple languages. For example, in the pygeoapi configuration you can then indicate which column should be used as the title field, for which language. </p> <p>Publish a multilingual dataset</p> <p>For this workshop we have prepared a multilingual dataset of <code>free wifi hotspots in Florence</code> (<code>workshop/exercises/data/free-wifi-florence.csv</code>). Add the dataset to the pygeoapi configuration using the CSV provider. Add a title-field configuration with for each translated column the relevant language.</p> <pre><code>data: /data/free-wifi-florence.csv\nid_field: id\ntitle_field: \n  en: name-en\n  it: name-it\n  de: name-de\n</code></pre> <p>Test the configuration by navigating to the items page of the collection and switching the language by appending <code>?lang=it</code>, <code>?lang=de</code> to the URL.</p>"},{"location":"advanced/i18n/#summary","title":"Summary","text":"<p>Congratulations! You've customized pygeoapi to support multiple languages.</p>"},{"location":"advanced/inspire/","title":"INSPIRE support","text":"<p>INSPIRE is a European directive on data sharing in the environmental domain. EU member states  have invested almost 20 years of effort to harmonize data in the environmental domain and publish it using OGC standards.  The directive is at the end of its lifetime, but the expectation is that conventions from the INSPIRE directive will be adopted  by upcoming directives, such as green deal and open data directives. </p> <p>In the past 20 years, the IT landscape has changed considerably. INSPIRE has followed these developments by adopting a  series of Good Practices which supersede the original  Technical Guidelines.</p> <p>Some of the recent and upcoming good practices focus on the developments in the OGC API domain.  One good practice has already been adopted on providing  download services using OGC API - Features  and others are in preparation, such as the  discovery service using OGC API - Records.  These developments make pygeoapi an interesting option  for providing INSPIRE services.</p>"},{"location":"advanced/inspire/#inspire-services-and-their-ogc-api-alternative","title":"INSPIRE services and their OGC API alternative","text":"<p>INSPIRE services are typically categorized in view services, download services and discovery services.  Download services are further devided in Vector sources, Coverage sources and Sensor sources. The OGC API initiative provides the related APIs for each service. The table below highlights for each service type the Technical Guidenace recommendation and the relevant Good Practices. </p> Service type TG OGC API Good practice status Discovery service CSW OGC API - Records In preparation View service WM(T)S OGC API - Maps / OGC API - Tiles Not scheduled In preparation Download service - Vector WFS OGC API - Features Adopted Download service - Coverage WCS OGC API - Coverages / STAC <sup>1</sup> Not scheduled In preparation Download service - Sensor SOS OGC API - EDR / Sensorthings API <sup>2</sup> Not scheduled Adopted <p>Note</p> <p>When adopting Good Practices, consider that the documentation and tools for validation are still limited.  Also the INSPIRE GeoPortal may not be ready to harvest records from an OGC API - Records endpoint yet. </p> <p>Publish metadata documents as an INSPIRE discovery service</p> <p>In this exercise we will import a folder of metadata documents into a TinyDB database and configure the database as an OGC API - Records endpoint.  Download the zipfile 'inspire-records.zip' from the repository. Expand the zipfile. The <code>/tests</code> folder contains a script  load_tinydb_records.py. The script has 2 parameters:</p> Linux/MacWindows (PowerShell) <p> <pre><code>python3 load_tinydb_records.py &lt;path/to/xml-files&gt; &lt;output.db&gt;\n</code></pre> </p> <p> <pre><code>python3 load_tinydb_records.py &lt;path/to/xml-files&gt; &lt;output.db&gt;\n</code></pre> </p> <p>Now configure TinyDB as a provider for OGC API - Records. Restart the service and verify the result. Verify also the XML output of some of the records. </p>"},{"location":"advanced/inspire/#ogc-api-and-the-inspire-data-models","title":"OGC API and the INSPIRE data models","text":"<p>Most of the INSPIRE data models have a hierarchical structure, which is not common in the GeoJSON oriented OGC API community.  In theory it is possible to provide hierarchical GML from an OGC API endpoint, but there are not many experiences yet currently. Two initiatives may bring improvement to this aspect:</p> <ul> <li>pygeoapi facilitates to configure a JSON-LD encoding using an arbitrary ontology. The  good practice on semantic web provides some of the data models in an RDF ontology</li> <li>The good practice on alternative encodings suggests an  approach to publish datasets using a relational data model such as GeoPackage, which fits better with the OGC API community</li> </ul>"},{"location":"advanced/inspire/#ogc-api-as-a-codelist-registry","title":"OGC API as a codelist registry","text":"<p>A typical use case in INSPIRE is the option to extend an INSPIRE codelist to match a local requirement. For this use case the  extended codelist has to be published in a registry. OGC API - Common provides mechanisms to publish lists of concepts as items  in collections. pygeoapi also provides a mechanism to advertise the concepts using the SKOS ontology via its JSON-LD  encoding. In the coincidence that a concept has a geometry property, the codelist can even be published as OGC API - Features  (on a map).</p> <p>Publish a codelist via OGC API</p> <p>A German Soiltype codelist has been made available in CSV format in <code>workshop/exercises/data/bodenart.en.csv</code>. Use the CSV provider to publish this dataset in pygeoapi. Which URL would you use to reference a concept in the published list?</p> <pre><code>SoilTypes:\n    type: collection\n    title: Soil types of Germany\n    description: Bodenarten auf Basis der Bodenkundlichen Kartieranleitung 5. Auflage (KA5)\n    keywords:\n        - soiltype\n    links:\n        - type: text/html\n          rel: canonical\n          title: Soil types of Germany\n          href: https://registry.gdi-de.org/codelist/de.bund.thuenen/bodenart\n          hreflang: de\n    extents:\n        spatial:\n            bbox: [0,0,0,0]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: feature\n          name: CSV\n          data: /data/bodenart.en.csv\n          id_field: Label\n          geometry:\n              x_field: x\n              y_field: y\n</code></pre>"},{"location":"advanced/inspire/#summary","title":"Summary","text":"<p>Congratulations! You have worked with pygeoapi for INSPIRE compliance</p> <ol> <li> <p>Sensorthings API and is not an OGC API standards and is currently not supported by pygeoapi. It is listed here for completeness\u00a0\u21a9</p> </li> <li> <p>STAC is not OGC API standard but is supported by pygeoapi\u00a0\u21a9</p> </li> </ol>"},{"location":"advanced/security-access-control/","title":"Security and access control","text":""},{"location":"advanced/security-access-control/#overview","title":"Overview","text":"<p>Security in general is a broad and complex topic, affecting the entire development lifecycle. It is recommended to follow security best practices during all development phases like design, coding and deployment. In this workshop we will focus only on API security and access control, rather than the full range of application security topics.</p>"},{"location":"advanced/security-access-control/#api-security","title":"API security","text":"<p>API security is the whole process to protect APIs from attacks. It is part of the more general security guidelines that are being treated in the OWASP Top Ten document. So those recommendations still apply.</p> <p>Application Security</p> <p>The Open Web Application Security Project (OWASP) Top Ten document is a very good tool to ensure the bare minimum against the security risks and manage critical treats that are most likely affecting your code.</p>"},{"location":"advanced/security-access-control/#access-control","title":"Access control","text":"<p>Access control is another fundamental part of the Open Web Application Security Project and addresses the Identity and Access Management (IAM) of an API. IAM consists of two different parts of a security flow:</p> <ul> <li>Authentication (AuthN) verifies the user's identity in order to allow or deny subsequent access (see next)</li> <li>Authorization (AuthZ) validates permissions of a user (identity) to access a resource. The permissions of that identity are checked against a resource's policies to (dis)allow access to, for example, (parts of) an API.</li> </ul> <p>These parts are usually managed by dedicated infrastructures and solutions which usually provide most of the security requirements out-of-the-box.</p> <p>OpenAPI Security Specification</p> <p>The OpenAPI specification has very well-defined elements for developers and adopters. The most relevant are:</p> <ul> <li>Security Scheme Object defines the security schemes that can be used by the operations. Supported schemes are HTTP Authentication, an API Key, OAuth2's flows and OpenID Connect.</li> <li>Security Requirement Object defines the list of required security schemes to execute an operation.</li> </ul>"},{"location":"advanced/security-access-control/#pygeoapi-considerations","title":"pygeoapi considerations","text":"<p>pygeoapi does not yet support OpenAPI security elements.  Future implementation could include generation of pygeoapi's OpenAPI document with a security configuration, or to generate from a known access control solution/application (such as fastgeoapi or pygeoapi-auth).</p> <p>Direct access control implementation is not in scope for pygeoapi.  The desired approach here would be to leverage an existing solution and define/integrate the secured endpoints accordingly.  For example, fastgeoapi or pygeoapi-auth could be deployed downstream of pygeoapi, and govern access to specific endpoints (collections, items, etc.).</p> <p>Note</p> <p>The pygeoapi official documentation provides the project's official status on security implementation updates, and should be visited to keep up to date with the latest status on security implementation in the project.</p>"},{"location":"advanced/semantic-web-linked-data/","title":"Semantic Web and Linked Data","text":"<p>This section touches on 3 aspects of the Semantic Web:</p> <ul> <li>Search engines</li> <li>Publish spatial data in the semantic web</li> <li>Proxy to semantic web</li> </ul>"},{"location":"advanced/semantic-web-linked-data/#search-engines","title":"Search engines","text":"<p>Search engines use technology similar to the Semantic Web to facilitate capturing structured data (aka rich snippets) from web pages. pygeoapi supports this use case via embedding a <code>schema.org</code> JSON-LD snippet in the HTML encoding,</p> <p>Tip</p> <p>The <code>schema.org</code> ontology is not a formal Semantic Web ontology, it is therefore a bit disconnected from the rest of the Semantic Web</p> <p>Tip</p> <p>See more information at Search Engine Optimization</p>"},{"location":"advanced/semantic-web-linked-data/#publish-spatial-data-in-the-semantic-web","title":"Publish spatial data in the Semantic Web","text":"<p>OGC API - Common adopted a number of W3C conventions, which bring OGC APIs closer to the standards of Semantic Web, compared to first generation OGC Web Service (OWS) standards.</p> <p>Currently, pygeaopi does not aim to be a full implementation of Semantic Web, however it is possible to advertise some aspects of the Semantic Web so the data can be traversed by Semantic Web aware clients.</p> <p>Use a SPARQL client to query pygeoapi</p> <p>SPARQL is commonly known as the query language to query triple stores.  However you can also use SPARQL to query graphs of linked web resources. The SPARQL client traverses links between  the resources to locate the requested triples. Jena ARQ is a command  line SPARQL client which is able to run such queries. Jena is quite difficult to set up, although there is a  Docker image available. As an alternative we will use a web-based implementation  of the ARQ engine. Navigate to https://demos.isl.ics.forth.gr/sparql-ld-endpoint and replace the query in the textbox with:</p> <pre><code>SELECT * WHERE { \n  SERVICE &lt;https://demo.pygeoapi.io/master/collections/lakes&gt; { \n    { \n    ?s ?p ?o  \n    } \n  } \n}\n</code></pre> <p>A query to an item returns the item with its geometry:</p> <pre><code>SELECT * WHERE { \n  SERVICE &lt;https://demo.pygeoapi.io/master/collections/lakes/items/1&gt; {\n    {{ ?s ?p ?o }}\n  }\n}\n</code></pre> <p>Notice that the SPARQL client fails if you hardcode the HTML format. </p> <pre><code>SELECT * WHERE { \n  SERVICE &lt;https://demo.pygeoapi.io/master/collections/lakes?f=html&gt; {\n    { ?s ?p ?o }\n  }\n}\n</code></pre> <p>JSON-LD as expected by search engines has some challenges for semantic web tools. So how does it work if the format is not hardcoded?  The SPARQL engine negotiates with the endpoint to evaluate which (RDF) encodings are available, and based on the content negotiation  it requests the <code>JSON_LD</code> encoding via <code>f=jsonld</code>.</p> <p>pygeoapi adopted conventions of the JSON-LD community to annotate JSON as RDF. For features, each property (column in a source table)  is annotated by a semantic concept. The related configuration to apply the annotations is managed in the context element of a resource definition</p> <p>Tip</p> <p>Read more in the pygeoapi documentation.</p> <pre><code>context:\n    - schema: https://schema.org/\n    stn_id: schema:identifer\n    datetime:\n        \"@id\": schema:observationDate\n        \"@type\": schema:DateTime\n    value:\n        \"@id\": schema:value\n        \"@type\": schema:Number\n</code></pre>"},{"location":"advanced/semantic-web-linked-data/#proxy-to-the-semantic-web","title":"Proxy to the Semantic Web","text":"<p>Spatial data engineers are generally challenged when importing and visualizing fragments of the semantic web. The number of spatial  clients currently supporting SQARQL interaction is limited and requires expert knowledge to use.  A group within the pygeoapi community aims to facilitate semantic web access for spatial data engineers by introducing pygeoapi as a proxy  between the typical GIS clients and the semantic web.</p> <p>A new feature is being prepared which introduces a SPARQL provider to pygeoapi.  The provider enables to browse the results of a SPARQL query as an OGC API - Features collection.</p>"},{"location":"advanced/semantic-web-linked-data/#summary","title":"Summary","text":"<p>Congratulations! You can now configure pygeoapi configurations with linked data concepts.</p>"},{"location":"advanced/seo/","title":"Search Engine Optimization (SEO)","text":"<p>OGC API - Features adopted the Spatial Data on the Web Best Practice 2: Make your spatial data indexable by search engines with the recommendation to include HTML as an output format of any OGC API. It means that users can navigate an OGC API from within their browser and Search Engines are able to crawl the content.</p> <p>An aspect to consider is that, since the API becomes a webpage, common practices for web architecture and development become relevant:</p> <ul> <li>does the website have a clear navigation?</li> <li>is a company logo, branding, privacy statement, cookie warning included?</li> <li>is the webpage WCAG accessable?</li> </ul> <p>Tip</p> <p>Notice that the pygeoapi configuration also has an option to disable HTML output. In that scenario, only the JSON output is available.</p> <p>On the Web, websites are typically visited by web crawlers of popular search engines. Crawlers are automated processes which aid in building the index of the search engine. Crawlers follow links on the Web to identify new or updated content. Cross linking your API to other resources therefore increases the visibility (and ranking) of your API.</p> <p>The British Geo6 wrote an extensive best practice on SEO for data publishers which offers a good overview of SEO in the scope of data publications.</p>"},{"location":"advanced/seo/#tweaking-web-crawler-behaviour","title":"Tweaking Web Crawler behaviour","text":"<p>This paragraph introduces you to some mechanisms which facilitate or block web crawlers to index your content.</p> <p>If you are not interested in having your content indexed by search engines, you can provide a robots.txt file at the root of your website, specifying which folders should not be indexed. More drastically is the option to block access for crawlers or bots to your content by filtering traffic to the website based on the HTTP User-Agent header. Such a rule can be added to a firewall or web server configuration.</p> <p>A <code>robots.txt</code> file can also include a link to a Sitemap. Many search engines provide the option to submit a sitemap in order to speed up crawling and indexing. pygeoapi does not provide a sitemap of its content, but you can create your own sitemap (publish as <code>/sitemap.xml</code>), specifying URLs of your desired content to be indexed.</p> <p>Search engines provide tooling to evaluate the search behaviour of your website. These tools can provide valuable insight in the findability of your website and content (e.g. keywords used to locate your website).</p>"},{"location":"advanced/seo/#schemaorgdataset","title":"Schema.org/Dataset","text":"<p>Search engines cooperate in the Schema.org initiative. Schema.org enables you to annotate your website using the <code>schema.org</code> vocabulaire, in order for search engines to index the content in a structured manner. Google was the first to employ these annotations to provide a dedicated search engine for datasets. pygeoapi adds <code>schema.org/Dataset</code> annotations to collection pages, so collections are automagically included in Google's dataset search.</p> <p>Evaluate the schema.org annotations in collections</p> <p>Google provides a tool to evaluate <code>Schema.org</code> annotation in websites. Try evaluating a collection endpoint of pygeoapi in the tool. If you run pygeoapi locally (not accessible to google), you can copy the source of a page as HTML into the <code>&lt;code&gt;</code> tab, otherwise you can paste the URL of the page in the <code>URL</code> tab.</p> <p>Note</p> <p>A similar tool is made available by Yandex (note that registration is required).</p>"},{"location":"advanced/ui-custom-templates/","title":"UI customization and templating","text":"<p>pygeoapi adopted the Jinja2 templating mechanism to style HTML output. Each element visualized on the HTML output is customizable by overriding the relevant template. Templates are located in the <code>pygeoapi/templates</code> folder. It is possible to override any template by copying it into a separate folder and adjust it to your needs. In the pygeoapi configuration you can then indicate the path to the override folder. Notice that for files which are not placed in the override folder, the original file is used.</p> <p>Caution</p> <p>For any customization, mind that with a new version of pygeoapi changes on the default templates are not automatically available on the overriden files. Upgrades need to be carefully tested and validated.</p>"},{"location":"advanced/ui-custom-templates/#jinja2","title":"Jinja2","text":"<p>Jinja2 is a common templating concept in the Python community. With a minimal background in HTML you will be able to make minor but meaningful customizations. At the core of pygeoapi's template setup is the <code>_base.html</code> template, which defines the header and footer of the page. The fragment below defines the footer of the page, notice the parameters in curly braces, which are replaced by dynamic content. </p> <pre><code> &lt;footer class=\"sticky\"&gt;\n    {% trans %}Powered by {% endtrans %} \n    &lt;a title=\"pygeoapi\" href=\"https://pygeoapi.io\"&gt;\n        &lt;img src=\"{{ config['server']['url'] }}/assets/images/pygeoapi.png\" title=\"pygeoapi logo\" style=\"height:24px;vertical-align: middle;\"/&gt;&lt;/a&gt; \n    {{ version }}\n&lt;/footer&gt;\n</code></pre> <p>Customizing an HTML page</p> <p>Copy <code>_base.html</code> to a separate folder. Adjust some elements on that page (e.g. logo image). Then, include a reference to the new folder in the pygeoapi configuration. Restart the service. Verify the result.</p>"},{"location":"advanced/ui-custom-templates/#css-customizations","title":"CSS customizations","text":"<p>From the customized HTML template you can reference a new stylesheet file with customizations or directly add your customizations to /static/css/default.css.</p>"},{"location":"advanced/ui-custom-templates/#summary","title":"Summary","text":"<p>Congratulations! You've added a custom look and feel to your pygeoapi deployment.</p>"},{"location":"publishing/","title":"Publishing data, metadata and processes","text":"<p>Note</p> <p>Ensure that you have pygeoapi setup and can navigate the default configuration and service running at http://localhost:5000.</p> <p>In this section, you will learn how to publish different types of geospatial data, metadata and processes through the following exercises:</p> <ul> <li>Exercise 1 - Your first dataset</li> <li>Exercise 2 - Vector data via OGC API - Features</li> <li>Exercise 3 - Raster data via OGC API - Coverages</li> <li>Exercise 4 - Maps of geospatial data via OGC API - Maps</li> <li>Exercise 5 - Tiles of geospatial data via OGC API - Tiles</li> <li>Exercise 6 - Metadata via OGC API - Records</li> <li>Exercise 7 - Environmental data via OGC API - Environmental Data Retrieval</li> <li>Exercise 8 - Functions via OGC API - Processes</li> <li>Exercise 9 - pygeoapi as a bridge to other services</li> </ul>"},{"location":"publishing/first/","title":"Exercise 1 - Your first dataset","text":"<p>In this section you are going to publish a vector dataset.</p> <p>For this exercise, we will use a CSV dataset of Bathing waters in Estonia, kindly provided by Estonian Health Board.</p> <p>You can find this dataset in <code>workshop/exercises/data/tartu/bathingwater-estonia.csv</code>.</p> <p>This exercise consists of adjusting <code>workshop/exercises/pygeoapi.config.yml</code> to define this dataset as an OGC API - Features collection</p>"},{"location":"publishing/first/#verify-the-existing-docker-compose-config","title":"Verify the existing Docker Compose config","text":"<p>Before making any changes, we will make sure that the initial Docker Compose setup provided to you is actually working.</p> <p>To test:</p> <p>Test the workshop configuration</p> <ol> <li>In a terminal shell navigate to the workshop folder and type:</li> </ol> Linux/MacWindows (PowerShell) <p> <pre><code>cd workshop/exercises\ndocker compose up\n</code></pre> </p> <p> <pre><code>cd workshop/exercises\ndocker compose up\n</code></pre> </p> <ol> <li>Open http://localhost:5000 in your browser, verify some collections</li> <li>Close by typing <code>CTRL-C</code></li> </ol> <p>Note</p> <p>You may also run the Docker container in the background (detached) as follows:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker compose up -d\ndocker ps  # verify that the pygeoapi container is running\n# visit http://localhost:5000 in your browser, verify some collections\ndocker logs --follow pygeoapi  # view logs\ndocker compose down --remove-orphans\n</code></pre> </p> <p> <pre><code>docker compose up -d\ndocker ps  # verify that the pygeoapi container is running\n# visit http://localhost:5000 in your browser, verify some collections\ndocker logs --follow pygeoapi  # view logs\ndocker compose down --remove-orphans\n</code></pre> </p>"},{"location":"publishing/first/#publish-first-dataset","title":"Publish first dataset","text":"<p>You are now ready to publish your first dataset.</p> <p>Setting up the pygeoapi config file</p> <ol> <li>Open the file <code>workshop/exercises/pygeoapi/pygeoapi.config.yml</code> in your text editor</li> <li>Look for the commented config section starting with <code># START - EXERCISE 1 - Your First Collection</code></li> <li>Uncomment all lines until <code># END - EXERCISE 1 - Your First Collection</code></li> </ol> <p>Make sure that the indentation aligns (hint: directly under <code># START ...</code>)</p> <p>The config section reads:</p> <pre><code>    Bathing_Water_Estonia:\n        type: collection\n        title: Bathing Water Estonia\n        description: Locations where the Estonian Health Board monitors the bathing water quality\n        keywords:\n            - bathing water\n            - estonia\n        links:\n            - type: text/csv\n              rel: canonical\n              title: data\n              href: https://avaandmed.eesti.ee/datasets/supluskohad\n              hreflang: EE\n        extents:\n            spatial:\n                bbox: [20,57,29,60]\n                crs: http://www.opengis.net/def/crs/EPSG/0/4326\n        providers:\n            - type: feature\n              name: CSV\n              data: /data/tartu/bathingwater-estonia.csv\n              id_field: id\n              title_field: Name\n              geometry:\n                x_field: x\n                y_field: y\n              storage_crs: http://www.opengis.net/def/crs/EPSG/0/3300\n</code></pre> <p>The most relevant part is the <code>providers</code> section. Here, we define a <code>CSV Provider</code>, pointing the file path to the <code>/data</code> directory we will mount (see next) from the local directory into the Docker container above. Because a CSV is not a spatial file, we explicitly configure pygeoapi so that the longitude and latitude (x and y) is mapped from the columns <code>lon</code> and <code>lat</code> in the CSV file. Notice the <code>storage_crs</code> parameter, which indicates the coordinate system which is used in the source data.</p> <p>Tip</p> <p>To learn more about the pygeoapi configuration syntax and conventions see the relevant chapter in the documentation.</p> <p>Tip</p> <p>pygeoapi includes numerous data providers which enable access to a variety of data formats. Via the OGR/GDAL plugin the number of supported formats is almost limitless. Consult the data provider page how you can set up a connection to your dataset of choice. You can always copy a relevant example configuration and place it in the datasets section of the pygeoapi configuration file for your future project.</p>"},{"location":"publishing/first/#test","title":"Test","text":"<p>Start with updated configuration</p> <ol> <li>Start by typing <code>docker compose up</code> </li> <li>Observe logging output</li> <li>If no errors: open http://localhost:5000</li> <li>Look for the Point of interest collection</li> <li>Browse through the items of the collection</li> <li>Check the json representation by adding ?f=json to url (or click 'json' in top right)</li> </ol>"},{"location":"publishing/first/#debugging-configuration-errors","title":"Debugging configuration errors","text":"<p>Incidentally you may run into errors, briefly discussed here:</p> <ul> <li>A file cannot be found, a typo in the configuration</li> <li>The format or structure of the spatial file is not fully supported</li> <li>The port (5000) is already taken. Is a previous pygeoapi still running? If you change the port, consider that you also have to update the pygeoapi config file</li> </ul> <p>There are two parameters in the configuration file which help to address these issues.  Set the logging level to <code>DEBUG</code> and indicate a path to a log file. </p> <p>Tip</p> <p>On Docker, set the path of the logfile to the mounted folder, so you can easily access it from your host system. You can also view the console logs from your Docker container as follows:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker logs --follow pygeoapi\n</code></pre> </p> <p> <pre><code>docker logs --follow pygeoapi\n</code></pre> </p> <p>Tip</p> <p>Errors related to file paths typically happen on initial setup. However, they may also happen at unexpected moments, resulting in a broken service. Products such as GeoHealthCheck aim to monitor, detect and notify service health and availability. The OGC API - Features tests in GeoHealthCheck poll the availability of the service at intervals. Consult the GeoHealthCheck documentation for more information. </p>"},{"location":"publishing/ogcapi-coverages/","title":"Exercise 3 - Raster data via OGC API - Coverages","text":"<p>OGC API - Coverages provides a Web API to access raster data (grids, remote sensing data, multidimensional data cubes):</p> <ul> <li>OGC API - Coverages (draft)</li> </ul>"},{"location":"publishing/ogcapi-coverages/#pygeoapi-support","title":"pygeoapi support","text":"<p>pygeoapi supports the OGC API - Coverages draft specification, with rasterio and xarray as core backends as well as CoverageJSON and native output.</p> <p>Note</p> <p>See the official documentation for more information on supported raster backends</p>"},{"location":"publishing/ogcapi-coverages/#publish-a-raster-dataset","title":"Publish a raster dataset","text":"<p>In the previous exercises we have demonstrated the steps involved to publish vector data and update the pygeoapi configuration. In this section we are going to publish a raster file in GeoTIFF format, from a rasterio source provider.</p> <p>Update the pygeoapi configuration</p> <p>Open the pygeoapi configuration file in a text editor. Add a new dataset section as follows:</p> <pre><code>tartu-ntl:\n    type: collection\n    title: NASA Blue Marble Night Lights Data sample over Estonia\n    description: NASA Blue Marble Night Lights Data sample over Estonia\n    keywords:\n        - Blue Marble\n        - Night Lights\n        - NTL\n    links:\n        - type: text/html\n          rel: about\n          title: NASA Blue Marble Night Lights Data\n          href: https://appliedsciences.nasa.gov/get-involved/training/english/arset-introduction-nasas-black-marble-night-lights-data\n          hreflang: en\n    extents:\n        spatial:\n          bbox: [26.6264,58.32569,26.82632,58.433989]\n          crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: coverage\n          name: rasterio\n          data: /data/tartu/estonia_light.tif # place correct path here\n          format:\n              name: GTiff\n              mimetype: application/tiff\n</code></pre> <p>Tip</p> <p>The rasterio provider <code>format.name</code> directive requires a valid GDAL raster driver short name</p> <p>Save the configuration and restart Docker Compose. Navigate to http://localhost:5000/collections to evaluate whether the new dataset has been published.</p>"},{"location":"publishing/ogcapi-coverages/#client-access","title":"Client access","text":""},{"location":"publishing/ogcapi-coverages/#gdalogr","title":"GDAL/OGR","text":"<p>GDAL/OGR provides support for OGC API - Coverages. This means you can use <code>gdalinfo</code> to query and convert data from OGC API - Coverages endpoints just like any other raster data source.  This also means you can make connections to OGC API - Coverages endpoints from any software which has an interface to GDAL, such as MapServer, GeoServer, Manifold, FME, ArcGIS, etc.</p> <p>Use GDAL to interact with OGC API - Coverages</p> <ul> <li>Verify you have a recent GDAL installed, else use GDAL from OSGeoLive</li> <li>Run <code>gdalinfo</code> on the command line to verify a connection to OGC API - Coverages:</li> </ul> Linux/MacWindows (PowerShell) <p> <pre><code>gdalinfo OGCAPI:https://maps.ecere.com/ogcapi/collections/SRTM_ViewFinderPanorama\n</code></pre> </p> <p> <pre><code>gdalinfo OGCAPI:https://maps.ecere.com/ogcapi/collections/SRTM_ViewFinderPanorama\n</code></pre> </p>"},{"location":"publishing/ogcapi-coverages/#owslib","title":"OWSLib","text":"<p>OWSLib is a Python library to interact with OGC Web Services and supports a number of OGC APIs including OGC API - Coverages.</p> <p>Interact with OGC API - Coverages via OWSLib</p> <p>If you do not have Python installed, consider running this exercise in a Docker container. See the Setup Chapter. </p> Linux/MacWindows (PowerShell) <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p>Then start a Python console session with: <code>python3</code> (stop the session by typing <code>exit()</code>).</p> Linux/MacWindows (PowerShell) <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.coverages import Coverages\n&gt;&gt;&gt; SERVICE_URL = 'https://demo.pygeoapi.io/master/'\n&gt;&gt;&gt; w = Coverages(SERVICE_URL)\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master/'\n&gt;&gt;&gt; gdps = w.collection('gdps-temperature')\n&gt;&gt;&gt; gdps['id']\n'gdps-temperature'\n&gt;&gt;&gt; gdps['title']\n'Global Deterministic Prediction System sample'\n&gt;&gt;&gt; gdps['description']\n'Global Deterministic Prediction System sample'\n&gt;&gt;&gt; schema = w.collection_schema('gdps-temperature')\n&gt;&gt;&gt; len(schema['field'])\n1\n&gt;&gt;&gt; schema['properties']['1']['title']\n'Temperature [C]'\n&gt;&gt;&gt; schema['properties']['1']['x-ogc-unit']\n'[C]'\n&gt;&gt;&gt; schema['properties']['1']['type']\n'number'\n</code></pre> </p> <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.coverages import Coverages\n&gt;&gt;&gt; SERVICE_URL = 'https://demo.pygeoapi.io/master/'\n&gt;&gt;&gt; w = Coverages(SERVICE_URL)\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master/'\n&gt;&gt;&gt; gdps = w.collection('gdps-temperature')\n&gt;&gt;&gt; gdps['id']\n'gdps-temperature'\n&gt;&gt;&gt; gdps['title']\n'Global Deterministic Prediction System sample'\n&gt;&gt;&gt; gdps['description']\n'Global Deterministic Prediction System sample'\n&gt;&gt;&gt; schema = w.collection_schema('gdps-temperature')\n&gt;&gt;&gt; len(schema['field'])\n1\n&gt;&gt;&gt; schema['properties']['1']['title']\n'Temperature [C]'\n&gt;&gt;&gt; schema['properties']['1']['x-ogc-unit']\n'[C]'\n&gt;&gt;&gt; schema['properties']['1']['type']\n'number'\n</code></pre> </p> <p>Note</p> <p>See the official OWSLib documentation for more examples.</p>"},{"location":"publishing/ogcapi-coverages/#summary","title":"Summary","text":"<p>Congratulations! You are now able to publish raster data to pygeoapi.</p>"},{"location":"publishing/ogcapi-edr/","title":"Exercise 7 - Environmental data via OGC API - Environmental Data Retrieval","text":"<p>OGC API - Environmental Data Retrieval provides a Web API to access environmental data using well defined query patterns:</p> <ul> <li>OGC API - Environmental Data Retrieval Standard</li> </ul> <p>OGC API - Environmental Data Retrieval uses OGC API - Features as a building block, thus enabling streamlined integration for clients and users.  EDR can be considered a convenience API which does not require in depth knowledge about the underlying data store/model.</p>"},{"location":"publishing/ogcapi-edr/#pygeoapi-support","title":"pygeoapi support","text":"<p>pygeoapi supports the OGC API - Environmental Data Retrieval specification by leveraging both feature and coverage provider plugins.</p> <p>Note</p> <p>See the official documentation for more information on supported EDR backends</p>"},{"location":"publishing/ogcapi-edr/#publish-environmental-data-in-pygeoapi","title":"Publish environmental data in pygeoapi","text":"<p>Let's try publishing some ICOADS data via the EDR xarray plugin. The sample ICOADS data can be found in <code>workshop/exercises/data/coads_sst.nc</code>:</p> <p>Update the pygeoapi configuration</p> <p>Open the pygeoapi configuration file in a text editor. Add a new dataset section as follows:</p> <pre><code>    icoads-sst:\n        type: collection\n        title: International Comprehensive Ocean-Atmosphere Data Set (ICOADS)\n        description: International Comprehensive Ocean-Atmosphere Data Set (ICOADS)\n        keywords:\n            - icoads\n            - sst\n            - air temperature\n        extents:\n            spatial:\n                bbox: [-180,-90,180,90]\n                crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            temporal:\n                begin: 2000-01-16T06:00:00Z\n                end: 2000-12-16T06:00:00Z\n        links:\n            - type: text/html\n              rel: canonical\n              title: information\n              href: https://psl.noaa.gov/data/gridded/data.coads.1deg.html\n              hreflang: en-US\n        providers:\n            - type: edr\n              name: xarray-edr\n              data: /data/coads_sst.nc\n              format:\n                  name: NetCDF\n                  mimetype: application/x-netcdf\n</code></pre> <p>Save the configuration and restart Docker Compose. Navigate to http://localhost:5000/collections to evaluate whether the new dataset has been published.</p> <p>At first glance, the <code>icoads-sst</code> collection appears as a normal OGC API - Coverages collection. Look a bit closer at the collection description, and notice that there is a `parameter_names' key that describes EDR parameter names for the collection queries.</p>"},{"location":"publishing/ogcapi-edr/#owslib-advanced","title":"OWSLib - Advanced","text":"<p>OWSLib is a Python library to interact with OGC Web Services and supports a number of OGC APIs including OGC API - Environmental Data Retrieval.</p> <p>Interact with OGC API - Environmental Data Retrieval via OWSLib</p> <p>If you do not have Python installed, consider running this exercise in a Docker container. See the Setup Chapter.</p> Linux/MacWindows (PowerShell) <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p>Then start a Python console session with <code>python3</code> (stop the session by typing <code>exit()</code>).</p> Linux/MacWindows (PowerShell) <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.edr import  EnvironmentalDataRetrieval\n&gt;&gt;&gt; w = EnvironmentalDataRetrieval('https://demo.pygeoapi.io/master')\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master'\n&gt;&gt;&gt; api = w.api()  # OpenAPI document\n&gt;&gt;&gt; collections = w.collections()\n&gt;&gt;&gt; len(collections['collections'])\n13\n&gt;&gt;&gt; icoads_sst = w.collection('icoads-sst')\n&gt;&gt;&gt; icoads_sst['parameter-names'].keys()\ndict_keys(['SST', 'AIRT', 'UWND', 'VWND'])\n&gt;&gt;&gt; data = w.query_data('icoads_sst', 'position', coords='POINT(-75 45)', parameter_names=['SST', 'AIRT'])\n&gt;&gt;&gt; data  # CoverageJSON data\n</code></pre> </p> <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.edr import  EnvironmentalDataRetrieval\n&gt;&gt;&gt; w = EnvironmentalDataRetrieval('https://demo.pygeoapi.io/master')\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master'\n&gt;&gt;&gt; api = w.api()  # OpenAPI document\n&gt;&gt;&gt; collections = w.collections()\n&gt;&gt;&gt; len(collections['collections'])\n13\n&gt;&gt;&gt; icoads_sst = w.collection('icoads-sst')\n&gt;&gt;&gt; icoads_sst['parameter-names'].keys()\ndict_keys(['SST', 'AIRT', 'UWND', 'VWND'])\n&gt;&gt;&gt; data = w.query_data('icoads_sst', 'position', coords='POINT(-75 45)', parameter_names=['SST', 'AIRT'])\n&gt;&gt;&gt; data  # CoverageJSON data\n</code></pre> </p> <p>Note</p> <p>See the official OWSLib documentation for more examples.</p>"},{"location":"publishing/ogcapi-edr/#summary","title":"Summary","text":"<p>Congratulations!  You are now able to publish environmental data to pygeoapi.</p>"},{"location":"publishing/ogcapi-features/","title":"Exercise 2 - Vector data via OGC API - Features","text":"<p>OGC API - Features provides a Web API to access vector  data (geometries and their attributes). While the core specification covers basic data access and query, additional related standards and extensions are in development for the following capabilities:</p> <ul> <li>OGC API - Features - Part 1: Core provides basic access and query capabilities</li> <li>OGC API - Features - Part 2: Coordinate Reference Systems by Reference enables the import and export of any data according to dedicated projections</li> <li>OGC API - Features - Part 3: Filtering adds the ability for complex queries using Common Query Language (CQL2)</li> <li>OGC API - Features - Part 4: Create, Replace, Update and Delete (draft) adds transactional capabilities </li> </ul>"},{"location":"publishing/ogcapi-features/#pygeoapi-support","title":"pygeoapi support","text":"<p>pygeoapi supports all of the above OGC API - Features specification parts (Part 3 is dependent on backend support i.e. Elasticsearch).</p> <p>Note</p> <p>See the official documentation for more information on supported vector backends</p> <p>Note</p> <p>See the official documentation for more information on CQL support </p> <p>Next, we are going to explore how-to publish vector data using a <code>GeoPackage</code>.</p>"},{"location":"publishing/ogcapi-features/#publish-a-geopackage","title":"Publish a GeoPackage","text":"<p>In the previous section we demonstrated the steps involved to add a dataset to pygeoapi and update the configuration.  In this exercise we are going to publish another vector file, this time from a GeoPackage (SQLite3)  vector data source.</p> <p>Tip</p> <p>It may be helpful to open the dataset in QGIS while adding and updating your pygeoapi server to easily evaluate table attributes, names, spatial properties and CRS.</p> <p>Let's add the file <code>workshop/exercises/data/brazil/guama_river.gpkg.zip</code>:</p> <p>Update the pygeoapi configuration</p> <p>First, let's unzip the file guama_river.gpkg.zip to <code>guama_river.gpkg</code>.</p> <p>Then, open the pygeoapi configuration file in a text editor. Find the line <code># START - EXERCISE 2 - flowlines Guama River</code>.</p> <p>Add a new dataset section by uncommenting the lines up to <code># END - EXERCISE 2 - flowlines Guama River</code>:</p> <pre><code>guama-river:\n    type: collection\n    title: Guama River\n    description: Guama River Basin mainstem flowlines\n    keywords:\n        - Guama River\n        - Merit Hydro\n    links:\n        - type: text/html\n          rel: canonical\n          title: data\n          href: https://www.sciencebase.gov/catalog/item/614a8864d34e0df5fb97572d\n          hreflang: EE\n    extents:\n        spatial:\n            bbox: [-49.16, -5.0, -46.8, -1.2]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: feature\n          name: SQLiteGPKG\n          data: /data/brazil/guama_river.gpkg # place correct path here\n          id_field: fid\n          table: guama_river # table name within gpkg\n</code></pre> <p>Save the file and restart Docker Compose. Navigate to http://localhost:5000/collections to evaluate whether the new dataset with title \"Guama River\" has been published.</p> <p>Note</p> <p>The SQLite driver incidentally has challenges to open the GeoPackage extension on MacOS.  Consult the official documentation  or try with an alternative data format. If you use Docker this is not an issue.</p>"},{"location":"publishing/ogcapi-features/#optional-publish-a-geojson-file-using-elasticsearch","title":"OPTIONAL: Publish a GeoJSON file using Elasticsearch","text":"<p>This exercise is optional, if time permits, or you can perform this after workshop.</p> <p>Here we explore publishing OGC API - Features data using pygeoapi with an Elasticsearch backend provider.  For this we need the pygeoapi-examples GitHub repository:</p> Linux/MacWindows (PowerShell) <p> <pre><code>git clone https://github.com/geopython/pygeoapi-examples.git\n</code></pre> </p> <p> <pre><code>git clone https://github.com/geopython/pygeoapi-examples.git\n</code></pre> </p> <p>Alternatively, you can download the repo as a .zip file and unzip.</p> <p>Change into the <code>docker/elastic</code> folder and run the <code>docker-compose.yml</code> file:</p> Linux/MacWindows (PowerShell) <p> <pre><code>cd docker/elastic\ndocker compose up\n</code></pre> </p> <p> <pre><code>cd docker/elastic\ndocker compose up\n</code></pre> </p> <p>If you experience startup problems, consult the README file.  You may need to adapt your local host system's virtual memory setting.</p> <p>First we will load <code>greater_hyderabad_municipal_corporation_ward_Boundaries.geojson</code> into the Elasticsearch server. </p> <p>Edit the <code>add-data.sh</code> script within the <code>ES</code> folder, adding these two lines before the end:</p> <p><pre><code>curl -o /tmp/hyderabad.geojson https://raw.githubusercontent.com/geopython/diving-into-pygeoapi/refs/heads/main/workshop/exercises/data/hyderabad/greater_hyderabad_municipal_corporation_ward_Boundaries.geojson\npython3 /load_es_data.py /tmp/hyderabad.geojson objectid\n</code></pre> Through these changes the file <code>greater_hyderabad_municipal_corporation_ward_Boundaries.geojson</code> is downloaded inside the Elasticsearch Docker container and then loaded into Elasticsearch. </p> <p>After this we need to rebuild the Docker image:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker compose build\n</code></pre> </p> <p> <pre><code>docker compose build\n</code></pre> </p> <p>Next we need to configure pygeoapi by inserting the snippet below into the pygeoapi config file <code>pygeoapi/docker.config.yml</code>. This effectively enables publishing the file <code>greater_hyderabad_municipal_corporation_ward_boundaries.geojson</code> as OGC API - Features using the Elasticsearch backend provider.</p> <pre><code>    hyderabad:\n        type: collection\n        title: Greater Hyderabad Municipal Corporation ward boundaries\n        description: The city ward boundaries represent the administrative and electoral boundary areas of the city. It plays a great role in planning of the city, for each council of the municipal corporation.\n        keywords:\n           - Boundaries\n           - Administrative\n           - Ward\n        links:\n            - type: text/html\n              rel: canonical\n              title: information\n              href: https://livingatlas-dcdev.opendata.arcgis.com/datasets/a090c89d52f1498f96a82e97b8bfb83e_0/about\n              hreflang: en-US\n        extents:\n            spatial:\n                bbox: [78.2379194985166180,17.2908061510471995,78.6217049083810764,17.5618443356918768]\n                crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            temporal:\n                begin: 2011-11-11\n                end: null  # or empty\n        providers:\n            - type: feature\n              name: Elasticsearch\n              #Note elastic_search is the docker container of ES the name is defined in the docker-compose.yml\n              data: http://elastic_search:9200/hyderabad\n              id_field: objectid\n</code></pre> <p>On startup (e.g.: docker compose up -d) the pygeaoapi container will wait until the data has been ingested and the Elasticsearch index has been built.  You can check the logs using:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker compose logs --follow\n</code></pre> </p> <p> <pre><code>docker compose logs --follow\n</code></pre> </p> <p>After the server has started you can access the collection page here:</p> <p>http://localhost:5000/collections/hyderabad</p> <p>And the feature items here:</p> <p>http://localhost:5000/collections/hyderabad/items</p> <p></p>"},{"location":"publishing/ogcapi-features/#optional-pygeoapi-as-a-wfs-proxy","title":"OPTIONAL: pygeoapi as a WFS proxy","text":"<p>pygeoapi can also function as an OGC API - Features frontend service for an existing OGC WFS through  the built-in GDAL/OGR provider. This bridging-function effectively allows you to publish a WFS as OGC API - Features.</p> <p>This is expanded in an advanced section of this workshop: pygeoapi as a Bridge to other Services WFS-section. </p>"},{"location":"publishing/ogcapi-features/#client-access","title":"Client access","text":""},{"location":"publishing/ogcapi-features/#qgis","title":"QGIS","text":"<p>QGIS is one of the first GIS Desktop clients which added support for OGC API - Features. Support has been integrated into the existing WFS provider.</p> <p>Open an OGC API - Features collection in QGIS</p> <p>Follow the steps to add some collections from an OGC API - Features enpoint: </p> <ul> <li>Open QGIS (if you don't have QGIS, you can use OSGeoLive)</li> <li>From the Layer menu, select <code>Add Layer</code> &gt; <code>Add WFS layer</code></li> <li>From the <code>Data source manager</code> panel, choose 'New connection'</li> </ul> <p></p> <ul> <li>Add the URL https://demo.pygeoapi.io/master (or the address of a local server)</li> <li>You can now click the <code>detect</code> button and QGIS will notice you are configuring an OGC API - Features endpoint</li> <li>QGIS facilitates to set page size (request is split in multiple requests)<ul> <li>for points you can easily set it to 2500</li> <li>for some polygons with high density, 100 can already be slow</li> </ul> </li> <li>Press <code>OK</code> to save the connection and return to the previous screen</li> <li>Now click the <code>Connect</code> button to retireve the collections of the service</li> </ul> <p></p> <ul> <li>You can now add collections to your QGIS project</li> <li>You can also build a query to add a subset of the collection</li> <li>Close the <code>Data source manager</code>. Notice that QGIS applied a default styling just like it would if you add a file based layer. You can work with the collection in a similar way; identify, apply styling, filter, export, etc.</li> </ul> <p>Tip</p> <p>Activate the <code>Debugging/Development Tools Panel</code> (right click anywhere on the toolbar icons and select). It will display HTTP traffic within QGIS and is a valuable tool in debugging failing connections.</p> <p>Note</p> <p>An increasing number of GIS Desktop clients add support for OGC API's in subsequent releases. For example ArcGIS Pro supports OGC API - Features since release 2.8.</p>"},{"location":"publishing/ogcapi-features/#gdalogr-advanced","title":"GDAL/OGR - Advanced","text":"<p>GDAL/OGR provides support for OGC API - Features. This means you can use <code>ogrinfo</code>, <code>ogr2ogr</code> to query and convert data from OGC API - Features endpoints just like any other vector data source.  This also means you can make connections to OGC API - Features endpoints from any software which has an interface to GDAL, such as MapServer, GeoServer, Manifold, FME, ArcGIS, etc.</p> <p>Use OGR to interact with OGC API - Features</p> <ul> <li>Verify you have a recent GDAL installed, else use GDAL from OSGeoLive</li> <li>Run <code>ogrinfo</code> on the command line to verify a connection to OGC API - Features</li> </ul> Linux/Mac <p> <pre><code>ogrinfo OAPIF:https://demo.pygeoapi.io/master/collections/obs\n</code></pre> </p> Windows (PowerShell) <p> <pre><code>ogrinfo OAPIF:https://demo.pygeoapi.io/master/collections/obs\n</code></pre> </p> <p>Check summary information about the layer with:</p> Linux/MacWindows (PowerShell) <p> <pre><code>ogrinfo OAPIF:https://demo.pygeoapi.io/master/collections/obs obs -so\n</code></pre> </p> <p> <pre><code>ogrinfo OAPIF:https://demo.pygeoapi.io/master/collections/obs obs -so\n</code></pre> </p> <p>Now, let's convert the observations into a shapefile</p> Linux/MacWindows (PowerShell) <p> <pre><code>ogr2ogr -f \"ESRI Shapefile\" obs.shp OAPIF:https://demo.pygeoapi.io/master/collections/obs\n</code></pre> </p> <p> <pre><code>ogr2ogr -f \"ESRI Shapefile\" obs.shp OAPIF:https://demo.pygeoapi.io/master/collections/obs\n</code></pre> </p> <p>Note</p> <p>You can even use OGR to append new features to an OGC API - Features collection which supports transactions. Read more here about support for transactions in pygeoapi.</p> <p>Use GDAL from the commandline with Docker</p> <p>If you do not have GDAL installed, or want to use/try another version, you can always run the GDAL Docker image directly from the commandline. OSGeo provides GDAL Docker Images. The main thing to deal with is proper Docker Volume mapping to have GDAL tools  access local files. This can be very handy for quick data conversions. Most images also come with GDAL Python bindings.</p> <p>First you can pull a very small Docker Image:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker pull ghcr.io/osgeo/gdal:alpine-small-latest\n</code></pre> </p> <p> <pre><code>docker pull ghcr.io/osgeo/gdal:alpine-small-latest\n</code></pre> </p> <p>Then you can run for example OGR command line tools. Base command is <code>docker run -it --rm ghcr.io/osgeo/gdal:alpine-small-latest</code>. This runs the Docker container interactively (<code>-it</code>) and removes the container on exit (<code>--rm</code>).  Below are examples.</p> <p>Ask GDAL/OGR for available Vector formats:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -it --rm ghcr.io/osgeo/gdal:alpine-small-latest \\\n                    ogrinfo --formats\n</code></pre> </p> <p> <pre><code>docker run -it --rm ghcr.io/osgeo/gdal:alpine-small-latest ogrinfo --formats\n</code></pre> </p> <p>Get information from a geospatial file. Note the volume mapping: <code>-v $(pwd)/data:/work</code>  to access local files within the Docker container (commands are single-line, broken up for readability).</p> Linux/MacWindows (PowerShell) <p> <pre><code>cd git/workshop/exercises\ndocker run -v $(pwd)/data:/work -it --rm \\\n   ghcr.io/osgeo/gdal:alpine-small-latest \\\n   ogrinfo /work/tartu/bathingwater-estonia.geojson\n\nINFO: Open of `/work/tartu/bathingwater-estonia.geojson'\n      using driver `GeoJSON' successful.\n1: bathingwater-estonia (Point)\n</code></pre> </p> <p> <pre><code>cd git/workshop/exercises\ndocker run -v ${pwd}/data:/work -it --rm ghcr.io/osgeo/gdal:alpine-small-latest ogrinfo /work/tartu/bathingwater-estonia.geojson\n\nINFO: Open of `/work/tartu/bathingwater-estonia.geojson'\n      using driver `GeoJSON' successful.\n1: bathingwater-estonia (Point)\n</code></pre> </p> <p>Convert the GeoJSON file to a GeoPackage (GPKG) with <code>ogr2ogr</code>:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -v $(pwd)/data:/work -it --rm \\\n   ghcr.io/osgeo/gdal:alpine-small-latest \\\n   ogr2ogr -f \"GPKG\" /work/tartu/bathingwater-estonia.gpkg \\\n                     /work/tartu/bathingwater-estonia.geojson\n</code></pre> </p> <p> <code>bash docker run -v ${pwd}/data:/work -it --rm ghcr.io/osgeo/gdal:alpine-small-latest ogr2ogr -f \"GPKG\" /work/tartu/bathingwater-estonia.gpkg /work/tartu/bathingwater-estonia.geojson</code> </p> <p>You can also use <code>ogrinfo</code> retrieve information about an OGC API - Features collection.  In case you are accessing a local collection, you will need to make sure the container runs on the host network:</p> Linux/MacWindows <p> <pre><code>docker run \\\n--network=host \\\nghcr.io/osgeo/gdal:alpine-small-latest \\\nogrinfo OAPIF:http://localhost:5000/collections/obs obs -so\n</code></pre> </p> <p> <pre><code>docker run --network=host ghcr.io/osgeo/gdal:alpine-small-latest ogrinfo OAPIF:http://localhost:5000/collections/obs obs -so\n</code></pre> </p>"},{"location":"publishing/ogcapi-features/#owslib-advanced","title":"OWSLib - Advanced","text":"<p>OWSLib is a Python library to interact with OGC Web Services and supports a number of OGC APIs including OGC API - Features.</p> <p>This exercise will be done using a jupyter notebook. If you prefer, you can do it using Python from the command line (see bellow).</p> <p>Before continuing, make sure you are in the <code>workshop/exercises</code> folder. You will need that, to be able to use the jupyter notebook.</p> Linux/MacWindows (PowerShell) <p> <pre><code>pwd\n</code></pre> </p> <p> <pre><code>cd\n</code></pre> </p> <p>Then run a container to start a jupyter notebook, mounting the local folder:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -p 8888:8888 -v $(pwd):/home/jovyan/work jupyter/base-notebook\n</code></pre> </p> <p> <pre><code>docker run -p 8888:8888 -v ${pwd}:/home/jovyan/work jupyter/base-notebook\n</code></pre> </p> <p>Enter the url stated on the command line,  <code>http://127.0.0.1:8888/lab</code> followed by a token. Enter the <code>work</code> folder and open the <code>features-owslib.ipynb</code>.</p> <p></p> <p>Run through the notebook, to explore an OGC API - Features server, using owslib.</p> <p>Note</p> <p>You can run the same instructions using your local pygeoapi server, instead of the demo pygeoapi instance.</p>"},{"location":"publishing/ogcapi-features/#using-python-from-the-command-line","title":"Using Python from the command line","text":"<p>Interact with OGC API - Features via OWSLib</p> <p>If you do not have Python installed, consider running this exercise in a Docker container. See the Setup Chapter.</p> Linux/MacWindows (PowerShell) <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p>Then start a Python console session with <code>python3</code> (stop the session by typing <code>exit()</code>).</p> Linux/MacWindows (PowerShell) <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.features import Features\n&gt;&gt;&gt; w = Features('https://demo.pygeoapi.io/master')\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master'\n&gt;&gt;&gt; conformance = w.conformance()\n{u'conformsTo': [u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core', u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30', u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html', u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson']}\n&gt;&gt;&gt; api = w.api()  # OpenAPI document\n&gt;&gt;&gt; collections = w.collections()\n&gt;&gt;&gt; len(collections['collections'])\n13\n&gt;&gt;&gt; feature_collections = w.feature_collections()\n&gt;&gt;&gt; len(feature_collections)\n13\n&gt;&gt;&gt; lakes = w.collection('lakes')\n&gt;&gt;&gt; lakes['id']\n'lakes'\n&gt;&gt;&gt; lakes['title']\n'Large Lakes'\n&gt;&gt;&gt; lakes['description']\n'lakes of the world, public domain'\n&gt;&gt;&gt; lakes_queryables = w.collection_queryables('lakes')\n&gt;&gt;&gt; len(lakes_queryables['properties'])\n6\n&gt;&gt;&gt; lakes_query = w.collection_items('lakes')\n&gt;&gt;&gt; lakes_query['features'][0]['properties']\n{u'scalerank': 0, u'name_alt': None, u'admin': None, u'featureclass': u'Lake', u'id': 0, u'name': u'Lake Baikal'}\n</code></pre> </p> <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.features import Features\n&gt;&gt;&gt; w = Features('https://demo.pygeoapi.io/master')\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master'\n&gt;&gt;&gt; conformance = w.conformance()\n{u'conformsTo': [u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core', u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30', u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html', u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson']}\n&gt;&gt;&gt; api = w.api()  # OpenAPI document\n&gt;&gt;&gt; collections = w.collections()\n&gt;&gt;&gt; len(collections['collections'])\n13\n&gt;&gt;&gt; feature_collections = w.feature_collections()\n&gt;&gt;&gt; len(feature_collections)\n13\n&gt;&gt;&gt; lakes = w.collection('lakes')\n&gt;&gt;&gt; lakes['id']\n'lakes'\n&gt;&gt;&gt; lakes['title']\n'Large Lakes'\n&gt;&gt;&gt; lakes['description']\n'lakes of the world, public domain'\n&gt;&gt;&gt; lakes_queryables = w.collection_queryables('lakes')\n&gt;&gt;&gt; len(lakes_queryables['properties'])\n6\n&gt;&gt;&gt; lakes_query = w.collection_items('lakes')\n&gt;&gt;&gt; lakes_query['features'][0]['properties']\n{u'scalerank': 0, u'name_alt': None, u'admin': None, u'featureclass': u'Lake', u'id': 0, u'name': u'Lake Baikal'}\n</code></pre> </p> <p>Note</p> <p>See the official OWSLib documentation for more examples.</p>"},{"location":"publishing/ogcapi-features/#summary","title":"Summary","text":"<p>Congratulations! You are now able to publish vector data with pygeoapi.</p>"},{"location":"publishing/ogcapi-maps/","title":"Exercise 4 - Maps of geospatial data via OGC API - Maps","text":"<p>OGC API - Maps provides a Web API to access any geospatial data as a georeferenced map image.</p> <ul> <li>OGC API - Maps</li> </ul>"},{"location":"publishing/ogcapi-maps/#pygeoapi-support","title":"pygeoapi support","text":"<p>pygeoapi supports the OGC API - Maps specification, using MapServer MapScript and a WMS facade as core backends.</p> <p>Note</p> <p>See the official documentation for more information on supported map backends</p>"},{"location":"publishing/ogcapi-maps/#publish-a-raster-dataset","title":"Publish a raster dataset","text":"<p>In this section we'll be exposing a Geopackage file available at <code>workshop/exercises/data/airport.gpkg</code> location using MapServer MapScript. This data can be consumed with various clients which are compliant with OGC APIs - Maps. List of few such clients can be found here. Here we can also pass style in .sld format. Which can be generated on Geoserver, QGIS, etc. </p> <p>Interact with OGC API - Maps via MapScript</p> <p>Open the pygeoapi configuration file in a text editor. Find the line <code># START - EXERCISE 4 - Maps</code>.</p> <p>Uncomment section related to #airports.</p> <pre><code>airports:\n    type: collection\n    title: airports of the world\n    description: Point data representing airports around the world with various metadata such as name, Code, etc.\n    keywords:\n        - airports\n        - natural earth\n    links:\n        - type: text/html\n          rel: canonical\n          title: information\n          href: https://www.naturalearthdata.com/downloads/10m-cultural-vectors/airports/\n          hreflang: en-US\n    extents:\n        spatial:\n            bbox: [-180,-90,180,90]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n        temporal:\n            begin:\n            end: null  # or empty\n    providers:\n        - type: map\n          name: MapScript\n          data: /data/airport.gpkg\n          options:\n              type: MS_LAYER_POINT\n              layer: airport\n              style: /data/airport.sld\n          format:\n              name: png\n              mimetype: image/png\n</code></pre> <p>Note</p> <p>See the official documentation for more information on supported map backends</p>"},{"location":"publishing/ogcapi-maps/#pygeoapi-as-a-wms-proxy","title":"pygeoapi as a WMS proxy","text":"<p>You can check the \"pygeoapi as a Bridge to Other Services\" section to learn how to publish WMS as OGC API - Maps.</p>"},{"location":"publishing/ogcapi-maps/#client-access","title":"Client access","text":""},{"location":"publishing/ogcapi-maps/#qgis","title":"QGIS","text":"<p>QGIS added support for API's providing rendered image layers via its raster support. </p> <p>Add OGC API - Maps layer to QGIS</p> <ul> <li>Install a recent version of QGIS (&gt;3.28). </li> <li>Open the <code>Add raster layer panel</code>.</li> <li>Select <code>OGCAPI</code> for Source type.</li> <li>Add the local endpoint as source <code>http://localhost:5000/collections/airports</code>.</li> <li>Select <code>PNG</code> as image format.</li> <li>Finally add the layer to the map.</li> </ul>"},{"location":"publishing/ogcapi-maps/#owslib","title":"OWSLib","text":"<p>OWSLib is a Python library to interact with OGC Web Services and supports a number of OGC APIs including OGC API - Maps.</p> <p>Interact with OGC API - Maps via OWSLib</p> <p>If you do not have Python installed, consider running this exercise in a Docker container. See the Setup Chapter.</p> Linux/MacWindows (PowerShell) <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p>Now running in Python:</p> Linux/MacWindows (PowerShell) <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.maps import Maps\n&gt;&gt;&gt; m = Maps('http://localhost:5000')\n&gt;&gt;&gt; data = m.map('airports', width=1200, height=800, transparent=False)\n&gt;&gt;&gt; with open(\"output.png\", \"wb\") as fh:\n...     fh.write(data.getbuffer())\n</code></pre> </p> <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.maps import Maps\n&gt;&gt;&gt; m = Maps('http://localhost:5000')\n&gt;&gt;&gt; data = m.map('airports', width=1200, height=800, transparent=False)\n&gt;&gt;&gt; with open(\"output.png\", \"wb\") as fh:\n...     fh.write(data.getbuffer())\n</code></pre> </p> <p>Note</p> <p>See the official OWSLib documentation for more examples.</p>"},{"location":"publishing/ogcapi-maps/#summary","title":"Summary","text":"<p>Congratulations! You are now able to serve an OGC WMS via pygeoapi and OGC API - Maps.</p>"},{"location":"publishing/ogcapi-processes/","title":"Exercise 8 - Functions via OGC API - Processes","text":"<p>OGC API - Processes supports the wrapping of computational tasks into executable processes that can be offered by a server through a Web API and be invoked by a client application.</p> <ul> <li>OGC API - Processes: Part 1: Core</li> </ul> <p>OGC API - Processes uses OGC API - Common as a building block, thus enabling streamlined deployment and integration for clients and users.</p>"},{"location":"publishing/ogcapi-processes/#pygeoapi-support","title":"pygeoapi support","text":"<p>pygeoapi supports the OGC API - Processes specification, with the ability to publish Python code (no matter how simple or complex) as an OGC API Process definition.  pygeoapi also support synchronous or asynchronous processing, with the ability to store and retrive the status/results of 'jobs'.</p> <p>Note</p> <p>See the official documentation for more information on publishing processes in pygeoapi</p>"},{"location":"publishing/ogcapi-processes/#publishing-python-code-as-a-process-in-pygeoapi","title":"Publishing Python code as a process in pygeoapi","text":"<p>With pygeoapi we can setup OGC API - Processes using Python code that implements the pygeoapi <code>BaseProcessor</code>, which is a core pygeoapi abstract base class.  In this exercise we will implemented a \"squared\" function as a process using the sample Python code in <code>workshop/exercises/plugins/process/squared.py</code>.  The process is already defined to be part of the pygeoapi environment and configuration.</p> <p>Update the pygeoapi configuration</p> <p>Open the pygeoapi configuration file in a text editor. Add a new process section as follows:</p> <pre><code>    squared:\n        type: process\n        processor:\n            name: pygeoapi.process.squared.SquaredProcessor\n</code></pre> <p>Update Python code</p> <p>Open the Python code at <code>workshop/exercises/plugins/process/squared.py</code>.  Find the <code>execute</code> function and update the Python code to calculate the input value squared.</p> <p>Save the configuration and restart Docker Compose. Navigate to http://localhost:5000/processes to evaluate whether the new process has been published.  Inspect the detailed process metadata by navigating to http://localhost:5000/processes/squared to inspect how the process metadata defined in the Python code/file is made available in JSON..</p>"},{"location":"publishing/ogcapi-processes/#client-access","title":"Client access","text":""},{"location":"publishing/ogcapi-processes/#swagger","title":"Swagger","text":"<p>The easiest way to test the new process is by using pygeoapi's built in Swagger interface.  Navigate to http://localhost:5000/openapi and try out the process in the Swagger UI.</p> <p></p> <p></p> <p></p>"},{"location":"publishing/ogcapi-processes/#summary","title":"Summary","text":"<p>Congratulations!  You are now able to publish Python code as a process to pygeoapi.</p>"},{"location":"publishing/ogcapi-records/","title":"Exercise 6 - Metadata via OGC API - Records","text":"<p>OGC API - Records provides a Web API with the capability to create, modify, and query metadata on the Web:</p> <ul> <li>Read the OGC API - Records: Part 1: Core specification at the OGC website.</li> </ul> <p>OGC API - Records uses OGC API - Features as a building block, thus enabling streamlined deployment and integration for clients and users.</p>"},{"location":"publishing/ogcapi-records/#pygeoapi-support","title":"pygeoapi support","text":"<p>pygeoapi supports the OGC API - Records specification, using Elasticsearch and TinyDB rasterio as core backends.</p> <p>Note</p> <p>See the official documentation for more information on supported catalogue/metadata backends</p>"},{"location":"publishing/ogcapi-records/#publish-metadata-records-in-pygeoapi","title":"Publish metadata records in pygeoapi","text":"<p>With pygeoapi we can setup OGC API - Records using any supported data provider. In this exercise we will use the TinyDB Catalogue backend. We will use the sample catalogue in <code>workshop/exercises/data/tartu/metadata/catalogue.tinydb</code>.</p> <p>Update the pygeoapi configuration</p> <p>Open the pygeoapi configuration file in a text editor. Add a new dataset section as follows:</p> <pre><code>    example_catalogue:\n        type: collection\n        title: FOSS4G Europe Estonia national catalogue\n        description: FOSS4G Europe Estonia national catalogue\n        keywords:\n            - estonia\n            - catalogue\n            - FOSS4G Europe\n        links:\n            - type: text/html\n              rel: canonical\n              title: information\n              href: https://metadata.geoportaal.ee\n              hreflang: en-US\n        extents:\n            spatial:\n                bbox: [23.3397953631, 57.4745283067, 28.1316992531, 59.6110903998]\n                crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n        providers:\n            - type: record\n              name: TinyDBCatalogue\n              data: /data/tartu/metadata/catalogue.tinydb\n              id_field: externalId\n              time_field: recordCreated\n              title_field: title\n</code></pre> <p>Save the configuration and restart Docker Compose. Navigate to http://localhost:5000/collections to evaluate whether the new dataset has been published.</p>"},{"location":"publishing/ogcapi-records/#metadata-formats","title":"Metadata formats","text":"<p>By default, pygeoapi supports and expects the OGC API - Records core record model and queryables. For additional metadata formats, you can develop your own custom pygeoapi plugin, or convert your metadata to OGC API - Records core record model before adding to pygeoapi.</p> <p>Install OWSLib</p> <p>If you do not have Python installed, consider running this exercise in a Docker container. See the Setup Chapter.</p> Linux/MacWindows (PowerShell) <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p> <pre><code>pip3 install owslib\n</code></pre> </p>"},{"location":"publishing/ogcapi-records/#sample-iso-19139-to-tinydbcatalogue-loader","title":"Sample ISO 19139 to TinyDBCatalogue loader","text":"<p>It is possible to load more example ISO19139 metadata in a TinyDB database with the following script (raw):</p> Linux/MacWindows (PowerShell) <p> <pre><code>cd workshop/exercises/data/tartu/metadata\ncurl -O https://raw.githubusercontent.com/geopython/pygeoapi/master/tests/load_tinydb_records.py\npython3 load_tinydb_records.py xml catalogue.tinydb\n</code></pre> </p> <p> <pre><code>cd workshop/exercises/data/tartu/metadata\ncurl https://raw.githubusercontent.com/geopython/pygeoapi/master/tests/load_tinydb_records.py\npython3 load_tinydb_records.py xml catalogue.tinydb\n</code></pre> </p> <p>If you do not have curl installed, copy the URL above to your web browser and save locally.</p> <p>If you do not have Python installed, you can the loader by using the OWSLib Docker container. See the Setup Chapter.</p> <p>Using the OWSLib Docker container to load metadata</p> Linux/MacWindows (PowerShell) <p> <pre><code>cd workshop/exercises\ndocker run -it --rm --network=host --name owslib -v $(pwd)/data:/data python:3.10-slim /bin/bash\npip3 install owslib\napt-get update -y &amp;&amp; apt-get install curl -y\ncurl -O https://raw.githubusercontent.com/geopython/pygeoapi/master/tests/load_tinydb_records.py\npython3 load_tinydb_records.py /data/tartu/metadata/xml /data/tartu/metadata/catalogue.tinydb\n</code></pre> </p> <p> <pre><code>cd workshop/exercises\ndocker run -it --rm --network=host --name owslib -v ${pwd}/data:/data python:3.10-slim /bin/bash\npip3 install owslib\napt-get update -y &amp;&amp; apt-get install curl -y\ncurl -O https://raw.githubusercontent.com/geopython/pygeoapi/master/tests/load_tinydb_records.py\npython3 load_tinydb_records.py /data/tartu/metadata/xml /data/tartu/metadata/catalogue.tinydb\n</code></pre> </p> <p>Navigate to http://localhost:5000/collections/example_catalogue to evaluate whether the new metadata has been published to the collection.</p> <p>Tip</p> <p>pygeometa is a Python package to generate metadata for geospatial datasets.  pygeometa allows for managing metadata in simple YAML \"metadata control files (MCF), and supports import, export as well as transformations for many geospatial metadata formats.  OGC API - Records metadata can be produced using pygeometa, either from MCF files or transforming from other formats.</p> <p>Install and run pygeometa per below to get an idea of the various commands and functionality (as well, consult the tutorial).</p> Linux/MacWindows (PowerShell) <p> <pre><code>pip3 install pygeometa\npygeometa --help\n</code></pre> </p> <p> <pre><code>pip3 install pygeometa\npygeometa --help\n</code></pre> </p>"},{"location":"publishing/ogcapi-records/#pygeoapi-as-a-csw-proxy","title":"pygeoapi as a CSW proxy","text":"<p>You can check the \"pygeoapi as a Bridge to Other Services\" section to learn how to publish CSW as OGC API - Records.</p>"},{"location":"publishing/ogcapi-records/#client-access","title":"Client access","text":""},{"location":"publishing/ogcapi-records/#qgis","title":"QGIS","text":"<p>QGIS supports OGC API - Records via the MetaSearch plugin. MetaSearch originally focused on Catalogue Service for the Web (OGC:CSW) only, but has been extended to OGC API - Records. MetaSearch is a default plugin in QGIS and requires no further installation.</p> <p>Query OGC API - Records from QGIS</p> <p>Follow these steps to connect to a service and query datasets:</p> <ul> <li>Locate the MetaSearch plugin in the Web menu or on the Toolbar . The main search panel will appear with the default MetaSearch catalogue list already populated.</li> </ul> <p></p> <ul> <li>open the <code>Services</code> tab, to find the <code>New</code> button to create a new connection</li> <li>add a connection to <code>https://demo.pygeoapi.io/master</code></li> <li>click <code>Service Info</code> to get information about the service</li> <li>return to the Search tab</li> <li>select the connection you have just created</li> <li>type a search term and click <code>search</code></li> <li>notice that when you select a search result, a red footprint is drawn on the map highlighting the location of the dataset</li> </ul> <p></p> <p>OWSLib is a Python library to interact with OGC Web Services and supports a number of OGC APIs including OGC API - Records.</p> <p>Interact with OGC API - Records via OWSLib</p> <p>If you do not have Python installed, consider running this exercise in a Docker container. See the Setup Chapter.</p> Linux/MacWindows (PowerShell) <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p>Then start a Python console session with <code>python3</code> (stop the session by typing <code>exit()</code>).</p> Linux/MacWindows (PowerShell) <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.records import Records\n&gt;&gt;&gt; SERVICE_URL = 'https://demo.pygeoapi.io/master/'\n&gt;&gt;&gt; w = Records(SERVICE_URL)\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master'\n&gt;&gt;&gt; dutch_metacat = w.collection('dutch-metadata')\n&gt;&gt;&gt; dutch_metacat['id']\n'dutch-metadata'\n&gt;&gt;&gt; dutch_metacat['title']\n'Sample metadata records from Dutch Nationaal georegister'\n&gt;&gt;&gt; dutch_metacat['description']\n'Sample metadata records from Dutch Nationaal georegister'\n&gt;&gt;&gt; dutch_metacat_query = w.collection_items('dutch-metadata', limit=1)\n&gt;&gt;&gt; dutch_metacat_query['numberMatched']\n198\n&gt;&gt;&gt; dutch_metacat_query['numberReturned']\n1\n&gt;&gt;&gt; dutch_metacat_query = w.collection_items('dutch-metadata', q='Wegpanorama')\n&gt;&gt;&gt; dutch_metacat_query['numberMatched']\n2\n</code></pre> </p> <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.records import Records\n&gt;&gt;&gt; SERVICE_URL = 'https://demo.pygeoapi.io/master/'\n&gt;&gt;&gt; w = Records(SERVICE_URL)\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master'\n&gt;&gt;&gt; dutch_metacat = w.collection('dutch-metadata')\n&gt;&gt;&gt; dutch_metacat['id']\n'dutch-metadata'\n&gt;&gt;&gt; dutch_metacat['title']\n'Sample metadata records from Dutch Nationaal georegister'\n&gt;&gt;&gt; dutch_metacat['description']\n'Sample metadata records from Dutch Nationaal georegister'\n&gt;&gt;&gt; dutch_metacat_query = w.collection_items('dutch-metadata', limit=1)\n&gt;&gt;&gt; dutch_metacat_query['numberMatched']\n198\n&gt;&gt;&gt; dutch_metacat_query['numberReturned']\n1\n&gt;&gt;&gt; dutch_metacat_query = w.collection_items('dutch-metadata', q='Wegpanorama')\n&gt;&gt;&gt; dutch_metacat_query['numberMatched']\n2\n</code></pre> </p> <p>Note</p> <p>See the official OWSLib documentation for more examples.</p>"},{"location":"publishing/ogcapi-records/#summary","title":"Summary","text":"<p>Congratulations!  You are now able to publish metadata to pygeoapi.</p>"},{"location":"publishing/ogcapi-tiles/","title":"Exercise 5 - Tiles of geospatial data via OGC API - Tiles","text":"<p>OGC API - Tiles provides a Web API to deliver tiles of geospatial information. Different forms of geospatial information are supported, such as tiles of vector features (\"vector tiles\"), coverages, maps (or imagery) and potentially eventually additional types of tiles of geospatial information. The standard is available on this document:</p> <ul> <li>OGC API - Tiles: Part 1: Core</li> </ul> <p>Note</p> <p>OGC API - Tiles extends the <code>collections/*</code> URL structure (tilesets are listed under <code>/collections/example/tiles</code>:</p> <pre><code>https://demo.pygeoapi.io/collections/lakes/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}?f=mvt\n</code></pre>"},{"location":"publishing/ogcapi-tiles/#pygeoapi-support","title":"pygeoapi support","text":"<p>pygeoapi supports the core OGC API - Tiles specification, and is able to advertise an existing tileset. Note that pygeoapi itself does not render tiles from source data, but it supports publishing tiles from different backend providers. </p> <p>Note</p> <p>The OGC API - Tiles URL structure is compatible with XYZ layers in common libraries such as OpenLayers, Leaflet and MapML</p> <p>Note</p> <p>See the official documentation for more information on supported tile backends</p> <p>Note</p> <p>pygeoapi currently supports two well known Tile Matrix Sets: <code>WorldCRS84Quad</code> and <code>WebMercatorQuad</code>. Their definition is published on the /TileMatrixSets end point.  </p>"},{"location":"publishing/ogcapi-tiles/#publish-pre-rendered-vector-tiles","title":"Publish pre-rendered vector tiles","text":"<p>In this scenario, tiles must be pre-rendered before serving. The <code>MVT-tippecanoe</code> provider enables serving tiles pre-rendered by tippecanoe, either from a path on disk or from a static server (e.g.: S3 or MinIO bucket).</p> <p>For this exercise, you will publish a vector dataset of the greater Hyderabad municipal corporation ward boundaries, from the location below:</p> <ul> <li>data: <code>workshop/exercises/data/hyderabad/greater_hyderabad_municipal_corporation_ward_Boundaries.geojson</code></li> </ul> <p>Let's generate the tiles as the first step using tippecanoe:</p> <p>Using tippecanoe to generate vector tiles</p> Linux/MacWindows (PowerShell) <p> <pre><code>cd workshop/exercises\ndocker run -it --rm -v $(pwd)/data:/data emotionalcities/tippecanoe \\\ntippecanoe -r1 -pk -pf --output-to-directory=/data/tiles/ --force --maximum-zoom=16 \\\n--extend-zooms-if-still-dropping --no-tile-compression /data/hyderabad/greater_hyderabad_municipal_corporation_ward_Boundaries.geojson\n</code></pre> </p> <p> <pre><code>cd workshop/exercises\ndocker run -it --rm -v ${pwd}/data:/data emotionalcities/tippecanoe tippecanoe -r1 -pk -pf --output-to-directory=/data/tiles/ --force --maximum-zoom=16 --extend-zooms-if-still-dropping --no-tile-compression /data/hyderabad/greater_hyderabad_municipal_corporation_ward_Boundaries.geojson\n</code></pre> </p> <p>Note</p> <p>Please note that the tippecanoe tool requires the input file to be in WGS84, and it always outputs tiles in WebMercator.</p> <p>Update the pygeoapi configuration</p> <p>Open the pygeoapi configuration in a text editor. Add a new dataset section as follows:</p> <pre><code>    hyderabad:\n        type: collection\n        title: Greater Hyderabad Municipal Corporation ward boundaries\n        description: The city ward boundaries represent the administrative and electoral boundary areas of the city. It plays a great role in planning of the city, for each council of the municipal corporation.\n        keywords:\n           - Boundaries\n           - Administrative\n           - Ward\n        links:\n            - type: text/html\n              rel: canonical\n              title: information\n              href: https://livingatlas-dcdev.opendata.arcgis.com/datasets/a090c89d52f1498f96a82e97b8bfb83e_0/about\n              hreflang: en-US\n        extents:\n            spatial:\n                bbox: [78.2379194985166180,17.2908061510471995,78.6217049083810764,17.5618443356918768]\n                crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            temporal:\n                begin: 2011-11-11\n                end: null  # or empty\n        providers:\n            - type: feature\n              name: GeoJSON\n              data: /data/hyderabad/greater_hyderabad_municipal_corporation_ward_Boundaries.geojson\n              id_field: objectid\n            - type: tile\n              name: MVT-tippecanoe\n              data: /data/tiles/  # local directory tree\n              options:\n                zoom:\n                    min: 0\n                    max: 16\n              format:\n                    name: pbf\n                    mimetype: application/vnd.mapbox-vector-tile\n</code></pre> <p>Save the file and restart Docker Compose. Navigate to http://localhost:5000/collections to evaluate whether the new dataset has been published.</p> <p>Additional check for the following tile specific endpoints in the <code>hyderabad</code> collection:</p> <ul> <li>tile links in http://localhost:5000/collections/hyderabad/tiles</li> <li>tile metadata in http://localhost:5000/collections/hyderabad/tiles/WebMercatorQuad/metadata</li> </ul> <p></p>"},{"location":"publishing/ogcapi-tiles/#publish-vector-tiles-from-elasticsearch","title":"Publish vector tiles from Elasticsearch","text":"<p>Elasticsearch provides a middleware that renders an index on the fly, as vector tiles. This middleware is also supported by the pygeoapi mvt backend.</p> <p>If you want to explore publishing vector tiles using Elasticsearch clone pygeoapi-examples repository:</p> Linux/MacWindows (PowerShell) <p> <pre><code>git clone https://github.com/geopython/pygeoapi-examples.git\n</code></pre> </p> <p> <pre><code>git clone https://github.com/geopython/pygeoapi-examples.git\n</code></pre> </p> <p>Then change into the <code>docker/mvt-elastic</code> folder:</p> Linux/MacWindows (PowerShell) <p> <pre><code>cd docker/mvt-elastic\n</code></pre> </p> <p> <pre><code>cd docker/mvt-elastic\n</code></pre> </p> <p>Edit the <code>add-data.sh</code> script on the <code>ES</code> folder, adding these two lines before the end:</p> <pre><code>    curl -o /tmp/hyderabad.geojson https://raw.githubusercontent.com/geopython/diving-into-pygeoapi/refs/heads/main/workshop/exercises/data/hyderabad/greater_hyderabad_municipal_corporation_ward_Boundaries.geojson\n    python3 /load_es_data.py /tmp/hyderabad.geojson objectid\n</code></pre> <p>Above we are downloading the <code>greater_hyderabad_municipal_corporation_ward_Boundaries.geojson</code> inside the container, and ingesting it into an Elasticsearch index. After this we need to build the docker image:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker compose build\n</code></pre> </p> <p> <pre><code>docker compose build\n</code></pre> </p> <p>Edit the <code>docker.config.yml</code> configuration on the <code>pygeoapi</code> folder, adding this code block before the end:</p> <pre><code>    hyderabad:\n        type: collection\n        title: Greater Hyderabad Municipal Corporation ward boundaries\n        description: The city ward boundaries represent the administrative and electoral boundary areas of the city. It plays a great role in planning of the city, for each council of the municipal corporation.\n        keywords:\n           - Boundaries\n           - Administrative\n           - Ward\n        links:\n            - type: text/html\n              rel: canonical\n              title: information\n              href: https://livingatlas-dcdev.opendata.arcgis.com/datasets/a090c89d52f1498f96a82e97b8bfb83e_0/about\n              hreflang: en-US\n        extents:\n            spatial:\n                bbox: [78.2379194985166180,17.2908061510471995,78.6217049083810764,17.5618443356918768]\n                crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            temporal:\n                begin: 2011-11-11\n                end: null  # or empty\n        providers:\n            - type: feature\n              name: Elasticsearch\n              #Note elastic_search is the docker container of ES the name is defined in the docker-compose.yml\n              data: http://elastic_search:9200/hyderabad\n              id_field: objectid\n            - type: tile\n              name: MVT-elastic\n              data: http://elastic_search:9200/hyderabad/_mvt/geometry/{z}/{x}/{y}?grid_precision=0\n              # index must have a geo_point\n              options:\n                zoom:\n                    min: 0\n                    max: 29\n              format:\n                    name: pbf\n                    mimetype: application/vnd.mapbox-vector-tile\n</code></pre> <p>This configuration enables publishing <code>greater_hyderabad_municipal_corporation_ward_Boundaries.geojson</code> as both, OGC API - Features and OGC API - Tiles.</p> <p>Note</p> <p>The elastic Vector tile search API supports zoom levels 0-29</p> <p>Finally start the docker composition, which will download and ingest the dataset and publish it in pygeoapi:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker compose up\n</code></pre> </p> <p> <pre><code>docker compose up\n</code></pre> </p> <p>Note</p> <p>You can check your elastic index at: http://localhost:9200/_cat/indices</p> <p>If you are in production, you may want to close the elastic ports on docker-compose.</p>"},{"location":"publishing/ogcapi-tiles/#client-access","title":"Client access","text":""},{"location":"publishing/ogcapi-tiles/#qgis","title":"QGIS","text":"<p>QGIS supports OGC API Vector Tiles via the Vector Tiles Layer. Although OGC API - Tiles are not natively supported, you can customize the <code>generic connection</code> in order to access them in QGIS.</p> <p>Access OGC API Vector Tiles from QGIS</p> <p>Before entering QGIS, access your pygeoapi installation page on the browser and follow these steps.</p> <ul> <li>access the collection page of the tiles dataset: http://localhost:5000/collections/hyderabad</li> <li>navigate to the tiles page by clicking on <code>tiles</code>: http://localhost:5000/collections/hyderabad/tiles</li> <li>click in <code>Tiles metadata</code>: http://localhost:5000/collections/hyderabad/tiles/WebMercatorQuad/metadata</li> <li>note the URL template: <code>http://localhost:5000/collections/hyderabad/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}?f=mvt</code> and of the values of minZoom and maxZoom</li> </ul> <p>Follow these steps to connect to a service and access vector tiles:</p> <ul> <li> <p>locate the vector tiles service on the left hand side browser panel. Note that you can also use the top menu and navigate to <code>Layer &gt; Add Layer &gt; Vector Tile Layer</code></p> </li> <li> <p>right-click to bring up the context menu and choose <code>New Generic connection</code></p> </li> <li>fill the required values. For URL, use the URL you noted from the previous step, replacing <code>{tileMatrix}/{tileRow}/{tileCol}</code> with <code>{z}/{y}/{x}</code>.</li> </ul> <p></p> <ul> <li>press <code>OK</code> to add the service. At this point, if you should see the connection appear it. Click <code>Add</code> to add it to the map</li> <li>Zoom in to Hyderabad to visualize your dataset</li> </ul> <p></p> <p></p>"},{"location":"publishing/ogcapi-tiles/#leafletjs","title":"LeafletJS","text":"<p>LeafletJS is a popular JavaScript library to add interactive maps to websites. LeafletJS does not support OGC API's explicitly, however can interact with OGC API by using the results of the API directly.</p> <p>Add OGC API - Tiles to a website with LeafletJS</p> <ul> <li>copy the HTML below to a file called <code>vector-tiles.html</code>, or locate this file in <code>workshop/exercises/html</code></li> <li>open the file in a web browser</li> </ul> <p>The code uses the LeafletJS library with the leaflet.vectorgrid plugin to display the lakes OGC API - Tiles service on top of a base layer.</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;OGC API - Tiles exercise&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\" style=\"width:100vw;height:100vh;\"&gt;&lt;/div&gt;\n&lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.0.3/dist/leaflet.css\" /&gt;\n&lt;script type=\"text/javascript\" src=\"https://unpkg.com/leaflet@1.3.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"https://unpkg.com/leaflet.vectorgrid@1.3.0/dist/Leaflet.VectorGrid.bundled.js\"&gt;&lt;/script&gt;\n&lt;script&gt;    \nmap = L.map('map').setView({ lat: 17.425181, lng: 78.5493906 }, 11);\nmap.addLayer(\n    new L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}', {\n    attribution: 'Tiles &amp;copy; Esri &amp;mdash; National Geographic, Esri, DeLorme, NAVTEQ, UNEP-WCMC, USGS, NASA, ESA, METI, NRCAN, GEBCO, NOAA, iPC',\n    minZoom: 1,\n    maxZoom: 16,\n    }));\n function getColor(val){\n    if (val &lt; 40) {return \"#f2e6c7\"}\n    else if (val &lt; 80) {return \"#8fa37e\"}\n    else if (val &lt; 100) {return \"#f0d17d\"}\n    else if (val &lt; 120) {return  \"#d7ded1\"}\n    else return \"#c2d0d9\";\n }\n var vectorTileStyling = {\n    greater_hyderabad_municipal_corporation_ward_Boundaries: function(properties) {\n        return ({\n            fill: true,\n            fillColor: getColor(properties.objectid),\n            color: \"#ffffff\",\n            fillOpacity: 1.0,\n            weight: 5,\n            //color: \"#ffffff\",\n            opacity: 1.0,\n        });\n    }\n} \n    var mapVectorTileOptions = {\n        rendererFactory: L.canvas.tile,\n        interactive: true,\n        vectorTileLayerStyles: vectorTileStyling,\n        };\n    var pbfURL='http://localhost:5000/collections/hyderabad/tiles/WorldCRS84Quad/{z}/{y}/{x}?f=mvt';\n    var pbfLayer=L.vectorGrid.protobuf(pbfURL,mapVectorTileOptions).on('click',function(e) {\n        console.log(e.layer);\n    L.DomEvent.stop(e);\n    }).addTo(map); \n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In this example, the colors of the symbols reflect the value of the <code>objectid</code> attribute.</p> <p></p> <p>Note</p> <p>You can check the layer attributes, by opening the console in the developer tools. </p> <p>Tip</p> <p>Try adding a different pygeoapi vector tiles layer by updating the code in <code>workshop/exercises/html/vector-tiles.html</code>.</p> <p>If you want to render the tiles from the Elasticsearch example, you can check out the code from this repository:</p> Linux/MacWindows (PowerShell) <p> <pre><code>git clone -b ogcapi-ws https://github.com/emotional-cities/vtiles-example.git\n</code></pre> </p> <p> <pre><code>git clone -b ogcapi-ws https://github.com/emotional-cities/vtiles-example.git\n</code></pre> </p> <p></p> <p>Tip</p> <p>See the official LeafletJS documentation</p>"},{"location":"publishing/ogcapi-tiles/#openlayers","title":"OpenLayers","text":"<p>OpenLayers is a popular JavaScript library to add interactive maps to websites. OpenLayers natively supports OGC API - Tiles (map and vector). You can check the code for the example bellow on: https://ogcincubator.github.io/ogcapi-tiles-demo/</p> <p> </p> <p>Tip</p> <p>See the official OpenLayers documentation</p>"},{"location":"publishing/ogcapi-tiles/#summary","title":"Summary","text":"<p>Congratulations! You are now able to publish tiles to pygeoapi. You can learn more about this standard on: https://tiles.developer.ogc.org/</p>"},{"location":"pt/","title":"Bem-vind@s \u00e0 workshop Mergulhando na pygeoapi!","text":"<p>Vers\u00e3o: 1.6.0</p> <p></p> <p>A pygeoapi \u00e9 uma implementa\u00e7\u00e3o em Python de um servidor da su\u00edte de standards OGC API. O projeto surgiu como parte dos esfor\u00e7os da pr\u00f3xima gera\u00e7\u00e3o da OGC API em 2018 e oferece a capacidade de as organiza\u00e7\u00f5es implementarem um ponto de acesso (endpoint) RESTful OGC API usando OpenAPI, GeoJSON e HTML. A pygeoapi \u00e9 de c\u00f3digo aberto e disponibilizada sob a licen\u00e7a MIT.</p> <p>A Mergulhando na pygeoapi \u00e9 uma workshop de meio dia, desenhada para que os utilizadores se familiarizem com a instala\u00e7\u00e3o, configura\u00e7\u00e3o, publica\u00e7\u00e3o de dados e extens\u00e3o da pygeoapi. Esta workshop abordar\u00e1 a publica\u00e7\u00e3o de dados geoespaciais na Web usando a pygeoapi, em conformidade com a su\u00edte de standards OGC API.</p> <p>Esta workshop abrange uma vasta gama de t\u00f3picos (instala\u00e7\u00e3o/configura\u00e7\u00e3o, publica\u00e7\u00e3o, cloud, modelos, plugins, etc.). Por favor, consulte o menu de navega\u00e7\u00e3o \u00e0 esquerda para aceder ao \u00edndice.</p>"},{"location":"pt/#a-vossa-equipa-da-workshop-da-fsl","title":"A vossa equipa da workshop da FSL","text":""},{"location":"pt/#sobre-este-tutorial","title":"Sobre este tutorial","text":"<p>Este tutorial \u00e9 uma combina\u00e7\u00e3o de explica\u00e7\u00f5es passo a passo de v\u00e1rios aspetos da pygeoapi, bem como uma s\u00e9rie de exerc\u00edcios para se familiarizar com o projeto.</p> <p>Os exerc\u00edcios s\u00e3o indicados da seguinte forma:</p> <p>Exemplo de exerc\u00edcio</p> <p>Uma sec\u00e7\u00e3o marcada desta forma indica que pode experimentar o exerc\u00edcio.</p> <p>Exemplo de exerc\u00edcio com separadores</p> <p>Uma sec\u00e7\u00e3o marcada desta forma indica que pode experimentar o exerc\u00edcio e escolher o seu ambiente (Linux/Mac ou Windows).</p> Linux/MacWindows <p> <pre><code>docker run -p 5000:80 -v $(pwd)/default.config.yml:/pygeoapi/local.config.yml geopython/pygeoapi:latest\n</code></pre> </p> <p> <pre><code>docker run -p 5000:80 -v ${pwd}/default.config.yml:/pygeoapi/local.config.yml geopython/pygeoapi:latest\n</code></pre> </p> <p>Tamb\u00e9m ir\u00e1 notar sec\u00e7\u00f5es de dicas e notas no texto:</p> <p>Tip</p> <p>As dicas oferecem ajuda adicional sobre a melhor forma de realizar tarefas</p> <p>Os exemplos s\u00e3o indicados da seguinte forma:</p> <p>C\u00f3digo <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;This is an HTML sample&lt;/title&gt;\n    &lt;/head&gt;\n&lt;/html&gt;\n</code></pre></p> <p>Configura\u00e7\u00e3o <pre><code>my-collection:\n    type: collection\n    title: my cool collection title\n    description: my cool collection description\n</code></pre></p> <p>Fragmentos de c\u00f3digo (snippets) que precisam de ser digitados num terminal/consola s\u00e3o indicados como:</p> <pre><code>echo 'Hello world'\n</code></pre>"},{"location":"pt/#localizacao-e-materiais-da-workshop","title":"Localiza\u00e7\u00e3o e materiais da workshop","text":"<p>Esta workshop \u00e9 sempre disponibilizada ao vivo em https://dive.pygeoapi.io.</p> <p>Os conte\u00fados da workshop, a wiki e o sistema de registo de problemas (issue tracker) s\u00e3o geridos no GitHub em https://github.com/geopython/diving-into-pygeoapi.</p>"},{"location":"pt/#imprimir-esta-workshop","title":"Imprimir esta workshop","text":"<p>Para imprimir esta workshop, navegue at\u00e9 \u00e0 p\u00e1gina de impress\u00e3o e selecione Ficheiro &gt; Imprimir &gt; Guardar como PDF.</p>"},{"location":"pt/#suporte","title":"Suporte","text":"<p>Existe um canal no Gitter para discuss\u00e3o e suporte ao vivo por parte dos desenvolvedores da workshop e de outros participantes.</p> <p>Para problemas/bugs/sugest\u00f5es ou melhorias/contribui\u00e7\u00f5es, por favor, utilize o issue tracker do GitHub.</p> <p>Todos os bugs, melhorias e problemas podem ser reportados no GitHub.</p> <p>Como sempre, o suporte principal da pygeoapi e as informa\u00e7\u00f5es da comunidade podem ser encontrados no website da pygeoapi.</p> <p>As contribui\u00e7\u00f5es s\u00e3o sempre incentivadas e bem-vindas!</p>"},{"location":"pt/#agora-vamos-a-workshop-bora-la","title":"Agora, vamos \u00e0 workshop. Bora l\u00e1!","text":""},{"location":"pt/conclusion/","title":"Conclus\u00e3o","text":"<p>Esperamos que esta workshop vos tenha proporcionado uma vis\u00e3o geral das muitas funcionalidades da pygeoapi. O objetivo do projeto \u00e9 permitir a publica\u00e7\u00e3o de dados utilizando o conjunto de Standards OGC API de forma simples, flex\u00edvel e com uma barreira baixa de entrada.</p> <p></p> <p></p>"},{"location":"pt/conclusion/#foss4g-europe-2025","title":"FOSS4G Europe 2025","text":"<p>Para aqueles que est\u00e3o a participar no FOSS4G Europe 2025:</p> <ul> <li>venham \u00e0 apresenta\u00e7\u00e3o sobre o estado do projeto pygeoapi na quarta-feira, 16 de julho \u00e0s 17:45, na sala EL11 (Geosolutions)</li> <li>ou \u00e0s outras apresenta\u00e7\u00f5es relacionadas com pygeoapi:</li> <li>a equipa pygeoapi estar\u00e1 presente no Community Sprint nos dias 19-20 de julho, no local da confer\u00eancia, Faculdade de Humanidades e Ci\u00eancias Sociais (edif\u00edcio P)</li> </ul>"},{"location":"pt/conclusion/#contribuicoes","title":"Contribui\u00e7\u00f5es","text":"<p>Sugest\u00f5es, melhorias e corre\u00e7\u00f5es s\u00e3o sempre bem-vindas. Por favor, visitem a nossa p\u00e1gina da comunidade para mais informa\u00e7\u00f5es sobre como entrar em contacto.</p> <p>Obrigado pelo vosso interesse na pygeoapi!</p>"},{"location":"pt/introduction/","title":"Introdu\u00e7\u00e3o \u00e0 pygeoapi","text":"<p>A equipa de desenvolvimento da pygeoapi (sim, em min\u00fasculas) tem o prazer de lhe dar as boas-vindas a esta workshop!</p> <p>Nesta workshop de meio dia<sup>1</sup>, fazemos uma introdu\u00e7\u00e3o \u00e0 pygeoapi, e \u00e0 publica\u00e7\u00e3o de dados geoespaciais, fornecendo  tamb\u00e9m recursos e dicas para leitura e refer\u00eancia futuras (ou seja, para onde ir quando n\u00e3o souber!).</p> <p>Embora a pygeoapi seja escrita em Python e seja personaliz\u00e1vel e extens\u00edvel (atrav\u00e9s de plugins) por  programadores de Python, n\u00e3o s\u00e3o necess\u00e1rios conhecimentos de Python para instalar, configurar e publicar os seus  dados geoespaciais como parte desta workshop. Tudo o que precisa para a workshop \u00e9 o seu editor de texto favorito  e o Docker (forneceremos mais informa\u00e7\u00f5es na sec\u00e7\u00e3o de configura\u00e7\u00e3o).</p>"},{"location":"pt/introduction/#leitura-de-base","title":"Leitura de base","text":"<p>O website da pygeoapi \u00e9 o ponto de entrada principal para utilizadores finais e programadores.  A\u00ed pode encontrar:</p> <ul> <li>Documenta\u00e7\u00e3o oficial</li> <li>V\u00e1rias apresenta\u00e7\u00f5es do projeto</li> <li>P c\u00f3digo-fonte no GitHub</li> <li>As imagens Docker dispon\u00edveis no Docker Hub</li> <li>As vers\u00f5es da pygeoapi no Python Package Index (PyPI)</li> <li>Dado que a pygeoapi implementa uma s\u00e9rie de normas OGC API, tamb\u00e9m poder\u00e1 querer ler sobre estas    em ogcapi.ogc.org.</li> </ul>"},{"location":"pt/introduction/#instalacoes-de-referencia","title":"Instala\u00e7\u00f5es de refer\u00eancia","text":"<p>V\u00e1rias organiza\u00e7\u00f5es implementaram a pygeoapi nas suas opera\u00e7\u00f5es. Para ter uma ideia de como a pygeoapi \u00e9 usada na  pr\u00e1tica, consulte a nossa p\u00e1gina atualizada de  implementa\u00e7\u00f5es ativas. </p> <p>O projeto pygeoapi tamb\u00e9m mant\u00e9m uma instala\u00e7\u00e3o de demonstra\u00e7\u00e3o, dispon\u00edvel em:</p> <p>https://demo.pygeoapi.io</p> <p>Esta instala\u00e7\u00e3o \u00e9 operada pela equipa de desenvolvimento. Consulte a  inst\u00e2ncia principal, que executa sempre a vers\u00e3o mais recente do GitHub.</p> <p>Interessado na configura\u00e7\u00e3o do pr\u00f3prio site de demonstra\u00e7\u00e3o? O demo.pygeoapi.io \u00e9  desenvolvido num reposit\u00f3rio GitHub utilizando um fluxo de trabalho  de disponibiliza\u00e7\u00e3o cont\u00ednua (CD). Implementa\u00e7\u00f5es GitOps ainda mais recentes foram desenvolvidas para  a Geonovum e para o Centro Comum de Investiga\u00e7\u00e3o da Comiss\u00e3o Europeia.</p> <p>Os exemplos acima podem servir como ponto de partida para a sua pr\u00f3pria configura\u00e7\u00e3o e implementa\u00e7\u00e3o da pygeoapi,  por isso, sinta-se \u00e0 vontade para os estudar e utilizar!</p>"},{"location":"pt/introduction/#historia","title":"Hist\u00f3ria","text":"<p>Iniciada em 2018, a pygeoapi surgiu como parte dos esfor\u00e7os iniciais para o desenvolvimento das normas OGC API.  As code sprints da OGC API foram fundamentais para o desenvolvimento \u00e1gil e para lan\u00e7ar as bases do projeto.</p> <p>Os princ\u00edpios centrais de design s\u00e3o os seguintes:</p> <ul> <li>Simplicidade / baixa barreira de entrada</li> <li>Sustentabilidade a longo prazo</li> <li>Modularidade</li> <li>Extensibilidade</li> <li>Constru\u00e7\u00e3o sobre um vasto ecossistema de componentes de C\u00f3digo Aberto e da OSGeo, como GDAL, rasterio, Shapely,    Pandas, Elasticsearch, PostGIS e muitos outros</li> </ul> <p>O projeto foi iniciado por Tom Kralidis. Em poucas semanas, v\u00e1rios programadores  talentosos juntaram-se ao projeto, o que levou \u00e0 forma\u00e7\u00e3o de uma equipa principal e de  um Comit\u00e9 de Dire\u00e7\u00e3o do Projeto (PSC). As contribui\u00e7\u00f5es continuaram tamb\u00e9m por  parte de outros programadores e utilizadores que, de bom grado, forneceram novas funcionalidades, corre\u00e7\u00f5es de erros  e atualiza\u00e7\u00f5es da documenta\u00e7\u00e3o. Como resultado, rapidamente emergiu uma comunidade saud\u00e1vel com um interesse comum  em c\u00f3digo aberto, normas OGC API, baixa barreira de entrada, modularidade e extensibilidade. O resto, como se  costuma dizer, \u00e9 hist\u00f3ria.</p> <p>Em Fevereiro de 2024 foi realizado o primeiro encontro de desenvolvedores da pygeoapi, em \u00c9vora</p> <p>A pygeoapi \u00e9 um Projeto da OSGeo e uma Implementa\u00e7\u00e3o de Refer\u00eancia da OGC.</p> <ol> <li> <p>A sess\u00e3o apresentada na FSL 2025 \u00e9 uma sess\u00e3o simplificada de 2h30m.\u00a0\u21a9</p> </li> </ol>"},{"location":"pt/setup/","title":"Configura\u00e7\u00e3o do ambiente da workshop","text":"<p>Nesta workshop, utilizamos os seguintes materiais:</p> <ol> <li>Documenta\u00e7\u00e3o - (como esta p\u00e1gina): aceda \u00e0 vers\u00e3o mais recente em dive.pygeoapi.io</li> <li>Exerc\u00edcios - descarregue o ficheiro zip mais recente, extraia o conte\u00fado e encontre os exerc\u00edcios em <code>workshop/exercises</code> <sup>2</sup></li> <li>Docker - todos os exemplos/exerc\u00edcios s\u00e3o executados num <code>contentor Docker</code> em <code>workshop/exercises</code></li> </ol>"},{"location":"pt/setup/#editor-de-texto","title":"Editor de Texto","text":"<p>O seu editor de texto deve ser capaz de editar ficheiros de configura\u00e7\u00e3o em texto simples. Abaixo est\u00e3o algumas op\u00e7\u00f5es de editores de texto (pode haver outros), juntamente com o que alguns dos programadores da pygeoapi preferem usar:</p> <ul> <li>Notepad ou Notepad++ (Windows)</li> <li>Sublime Text: Angelos</li> <li>PyCharm: Just</li> <li>Emacs: Just</li> <li>Visual Studio Code: Francesco, Angelos, Joana</li> <li><code>vi</code> / <code>vim</code>: Tom, Angelos</li> </ul> <p>Dito isto, sinta-se \u00e0 vontade para usar o que funciona melhor para si :)</p>"},{"location":"pt/setup/#yaml","title":"YAML","text":"<p>A maioria dos exerc\u00edcios focar-se-\u00e1 na edi\u00e7\u00e3o da configura\u00e7\u00e3o da pygeoapi, que est\u00e1 no formato YAML. Se n\u00e3o estiver familiarizado com YAML, vale a pena ler um tutorial para se familiarizar com a sintaxe e a indenta\u00e7\u00e3o do YAML.</p> <p>O requisito principal para a forma\u00e7\u00e3o \u00e9 instalar o Docker e/ou o Docker Compose no seu sistema. Aconselhamos vivamente a instala\u00e7\u00e3o do Docker antes do in\u00edcio da workshop.</p> <p>Embora sejam poss\u00edveis v\u00e1rios cen\u00e1rios de instala\u00e7\u00e3o personalizada (consulte a documenta\u00e7\u00e3o para mais informa\u00e7\u00f5es), estes n\u00e3o s\u00e3o considerados nesta workshop, dada a capacidade de instalar um ambiente totalmente reprodut\u00edvel atrav\u00e9s do Docker e do Docker Compose.</p> <p>Os Exerc\u00edcios da Workshop tamb\u00e9m ser\u00e3o baseados no Docker, pelo que uma instala\u00e7\u00e3o personalizada seria, no m\u00ednimo, 'desafiadora'. A boa not\u00edcia \u00e9 que apenas uma \u00fanica instala\u00e7\u00e3o (Docker) \u00e9 necess\u00e1ria! As imagens Docker utilizadas nesta workshop cont\u00eam a vers\u00e3o mais recente da pygeoapi e todas as suas depend\u00eancias e servi\u00e7os externos (ex: PostGIS).</p>"},{"location":"pt/setup/#sobre-o-docker","title":"Sobre o Docker","text":"<p>O Docker est\u00e1 dispon\u00edvel desde 2013 e \u00e9 fornecido como uma op\u00e7\u00e3o de implementa\u00e7\u00e3o em in\u00fameros projetos de software FOSS e da OSGeo. Dada a era atual da computa\u00e7\u00e3o, \u00e9 prov\u00e1vel que j\u00e1 tenha ouvido falar do Docker e de contentoriza\u00e7\u00e3o. Ou, talvez, j\u00e1 esteja familiarizado e, esperamos, j\u00e1 a utilizar o Docker. Se n\u00e3o for o caso, existe uma abund\u00e2ncia de materiais introdut\u00f3rios que podem ser encontrados online, como este tutorial da IBM.</p> <p>O software FOSS4G beneficiou enormemente do Docker (padr\u00f5es consistentes de empacotamento, isolamento, integra\u00e7\u00e3o e atualiza\u00e7\u00e3o) em compara\u00e7\u00e3o com as instala\u00e7\u00f5es personalizadas. Embora hoje utilizemos principalmente o Docker, a vis\u00e3o geral \u00e9 o uso de Contentores como o pr\u00f3ximo passo na virtualiza\u00e7\u00e3o. A contentoriza\u00e7\u00e3o certamente merece uma workshop pr\u00f3pria, portanto, para os fins desta workshop, abordaremos apenas os conceitos b\u00e1sicos do Docker e do Docker Compose.</p> <p>O Docker Compose \u00e9 um complemento do Docker para facilitar a orquestra\u00e7\u00e3o (configura\u00e7\u00e3o) de um ou mais 'Contentores' Docker (um Contentor \u00e9 uma inst\u00e2ncia em execu\u00e7\u00e3o de uma imagem Docker) usando uma conven\u00e7\u00e3o de configura\u00e7\u00e3o (o ficheiro YAML do Docker Compose), geralmente chamado <code>docker-compose.yml</code>.</p> <p>Num patamar superior, existem orquestradores Docker ainda mais sofisticados, como o Rancher e o Kubernetes, mas para esta workshop, o Docker e o Docker Compose s\u00e3o tudo o que precisamos.</p>"},{"location":"pt/setup/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>A instala\u00e7\u00e3o do Docker progrediu muito ao longo dos anos. Esta \u00e9 a \u00fanica parte da workshop que depende do sistema/SO que est\u00e1 a utilizar (ex: Windows, Mac ou Linux). Para cada sistema, o site do Docker fornece instru\u00e7\u00f5es de instala\u00e7\u00e3o detalhadas. Por favor, siga-as de forma consistente.</p> <p>Para muitas plataformas, est\u00e1 dispon\u00edvel um produto chamado Docker Desktop, que inclui os principais componentes do Docker:</p> <ul> <li>Instala\u00e7\u00e3o para Windows</li> <li>Instala\u00e7\u00e3o para Mac</li> <li>Instala\u00e7\u00e3o para Linux</li> </ul> <p>Algumas notas:</p> <ul> <li>No Windows, recomendamos o uso do Subsistema Windows para Linux (WSL), pois tamb\u00e9m fornece uma linha de comandos poderosa (Bash) e tem uma integra\u00e7\u00e3o \u00f3tima com o Docker. Antes de instalar o Docker Desktop, instale o WSL abrindo o Microsoft PowerShell (executar como administrador) e executando <code>wsl --install</code><ul> <li>a instala\u00e7\u00e3o do WSL requer privil\u00e9gios de administrador no seu sistema</li> </ul> </li> <li>No Mac, se estiver a usar o Homebrew, considere (como o autor fez) usar a f\u00f3rmula Docker do brew</li> <li>No Mac OSX Monterey e posterior, pode haver um problema com a porta local 5000 j\u00e1 em uso, entrando em conflito com a porta padr\u00e3o usada pelo contentor da pygeoapi. Se vir este erro <code>OSError: [Errno 48] Address already in use</code>, precisa de desativar o Recetor Airplay. V\u00e1 a <code>Defini\u00e7\u00f5es do Sistema | Partilha</code> ou, como no Sonoma, escreva 'airplay' na caixa de pesquisa. Veja a imagem abaixo para o Mac OSX Sonoma. H\u00e1 tamb\u00e9m uma descri\u00e7\u00e3o detalhada nesta publica\u00e7\u00e3o de blog. </li> <li>No Linux, pode escolher o instalador relevante para a sua plataforma. Pode tamb\u00e9m usar o Virtualbox com uma Imagem Ubuntu ou usar uma VM na nuvem.</li> <li>No Linux, ao encontrar problemas de permiss\u00e3o: o daemon do Docker normalmente \u00e9 executado como \"root\". Isto requer que os comandos sejam prefixados com <code>sudo</code> como um utilizador n\u00e3o-root. Na maioria das distribui\u00e7\u00f5es, o Docker \u00e9 acess\u00edvel por utilizadores no grupo <code>docker</code>. Pode omitir o uso de <code>sudo</code> e prevenir outros poss\u00edveis problemas de permiss\u00e3o da seguinte forma:<ul> <li>Teste se o grupo <code>docker</code> existe: <code>cat /etc/group | grep docker</code>.</li> <li>Se n\u00e3o existir: <code>sudo groupadd docker</code>.</li> <li>Adicione o seu utilizador a este grupo: <code>sudo usermod -aG docker $USER</code></li> <li>Fa\u00e7a log-out e log-in.</li> <li>Veja todos os detalhes e mais op\u00e7\u00f5es nesta instru\u00e7\u00e3o.</li> </ul> </li> <li>O Docker Desktop inclui uma interface gr\u00e1fica com algumas op\u00e7\u00f5es interessantes. Pode ver logs e informa\u00e7\u00f5es sobre os contentores em execu\u00e7\u00e3o, abrir o servi\u00e7o deles num navegador ou at\u00e9 mesmo abrir um terminal dentro do contentor.</li> </ul> <p>Se tudo correr bem, dever\u00e1 conseguir executar o Docker a partir da linha de comandos da seguinte forma: <sup>1</sup></p> Linux/MacWindows (PowerShell) <p> <pre><code>docker version\nDocker version 20.10.17, build 100c701\n\ndocker compose version\nDocker Compose version v2.6.1\n</code></pre> </p> <p> <pre><code>docker version\nDocker version 20.10.17, build 100c701\n\ndocker compose version\nDocker Compose version v2.6.1\n</code></pre> </p> <p>(N\u00e3o \u00e9 necess\u00e1rio que os n\u00fameros da sua vers\u00e3o correspondam exatamente).</p>"},{"location":"pt/setup/#inicio-rapido","title":"In\u00edcio R\u00e1pido","text":"<p>Assim que o Docker estiver dispon\u00edvel no seu sistema, executar o contentor da pygeoapi com a sua configura\u00e7\u00e3o e dados incorporados \u00e9 uma \u00fanica linha de comando.</p> <p>Abra uma sess\u00e3o de terminal e execute:</p> <p>Primeira execu\u00e7\u00e3o via Docker</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run --rm -p 5000:80 geopython/pygeoapi:latest\nUnable to find image 'geopython/pygeoapi:latest' locally\nlatest: Pulling from geopython/pygeoapi\nd7bfe07ed847: Already exists \nd5d0144a7164: Already exists \nafe0923a0fa0: Already exists \n75f8618c4e86: Already exists \nc603397fd6ad: Already exists \n6584a95328b3: Already exists \nfd93e44631d9: Already exists \n6a3201071a5d: Already exists \n4f4fb700ef54: Already exists \nDigest: sha256:27b2b219497a6ea382a946ee90ae96ad00b5c1d8e9b725fccf23211978fef124\nStatus: Downloaded newer image for geopython/pygeoapi:latest\nSTART /entrypoint.sh\nTrying to generate openapi.yml\nopenapi.yml generated continue to pygeoapi\nmake SCRIPT_NAME empty from /\nStart gunicorn name=pygeoapi on 0.0.0.0:80 with 4 workers and SCRIPT_NAME=\n[2022-08-09 12:59:00 +0000] [1] [INFO] Starting gunicorn 20.0.4\n[2022-08-09 12:59:00 +0000] [1] [INFO] Listening at: http://0.0.0.0:80 (1)\n[2022-08-09 12:59:00 +0000] [1] [INFO] Using worker: gevent\n[2022-08-09 12:59:00 +0000] [18] [INFO] Booting worker with pid: 18\n[2022-08-09 12:59:00 +0000] [19] [INFO] Booting worker with pid: 19\n[2022-08-09 12:59:00 +0000] [21] [INFO] Booting worker with pid: 21\n[2022-08-09 12:59:00 +0000] [22] [INFO] Booting worker with pid: 22\n</code></pre> </p> <p> <pre><code>docker run --rm -p 5000:80 geopython/pygeoapi:latest\nUnable to find image 'geopython/pygeoapi:latest' locally\nlatest: Pulling from geopython/pygeoapi\nd7bfe07ed847: Already exists \nd5d0144a7164: Already exists \nafe0923a0fa0: Already exists \n75f8618c4e86: Already exists \nc603397fd6ad: Already exists \n6584a95328b3: Already exists \nfd93e44631d9: Already exists \n6a3201071a5d: Already exists \n4f4fb700ef54: Already exists \nDigest: sha256:27b2b219497a6ea382a946ee90ae96ad00b5c1d8e9b725fccf23211978fef124\nStatus: Downloaded newer image for geopython/pygeoapi:latest\nSTART /entrypoint.sh\nTrying to generate openapi.yml\nopenapi.yml generated continue to pygeoapi\nmake SCRIPT_NAME empty from /\nStart gunicorn name=pygeoapi on 0.0.0.0:80 with 4 workers and SCRIPT_NAME=\n[2022-08-09 12:59:00 +0000] [1] [INFO] Starting gunicorn 20.0.4\n[2022-08-09 12:59:00 +0000] [1] [INFO] Listening at: http://0.0.0.0:80 (1)\n[2022-08-09 12:59:00 +0000] [1] [INFO] Using worker: gevent\n[2022-08-09 12:59:00 +0000] [18] [INFO] Booting worker with pid: 18\n[2022-08-09 12:59:00 +0000] [19] [INFO] Booting worker with pid: 19\n[2022-08-09 12:59:00 +0000] [21] [INFO] Booting worker with pid: 21\n[2022-08-09 12:59:00 +0000] [22] [INFO] Booting worker with pid: 22\n</code></pre> </p> <p>\u00c9 tudo! Abra o seu navegador e navegue para <code>http://localhost:5000</code>, a p\u00e1gina da pygeoapi ser\u00e1 exibida. Como parte da execu\u00e7\u00e3o inicial do <code>docker run</code>, o Docker descarregar\u00e1 a Imagem Docker da pygeoapi do Docker Hub. Isto pode levar algum tempo, pois a imagem Docker inclui todas as depend\u00eancias (como GDAL, etc.). Seja paciente! Este \u00e9 um download \u00fanico para toda a workshop, ou pode querer faz\u00ea-lo antecipadamente.</p> <p>Algumas notas:</p> <ul> <li>O Docker executa um contentor da pygeoapi no seu sistema local na porta 5000, que \u00e9 mapeada para a porta 80 dentro do contentor.</li> <li>o contentor Docker da pygeoapi \u00e9 executado com a configura\u00e7\u00e3o padr\u00e3o e os dados do reposit\u00f3rio GitHub.</li> <li>tanto a configura\u00e7\u00e3o como os dados (do reposit\u00f3rio GitHub) est\u00e3o incorporados na Imagem Docker - iremos substitu\u00ed-los mais tarde.</li> <li>a op\u00e7\u00e3o <code>--rm</code> remove o Contentor Docker (mas n\u00e3o a imagem), ap\u00f3s a execu\u00e7\u00e3o.</li> <li>pressione <code>CTRL-C</code> para parar o contentor e voltar ao terminal.</li> </ul> <p>De seguida, pode substituir a configura\u00e7\u00e3o padr\u00e3o e adicionar os seus pr\u00f3prios dados usando volumes Docker.</p>"},{"location":"pt/setup/#personalizar-a-configuracao","title":"Personalizar a configura\u00e7\u00e3o","text":"<p>Nos pr\u00f3ximos exerc\u00edcios, vamos atualizar o ficheiro de configura\u00e7\u00e3o v\u00e1rias vezes. Para facilitar o desenvolvimento, vamos substituir a configura\u00e7\u00e3o da pygeoapi que reside por padr\u00e3o em <code>/pygeoapi/local.config.yml</code> dentro do contentor por um ficheiro local que pode editar no seu editor de texto favorito.</p> <p>Substituir o ficheiro de configura\u00e7\u00e3o da pygeoapi</p> <p>Descarregue a configura\u00e7\u00e3o Docker padr\u00e3o da pygeoapi de default.config.yml para a pasta atual (ou navegue para a pasta onde descarregou o ficheiro), por exemplo com:</p> Linux/MacWindows (PowerShell) <p> <pre><code>curl -O https://raw.githubusercontent.com/geopython/pygeoapi/master/docker/default.config.yml\n</code></pre> </p> <p> <pre><code>curl https://raw.githubusercontent.com/geopython/pygeoapi/master/docker/default.config.yml\n</code></pre> </p> <p>Abra o ficheiro no seu editor de texto favorito e altere o t\u00edtulo e a descri\u00e7\u00e3o da API:</p> <pre><code>metadata:\n    identification:\n        title: A minha primeira execu\u00e7\u00e3o da pygeoapi\n        description: a pygeoapi fornece uma API para dados geoespaciais\n</code></pre> <p>Agora execute o contentor com o ficheiro de configura\u00e7\u00e3o substitu\u00eddo:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -p 5000:80 \\\n-v $(pwd)/default.config.yml:/pygeoapi/local.config.yml \\\ngeopython/pygeoapi:latest\n</code></pre> </p> <p> <pre><code>docker run -p 5000:80 -v ${pwd}/default.config.yml:/pygeoapi/local.config.yml geopython/pygeoapi:latest\n</code></pre> </p> <p>Neste ponto, navegue para <code>http://localhost:5000</code> para verificar o novo t\u00edtulo e descri\u00e7\u00e3o.</p> <p>Note</p> <p>No Windows, o ficheiro descarregado pode ser renomeado para <code>default.config.yml.txt</code>. Certifique-se de renomear o ficheiro para <code>default.config.yml</code>.</p> <p>Ao usar uma montagem de volume Docker (op\u00e7\u00e3o <code>-v</code>), o Docker anexa ou 'monta' um diret\u00f3rio ou um \u00fanico ficheiro do seu sistema anfitri\u00e3o/local no Contentor Docker.</p> <p>No trecho de c\u00f3digo acima, <code>$(pwd)</code> indica a pasta de trabalho a partir da qual inicia o contentor Docker.</p>"},{"location":"pt/setup/#adicionar-dados-e-definir-o-ficheiro-de-configuracao","title":"Adicionar dados e definir o ficheiro de configura\u00e7\u00e3o","text":"<p>Al\u00e9m de adaptar a configura\u00e7\u00e3o, geralmente adicionar\u00e1 os seus pr\u00f3prios dados como ficheiros ou servi\u00e7os de dados remotos como PostGIS ou WFS.</p> <p>Tamb\u00e9m pode montar um diret\u00f3rio local como <code>data/</code> para <code>/pygeoapi/mydata</code> dentro do Contentor. Dentro do diret\u00f3rio de dados, pode armazenar dados vetoriais, ficheiros raster ou conjuntos de imagens de mosaicos vetoriais.</p> <p>Abaixo est\u00e1 um exemplo onde a configura\u00e7\u00e3o \u00e9 explicitamente definida para <code>pygeoapi-config.yml</code> atrav\u00e9s de uma vari\u00e1vel de ambiente (<code>-e</code>) e usa uma montagem Docker para montar a pasta local <code>data</code> como <code>/pygeoapi/mydata</code>:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -p 5000:80 \\\n-v $(pwd)/data:/pygeoapi/mydata \\\n-v $(pwd)/default.config.yml:/pygeoapi/pygeoapi-config.yml \\\n-e PYGEOAPI_CONFIG=/pygeoapi/pygeoapi-config.yml \\\ngeopython/pygeoapi:latest\n</code></pre> </p> <p> <pre><code>docker run -p 5000:80 -v ${pwd}/data:/pygeoapi/mydata -v ${pwd}/default.config.yml:/pygeoapi/pygeoapi-config.yml -e PYGEOAPI_CONFIG=/pygeoapi/pygeoapi-config.yml geopython/pygeoapi:latest\n</code></pre> </p> <p>Nas pr\u00f3ximas sec\u00e7\u00f5es, analisaremos exemplos adicionais de montagens na pasta de dados. Mais exemplos de implementa\u00e7\u00e3o do Docker podem ser encontrados no reposit\u00f3rio GitHub da pygeoapi.</p>"},{"location":"pt/setup/#usar-o-docker-para-clientes-python","title":"Usar o Docker para Clientes Python","text":"<p>Em alguns exerc\u00edcios, acedemos a endpoints remotos da <code>pygeoapi</code> usando a OWSLib, uma biblioteca Python para interagir com os Servi\u00e7os Web da OGC. A OWSLib pode ser instalada usando o comando padr\u00e3o do Python <code>pip3 install OWSLib</code>, mas pode n\u00e3o ter o Python dispon\u00edvel, ou querer manter o seu sistema 'limpo'.</p> <p>Como o Docker j\u00e1 est\u00e1 dispon\u00edvel no seu sistema, pode iniciar um Contentor com um ambiente Python completo e aced\u00ea-lo a partir de um prompt de shell <code>bash</code>. A linha m\u00e1gica \u00e9:</p> <p><code>docker run -it --rm --network=host --name owslib python:3.10-slim /bin/bash</code></p> <p>Isto ir\u00e1 descarregar uma Imagem Docker oficial e pequena (125MB) do Python. Quando o Contentor \u00e9 iniciado, \u00e9 direcionado para uma sess\u00e3o/prompt <code>bash</code>. O argumento <code>--network=host</code> permite que interaja diretamente com os servi\u00e7os no seu sistema anfitri\u00e3o, portanto com a <code>pygeoapi</code>, sem configurar uma rede Docker. A partir da\u00ed, pode iniciar o <code>python3</code>, instalar a OWSLib e talvez at\u00e9 outras ferramentas como <code>curl</code> e <code>wget</code>.</p> <p>Abaixo est\u00e1 um exemplo completo, assumindo que a pygeoapi est\u00e1 a ser executada no seu <code>localhost</code> na porta 5000:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -it --rm --network=host --name owslib python:3.10-slim /bin/bash\nUnable to find image 'python:3.10-slim' locally\n3.10-slim: Pulling from library/python\n5b5fe70539cd: Pull complete \nf4b0e4004dc0: Pull complete \nc5424f0ac885: Pull complete \n9d21fe1624ec: Pull complete \nde0194aa1c21: Pull complete \nDigest: sha256:7dc5b4e948acd18c1633b0e593ad0224298646612ce7d0b5ac6d4e17616d7e4b\nStatus: Downloaded newer image for python:3.10-slim\n\nroot@docker-desktop:/# pip3 install owslib\nroot@docker-desktop:/# python3\n&gt;&gt;&gt; from owslib.ogcapi.features import Features\n&gt;&gt;&gt; w = Features('http://localhost:5000')\n&gt;&gt;&gt; w\n&lt;owslib.ogcapi.features.Features object at 0x7ff493e6f850&gt;\n&gt;&gt;&gt; conformance = w.conformance()\n&gt;&gt;&gt; conformance\netc\n</code></pre> </p> <p> <pre><code>docker run -it --rm --network=host --name owslib python:3.10-slim /bin/bash\nUnable to find image 'python:3.10-slim' locally\n3.10-slim: Pulling from library/python\n5b5fe70539cd: Pull complete \nf4b0e4004dc0: Pull complete \nc5424f0ac885: Pull complete \n9d21fe1624ec: Pull complete \nde0194aa1c21: Pull complete \nDigest: sha256:7dc5b4e948acd18c1633b0e593ad0224298646612ce7d0b5ac6d4e17616d7e4b\nStatus: Downloaded newer image for python:3.10-slim\n\nroot@docker-desktop:/# pip3 install owslib\nroot@docker-desktop:/# python3\n&gt;&gt;&gt; from owslib.ogcapi.features import Features\n&gt;&gt;&gt; w = Features('http://localhost:5000')\n&gt;&gt;&gt; w\n&lt;owslib.ogcapi.features.Features object at 0x7ff493e6f850&gt;\n&gt;&gt;&gt; conformance = w.conformance()\n&gt;&gt;&gt; conformance\netc\n</code></pre> </p> <p>Faremos refer\u00eancia a esta instala\u00e7\u00e3o em alguns dos Exerc\u00edcios onde a OWSLib \u00e9 utilizada.</p> <ol> <li> <p>Para vers\u00f5es recentes do Docker, execute <code>docker compose version</code> \u21a9</p> </li> <li> <p>Em alternativa, pode fazer um fork/clonar o reposit\u00f3rio GitHub desta workshop diretamente de https://github.com/geopython/diving-into-pygeoapi.\u00a0\u21a9</p> </li> </ol>"},{"location":"pt/standards/","title":"Vis\u00e3o Geral","text":"<p>Esta sec\u00e7\u00e3o fornece uma vis\u00e3o geral de alto n\u00edvel do suporte a normas na pygeoapi.</p>"},{"location":"pt/standards/#normas","title":"Normas","text":"<p>As normas abertas s\u00e3o o n\u00facleo da pygeoapi e permitem uma ampla interoperabilidade e capacidade plug and play. A pygeoapi suporta uma s\u00e9rie de normas abertas (tanto normas formais como de facto ou impulsionadas pela comunidade).</p>"},{"location":"pt/standards/#normas-api","title":"Normas API","text":""},{"location":"pt/standards/#ogc-api","title":"OGC API","text":"<p>A pygeoapi implementa o conjunto de normas OGC API do Open Geospatial Consortium (OGC). Do website da OGC API:</p> <p>Citation</p> <p>A fam\u00edlia de normas OGC API est\u00e1 a ser desenvolvida para facilitar a qualquer pessoa o fornecimento de dados geoespaciais para a web. Estas normas baseiam-se no legado das normas OGC Web Service (WMS, WFS, WCS, WPS, etc.), mas definem APIs centradas em recursos que tiram partido das pr\u00e1ticas modernas de desenvolvimento web. Esta p\u00e1gina web fornece informa\u00e7\u00f5es sobre estas normas num local consolidado.</p> <p>Estas normas est\u00e3o a ser constru\u00eddas como \"blocos de constru\u00e7\u00e3o\" que podem ser usados para montar APIs inovadoras para acesso via web a conte\u00fado geoespacial. Os blocos de constru\u00e7\u00e3o s\u00e3o definidos n\u00e3o s\u00f3 pelos requisitos das normas espec\u00edficas, mas tamb\u00e9m atrav\u00e9s da prototipagem de interoperabilidade e testes no Programa de Inova\u00e7\u00e3o da OGC.</p> <p>Tip</p> <p>Pode aprender mais sobre as OGC APIs na workshop da OGC API</p>"},{"location":"pt/standards/#ogc-api-common","title":"OGC API - Common","text":"<p>A OGC API - Common \u00e9 uma estrutura comum utilizada em todas as OGC API. A OGC API - Common fornece a seguinte funcionalidade:</p> <ul> <li>baseada na OpenAPI 3.0</li> <li>HTML e JSON como as codifica\u00e7\u00f5es dominantes, sendo poss\u00edveis codifica\u00e7\u00f5es alternativas</li> <li>endpoints partilhados, tais como:<ul> <li><code>/</code> (p\u00e1gina de entrada)</li> <li><code>/conformance</code></li> <li><code>/openapi</code></li> <li><code>/collections</code></li> <li><code>/collections/foo</code></li> </ul> </li> <li>aspetos como pagina\u00e7\u00e3o, liga\u00e7\u00f5es entre recursos, filtragem b\u00e1sica, par\u00e2metros de consulta (<code>bbox</code>, <code>datetime</code>, etc.)</li> <li>modelos partilhados (exce\u00e7\u00f5es, liga\u00e7\u00f5es, etc.)</li> </ul> <p>A OGC API - Common permite que os programadores de especifica\u00e7\u00f5es se concentrem na funcionalidade principal de uma determinada API (ou seja, acesso a dados, etc.), utilizando constru\u00e7\u00f5es comuns. Isto harmoniza as normas OGC API e permite uma integra\u00e7\u00e3o mais profunda com menos c\u00f3digo. Isto tamb\u00e9m permite que o software cliente da OGC API seja mais simplificado.</p> <p>O endpoint <code>/conformance</code> indica quais as normas e extens\u00f5es que s\u00e3o suportadas por uma implementa\u00e7\u00e3o da OGC API.</p>"},{"location":"pt/standards/#blocos-de-construcao-da-ogc-api","title":"Blocos de constru\u00e7\u00e3o da OGC API","text":"<p>A abordagem da OGC API permite a modularidade e a \"cria\u00e7\u00e3o de perfis\" de APIs, dependendo dos seus requisitos. Isto significa que pode misturar e combinar diferentes OGC APIs.</p> <p></p> <p>Pode ler mais sobre este t\u00f3pico no website dos blocos de constru\u00e7\u00e3o.</p>"},{"location":"pt/standards/#mais-ogc-apis","title":"Mais OGC APIs","text":"<p>O esfor\u00e7o da OGC API est\u00e1 a evoluir rapidamente. V\u00e1rias normas OGC API est\u00e3o em desenvolvimento e ser\u00e3o implementadas na pygeoapi ao longo do tempo:</p> <ul> <li>Routes fornece acesso a dados de roteamento</li> <li>Styles define uma API Web que permite que servidores de mapas, clientes, bem como editores de estilo visual, giram e obtenham estilos</li> <li>3D GeoVolumes facilita a descoberta e o acesso eficientes a conte\u00fado 3D em m\u00faltiplos formatos, com base numa perspetiva centrada no espa\u00e7o</li> <li>Moving Features define uma API que fornece acesso a dados que representam elementos que se movem como corpos r\u00edgidos</li> <li>Joins suporta a jun\u00e7\u00e3o de dados, de m\u00faltiplas fontes, com cole\u00e7\u00f5es de elementos ou diretamente com outros ficheiros de entrada</li> <li>Discrete Global Grid System permite que as aplica\u00e7\u00f5es organizem e acedam a dados organizados de acordo com um Discrete Global Grid System (DGGS)</li> </ul> <p></p>"},{"location":"pt/standards/#ogc-apis-suportadas-pela-pygeoapi","title":"OGC APIs suportadas pela pygeoapi","text":"<p>A pygeoapi implementa v\u00e1rias normas e rascunhos de normas da OGC API. Al\u00e9m disso, \u00e9 certificada em conformidade e at\u00e9 mesmo uma Implementa\u00e7\u00e3o de Refer\u00eancia (RI) para algumas delas. A certifica\u00e7\u00e3o de conformidade \u00e9 importante para remover os riscos de interoperabilidade. As RI s\u00e3o sempre certificadas em conformidade. Do OGC Compliance Testing Program Policies &amp; Procedures 08-134r11:</p> <p>Citation</p> <p>Os Produtos Candidatos que passam em todos os testes de um Pacote de Testes de Conformidade, e que a OGC reviu e certificou como tendo passado nesses testes, s\u00e3o considerados conformes com essa vers\u00e3o da Norma de Implementa\u00e7\u00e3o.</p> <p>Citation</p> <p>Uma Implementa\u00e7\u00e3o de Refer\u00eancia \u00e9 uma c\u00f3pia totalmente funcional e licenciada de um software testado e de marca que passou no teste para uma classe de conformidade associada numa vers\u00e3o de uma Norma de Implementa\u00e7\u00e3o e que est\u00e1 dispon\u00edvel gratuitamente e publicamente para teste atrav\u00e9s de um servi\u00e7o web ou download.</p> Norma Estado na pygeoapi Inclu\u00edda nesta workshop OGC API - Features Refer\u00eancia \u2705 OGC API - Coverages Em implementa\u00e7\u00e3o \u2705 OGC API - Tiles Refer\u00eancia \u2705 OGC API - Maps Em implementa\u00e7\u00e3o \u2705 OGC API - Processes Certificada \u2705 OGC API - Records Em implementa\u00e7\u00e3o \u2705 OGC API - Environmental Data Retrieval Refer\u00eancia \u2705 SpatioTemporal Asset Catalog Em implementa\u00e7\u00e3o OGC API - Routes Planeada OGC API - Styles Planeada OGC API - Moving Features Planeada OGC API - DGGS Planeada <p>Na pr\u00f3xima sec\u00e7\u00e3o, vamos aprofundar as APIs dedicadas relacionadas com tipos espec\u00edficos de informa\u00e7\u00e3o. Ir\u00e1 notar que todas as APIs s\u00e3o combinadas e disponibilizadas atrav\u00e9s de um \u00fanico endpoint da OGC API, gra\u00e7as \u00e0 OGC API - Common.</p>"},{"location":"pt/standards/#openapi","title":"OpenAPI","text":"<p>No centro da OGC API - Common est\u00e1 a iniciativa OpenAPI para ajudar a descrever e documentar uma API. A OpenAPI define a sua estrutura num documento OpenAPI. A OGC API - Common sugere que este documento esteja localizado em <code>/openapi</code>. Com a pygeoapi num navegador, este URL abre uma p\u00e1gina HTML interativa que facilita a consulta \u00e0 API. Acrescente <code>?f=json</code> para ver o documento em JSON. O documento OpenAPI indica que endpoints est\u00e3o dispon\u00edveis no servi\u00e7o, que par\u00e2metros aceita e que tipos de respostas podem ser esperados. O documento OpenAPI \u00e9 um conceito semelhante ao XML de Capacidades (Capabilities) como parte da primeira gera\u00e7\u00e3o de normas OGC Web Service.</p> <p>An\u00e1lise da Especifica\u00e7\u00e3o OpenAPI num navegador</p> <p>Uma abordagem comum para interagir com Open APIs usando JSON \u00e9 usar um programa como o Postman. Tamb\u00e9m existem plugins de navegador que permitem definir pedidos \u00e0 API interativamente. Para o Firefox, descarregue o plugin poster. Para o Chrome e Edge, use o Boomerang. No Boomerang, pode criar pedidos web individuais, mas tamb\u00e9m carregar o documento de especifica\u00e7\u00e3o da open api e interagir com qualquer um dos endpoints anunciados.</p> <p>A comunidade OpenAPI fornece v\u00e1rias ferramentas, como um validador para documentos OAS ou para gerar c\u00f3digo como ponto de partida para o desenvolvimento de clientes.</p>"},{"location":"pt/standards/#normas-de-conteudo-e-formato","title":"Normas de conte\u00fado e formato","text":"<p>O JSON \u00e9 fundamental na pygeoapi, fornecendo um formato que \u00e9 leg\u00edvel por m\u00e1quina e f\u00e1cil de analisar e manusear por software e ferramentas cliente. A OGC API - Common fornece formatos JSON uniformes para os v\u00e1rios endpoints que suporta. Normas espec\u00edficas da OGC API podem especificar formatos de dom\u00ednio espec\u00edfico (por exemplo, GeoJSON para a OGC API - Features, GeoTIFF para a OGC API - Coverages) dependendo do(s) tipo(s) de dados.</p>"},{"location":"pt/standards/#convencoes-especificas-da-pygeoapi","title":"Conven\u00e7\u00f5es espec\u00edficas da pygeoapi","text":"<p>A pygeoapi fornece algumas conven\u00e7\u00f5es que n\u00e3o s\u00e3o apresentadas pelas normas OGC API, no entanto, facilitam algumas funcionalidades e capacidades.</p>"},{"location":"pt/standards/#o-parametro-f","title":"o par\u00e2metro <code>f</code>","text":"<p>O par\u00e2metro <code>f</code> pode ser usado com qualquer endpoint da pygeoapi para especificar um formato de sa\u00edda para um determinado pedido \u00e0 API. Exemplos s\u00e3o <code>f=html</code>, <code>f=json</code>, etc.</p> <p>Usar um navegador web para aceder \u00e0 OGC API</p> <p>Use o seu navegador web para navegar para demo.pygeoapi.io. Um navegador, por defeito, abre qualquer OGC API em HTML (como uma p\u00e1gina web) devido ao cabe\u00e7alho HTTP Accept enviado pelo navegador (<code>text/html</code>). No canto superior direito, ir\u00e1 notar uma liga\u00e7\u00e3o JSON. A liga\u00e7\u00e3o adiciona o par\u00e2metro ao URL: <code>f=json</code>, que \u00e9 um mecanismo da pygeoapi para sobrepor o cabe\u00e7alho HTTP Accept enviado pelo navegador web.</p> <p>Note</p> <p>Ao chamar uma OGC API a partir de javascript, e o objetivo \u00e9 receber JSON, pode usar a conven\u00e7\u00e3o <code>?f=json</code> da pygeoapi, ou a negocia\u00e7\u00e3o de conte\u00fado conforme previsto pela norma; inclua um cabe\u00e7alho HTTP <code>Accept: \"application/json\"</code> no seu pedido.</p> <p>Em jQuery, por exemplo, isto \u00e9 representado pela propriedade dataType:</p> <pre><code>$.ajax({\n    method: \"GET\",\n    url: \"https://demo.pygeoapi.io/master\",\n    dataType: \"json\"\n});\n</code></pre> <p>Ou usando a API fetch nativa:</p> <pre><code>const response = await fetch('https://demo.pygeoapi.io/master', {\n    method: 'GET',\n    headers: {\n        'Accept': 'application/json'\n    }\n});\n</code></pre>"},{"location":"pt/standards/#o-parametro-skipgeometry","title":"o par\u00e2metro <code>skipGeometry</code>","text":"<p>O par\u00e2metro <code>skipGeometry</code> (<code>true|false</code>, o padr\u00e3o \u00e9 <code>false</code>) pode ser usado com o acesso a dados de elementos (features) para facilitar o download de dados vetoriais sem geometria, se desejado.</p>"},{"location":"pt/standards/#resumo","title":"Resumo","text":"<p>As normas s\u00e3o uma pedra angular da pygeoapi e permitir-lhe-\u00e3o publicar os seus dados de forma eficiente e com uma baixa barreira para os utilizadores. Agora, vamos \u00e0 a\u00e7\u00e3o: Publicar dados</p>"},{"location":"pt/advanced/","title":"T\u00f3picos avan\u00e7ados","text":"<p>Nesta sec\u00e7\u00e3o, discutiremos t\u00f3picos mais avan\u00e7ados da pygeoapi focados principalmente em estender a pygeoapi atrav\u00e9s de desenvolvimento personalizado e implementa\u00e7\u00e3o.</p> <ul> <li>Suporte multil\u00edngue</li> <li>Suporte CRS</li> <li>Personaliza\u00e7\u00e3o de UI e templating</li> <li>Usar pygeoapi em aplica\u00e7\u00f5es downstream</li> <li>Otimiza\u00e7\u00e3o para motores de busca (SEO)</li> <li>Seguran\u00e7a e controlo de acessos</li> <li>Web Sem\u00e2ntica e Linked Data</li> <li>Implementa\u00e7\u00e3o na cloud</li> <li>Suporte INSPIRE</li> <li>pygeoapi como Ponte para Outros Servi\u00e7os</li> </ul>"},{"location":"pt/advanced/administration/","title":"Administra\u00e7\u00e3o","text":""},{"location":"pt/advanced/administration/#visao-geral","title":"Vis\u00e3o geral","text":"<p>A pygeoapi fornece uma API de administra\u00e7\u00e3o (consulte a documenta\u00e7\u00e3o da pygeoapi para mais informa\u00e7\u00f5es sobre como ativar, configurar e usar) em suporte \u00e0 gest\u00e3o da sua configura\u00e7\u00e3o. A API (n\u00e3o uma OGC API) \u00e9 implementada como um servi\u00e7o RESTful para ajudar a criar, atualizar, substituir ou eliminar v\u00e1rios elementos da configura\u00e7\u00e3o da pygeoapi. Uma UI simples apenas de leitura \u00e9 implementada como parte da API de administra\u00e7\u00e3o.</p>"},{"location":"pt/advanced/administration/#interface-de-utilizador","title":"Interface de utilizador","text":"<p>Por design, a pygeoapi n\u00e3o fornece uma verdadeira interface de utilizador para administrar a configura\u00e7\u00e3o. Dado que a API de administra\u00e7\u00e3o existe, algumas op\u00e7\u00f5es podem ser consideradas para desenvolver uma UI de administra\u00e7\u00e3o:</p> <ul> <li>aut\u00f3noma<ul> <li>aplica\u00e7\u00e3o simples sem conectividade \u00e0 API de administra\u00e7\u00e3o da pygeoapi</li> <li>constru\u00edda a partir do esquema de configura\u00e7\u00e3o da pygeoapi</li> <li>permite copiar uma configura\u00e7\u00e3o j\u00e1 existente da pygeoapi</li> <li>permite gerar configura\u00e7\u00e3o da pygeoapi para copiar/colar numa implementa\u00e7\u00e3o da pygeoapi</li> <li>pode ser implementada em qualquer lugar (por exemplo, GitHub Pages)</li> </ul> </li> <li>integrada<ul> <li>aplica\u00e7\u00e3o conectada a uma implementa\u00e7\u00e3o da pygeoapi</li> <li>constru\u00edda a partir do esquema de configura\u00e7\u00e3o da pygeoapi</li> <li>l\u00ea/escreve uma configura\u00e7\u00e3o da pygeoapi em tempo real atrav\u00e9s da API de administra\u00e7\u00e3o da pygeoapi (controlo de acesso)</li> <li>implementada como parte de uma aplica\u00e7\u00e3o Docker Compose</li> </ul> </li> </ul> <p>Note</p> <p>Tem a sua pr\u00f3pria ideia para uma UI de administra\u00e7\u00e3o da pygeoapi? Conecte-se com a comunidade da pygeoapi para discutir a sua ideia!</p>"},{"location":"pt/advanced/bridges/","title":"Exerc\u00edcio 9 - pygeoapi como ponte para outros servi\u00e7os","text":"<p>Nesta sec\u00e7\u00e3o vamos explorar como a pygeoapi pode ser usada como um interface para re-publicar servi\u00e7os web com distintas interfaces. Estas pontes podem ajudar organiza\u00e7\u00f5es a migrar de OWS para OGC API.</p>"},{"location":"pt/advanced/bridges/#publicar-wfs-como-ogc-api-features","title":"Publicar WFS como OGC API - Features","text":"<p>Um caso de uso importante para a pygeoapi \u00e9 fornecer uma interface OGC API - Features sobre endpoints Web Feature Service (WFS)  ou ESRI FeatureServer existentes. Neste cen\u00e1rio, diminui a barreira de acesso e aumenta a usabilidade de servi\u00e7os existentes para  uma audi\u00eancia mais ampla. Vamos configurar uma API sobre um WFS existente (correndo nos servidores da cidade de Floren\u00e7a).</p> <p>Atualizar a configura\u00e7\u00e3o da pygeoapi</p> <p>Abra a configura\u00e7\u00e3o da pygeoapi num editor de texto.  Encontre a linha <code># START - EXERCISE 8 - WFS Proxy</code>.</p> <p>Adicione uma nova sec\u00e7\u00e3o de conjunto de dados descomentando as linhas at\u00e9 <code># END - EXERCISE 8 - WFS Proxy</code>:</p> <pre><code>suol_epicentri_storici:\n    type: collection\n    title: Epicentros dos principais sismos hist\u00f3ricos\n    description: Localiza\u00e7\u00e3o dos epicentros dos principais sismos hist\u00f3ricos no territ\u00f3rio da Cidade Metropolitana de Floren\u00e7a classificados por ano e intensidade\n    keywords:\n        - sismos\n    links:\n        - type: text/xml\n          rel: canonical\n          title: Epicentros dos principais sismos hist\u00f3ricos\n          href: http://pubblicazioni.cittametropolitana.fi.it/geoserver/territorio/wfs?request=getCapabilities&amp;service=WFS&amp;version=2.0.0\n          hreflang: it\n    extents:\n        spatial:\n            bbox: [10.94, 43.52, 11.65, 44.17]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: feature\n          name: OGR\n          data:\n              source_type: WFS\n              source: WFS:http://pubblicazioni.cittametropolitana.fi.it/geoserver/territorio/wfs?\n              source_capabilities:\n                  paging: True\n              source_options:\n                  OGR_WFS_LOAD_MULTIPLE_LAYER_DEFN: NO\n              gdal_ogr_options:\n                  EMPTY_AS_NULL: NO\n                  GDAL_CACHEMAX: 64\n                  CPL_DEBUG: NO\n          id_field: cpti_id\n          crs:\n            - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            - http://www.opengis.net/def/crs/EPSG/0/4258\n            - http://www.opengis.net/def/crs/EPSG/0/3857\n            - http://www.opengis.net/def/crs/EPSG/0/3003\n          storage_crs: http://www.opengis.net/def/crs/EPSG/0/3003\n          title_field: d\n          layer: territorio:suol_epicentri_storici\n</code></pre> <p>Guarde o ficheiro e reinicie o Docker Compose. Navegue para http://localhost:5000/collections para avaliar se o novo conjunto de dados foi publicado.</p> <p>Note estes importantes excertos de configura\u00e7\u00e3o sob <code>providers</code>:</p> <ul> <li> <p>Usamos o Fornecedor OGR da pygeoapi.  Este \u00e9 o backend mais vers\u00e1til da pygeoapi para suportar numerosos formatos. Usar a biblioteca GDAL/OGR (bindings Python) permite \u00e0 pygeoapi conectar-se a cerca de 80+ Formatos Vetoriais. Pod\u00edamos ter usado o Fornecedor <code>OGR</code> em vez do Fornecedor <code>SQLiteGPKG</code> acima no exerc\u00edcio <code>osm_places-vec</code> acima.</p> </li> <li> <p><code>storage_crs</code> denota o CRS (Sistema de Refer\u00eancia de Coordenadas) no qual o conjunto de dados \u00e9 armazenado (o padr\u00e3o \u00e9 CRS84, ou seja, 'longitude, latitude') </p> </li> <li><code>crs</code> \u00e9 um array de CRSs que podem ser especificados para as Funcionalidades serem devolvidas (par\u00e2metro <code>crs=</code>), ou para a sua bounding box (par\u00e2metro <code>bbox-crs=</code>). O padr\u00e3o tamb\u00e9m \u00e9 CRS84.</li> </ul> <p>O suporte CRS permite efetivamente \u00e0 pygeoapi reprojetar os dados do seu CRS de armazenamento (aqui EPSG:3003) de acordo com OGC API - Features - Part 2: Coordinate Reference Systems by Reference. A sec\u00e7\u00e3o Avan\u00e7ada desta workshop elaborar\u00e1 o suporte CRS da pygeoapi.</p>"},{"location":"pt/advanced/bridges/#publicar-wms-como-ogc-api-maps","title":"Publicar WMS como OGC API - Maps","text":"<p>Podemos usar o provider/fornecedor WMSFacade da pygeoapi para publicar interfaces OGC Web Map Service (WMS) como OGC API - Maps.</p> <p>Vamos configurar uma API sobre um WMS existente no Servidor de Demonstra\u00e7\u00e3o MapServer:</p> <p>https://demo.mapserver.org/cgi-bin/msautotest</p> <p>Note</p> <p>Sinta-se \u00e0 vontade para usar um WMS \u00e0 sua escolha!</p> <p>Atualizar a configura\u00e7\u00e3o da pygeoapi</p> <p>Abra a configura\u00e7\u00e3o da pygeoapi num editor de texto.  Encontre a linha <code>## START - EXERCISE 8 - WMS Proxy</code>.</p> <p>Adicione uma nova sec\u00e7\u00e3o de conjunto de dados descomentando as linhas at\u00e9 <code>## END - EXERCISE 8 - WMS Proxy</code>:</p> <p>Certifique-se de manter a indenta\u00e7\u00e3o YAML adequada.</p> <pre><code>wms-facade-demo:\n    type: collection\n    title: Demonstra\u00e7\u00e3o WMS Facade\n    description: Demonstra\u00e7\u00e3o WMS Facade\n    keywords:\n        - WMS facade\n    links:\n        - type: text/html\n          rel: canonical\n          title: MapServer\n          href: https://mapserver.org\n          hreflang: en\n    extents:\n        spatial:\n            bbox: [-180,-90,180,90]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: map\n          name: WMSFacade\n          data: https://demo.mapserver.org/cgi-bin/msautotest\n          options:\n              layer: world_latlong\n              style: default\n          format:\n              name: png\n              mimetype: image/png\n</code></pre> <p>Execute os seguintes pedidos no seu navegador web:</p> <ul> <li>mapa padr\u00e3o: http://localhost:5000/collections/wms-facade-demo/map?f=png</li> <li>largura/altura espec\u00edficas: http://localhost:5000/collections/wms-facade-demo/map?f=png&amp;width=800&amp;height=600</li> <li>\u00e1rea de interesse espec\u00edfica (bbox do Canad\u00e1): http://localhost:5000/collections/wms-facade-demo/map?f=png&amp;width=800&amp;height=600&amp;bbox=-142,42,-52,84</li> </ul> <p></p> <p>Tip</p> <p>Experimente com os seus pr\u00f3prios valores de bbox e largura/altura!</p>"},{"location":"pt/advanced/bridges/#publicar-csw-como-ogc-api-records","title":"Publicar CSW como OGC API - Records","text":"<p>Nesta sec\u00e7\u00e3o veremos como publicar Catalogue Service for the Web (CSW) como OGC API - Records. Para isso, usaremos o servi\u00e7o CSW pycsw OGC CITE demo.</p> <p>Atualizar a configura\u00e7\u00e3o da pygeoapi</p> <p>Abra a configura\u00e7\u00e3o da pygeoapi num editor de texto.  Encontre a linha <code># START - EXERCISE 8 - CSW Proxy</code>.</p> <p>Adicione uma nova sec\u00e7\u00e3o de conjunto de dados descomentando as linhas at\u00e9 <code># END - EXERCISE 8 - CSW Proxy</code>:</p> <pre><code>cite_demo:\n    type: collection\n    title: pycsw OGC CITE demo e Implementa\u00e7\u00e3o de Refer\u00eancia\n    description: pycsw \u00e9 uma implementa\u00e7\u00e3o de servidor OARec e OGC CSW escrita em Python. O pycsw implementa totalmente a OGC API - Records e a OpenGIS Catalogue Service Implementation Specification (Catalogue Service for the Web). O desenvolvimento inicial come\u00e7ou em 2010 (anunciado mais formalmente em 2011). O projeto \u00e9 certificado OGC Compliant, e \u00e9 uma Implementa\u00e7\u00e3o de Refer\u00eancia OGC. Desde 2015, o pycsw \u00e9 um Projeto OSGeo oficial. O pycsw permite a publica\u00e7\u00e3o e descoberta de metadados geoespaciais atrav\u00e9s de numerosas APIs (CSW 2/CSW 3, OpenSearch, OAI-PMH, SRU). Reposit\u00f3rios existentes de metadados geoespaciais tamb\u00e9m podem ser expostos, fornecendo um componente de metadados e cat\u00e1logo baseado em normas de infraestruturas de dados espaciais. O pycsw \u00e9 Open Source, lan\u00e7ado sob uma licen\u00e7a MIT, e executa em todas as principais plataformas (Windows, Linux, Mac OS X)\n    keywords:\n        - ogc\n        - cite\n        - conformidade\n        - interoperabilidade\n    extents:\n        spatial:\n            bbox: [-180,-90,180,90]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: record\n          name: CSWFacade\n          data: https://demo.pycsw.org/cite/csw\n          id_field: identifier\n          time_field: datetime\n          title_field: title\n</code></pre> <p>Pode explorar a cole\u00e7\u00e3o de cat\u00e1logo com proxy usando estes endpoints:</p> <ul> <li>p\u00e1gina de metadados da cole\u00e7\u00e3o: http://localhost:5000/collections/cite_demo</li> <li>lista de registos: http://localhost:5000/collections/cite_demo/items</li> <li>registo: http://localhost:5000/collections/cite_demo/items/urn:uuid:19887a8a-f6b0-4a63-ae56-7fba0e17801f</li> </ul> <p>Tip</p> <p>Lembre-se de que pode usar o cliente QGIS sugerido aqui para explorar esta API.</p>"},{"location":"pt/advanced/bridges/#publicar-sensorthings-api-como-ogc-api-features","title":"Publicar SensorThings API como OGC API - Features","text":"<p>A norma OGC SensorThings API oferece interfaces RESTful para interconectar dispositivos IoT, dados, de forma aberta e unificada. Embora existam alguns clientes que suportam esta norma, h\u00e1 muito mais que suportam OGC API - Features.</p> <p>A ponte SensorThings da pygeoapi permite fazer proxy das entidades SensorThings (por exemplo: <code>Thing</code> , <code>Sensor</code>, <code>DataStream</code>, <code>ObservedProperty</code> ) em cole\u00e7\u00f5es de funcionalidades.</p> <p>Nesta sec\u00e7\u00e3o veremos como Publicar um <code>Thing</code> da SensorThings API como uma cole\u00e7\u00e3o OGC API - Features, que pode ent\u00e3o ser consumida por v\u00e1rios clientes, como os listados aqui</p> <p>Atualizar a configura\u00e7\u00e3o da pygeoapi</p> <p>Abra a configura\u00e7\u00e3o da pygeoapi num editor de texto.  Encontre a linha <code># START - EXERCISE 8 - SensorThings Proxy</code>.</p> <p>Adicione uma nova sec\u00e7\u00e3o de conjunto de dados descomentando as linhas at\u00e9 <code># END - EXERCISE 8 - SensorThings Proxy</code>:</p> <pre><code>toronto_bikes:\n    type: collection\n    title: Toronto Bikes SensorThings\n    description: A localiza\u00e7\u00e3o geogr\u00e1fica com coordenadas para a esta\u00e7\u00e3o de partilha de bicicletas de Toronto\n    keywords:\n        - sedimentos\n    extents:\n        spatial:\n            bbox: [-180,-90,180,90]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: feature\n          name: SensorThings\n          data: https://toronto-bike-snapshot.sensorup.com/v1.0/\n          entity: Things\n</code></pre>"},{"location":"pt/advanced/cloud/","title":"Implementa\u00e7\u00e3o na cloud","text":"<p>A implementa\u00e7\u00e3o em infraestruturas cloud e conceitos como Microsservi\u00e7os e Twelve-Factor apresentam requisitos espec\u00edficos para como o software \u00e9 projetado e implementado. A pygeoapi suporta estes conceitos, tendo uma pegada baixa em CPU e mem\u00f3ria, e n\u00e3o persiste estado do utilizador, sendo portanto capaz de escalar sem riscos.</p>"},{"location":"pt/advanced/cloud/#pygeoapi-e-docker","title":"pygeoapi e Docker","text":"<p>Uma imagem Docker est\u00e1 dispon\u00edvel para a pygeoapi. Pode executar a imagem localmente como:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -p 5000:80 geopython/pygeoapi:latest\n</code></pre> </p> <p> <pre><code>docker run -p 5000:80 geopython/pygeoapi:latest\n</code></pre> </p> <p>Rever o Dockerfile da pygeoapi</p> <p>Note no Dockerfile da pygeoapi como o ficheiro open api \u00e9 gerado como parte do script de arranque do Docker. </p> <p>Numa configura\u00e7\u00e3o t\u00edpica, substituir-se-ia o ficheiro de configura\u00e7\u00e3o padr\u00e3o da pygeoapi na imagem por um personalizado e incluir a pasta de dados:</p> <p>usar configura\u00e7\u00e3o personalizada</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -p 5000:80 \\ \n-v $(pwd)/pygeoapi-config.yml:/pygeoapi/local.config.yml \\\n-v $(pwd)/geodata:/geodata https://hub.docker.com/r/geopython/pygeoapi:latest\n</code></pre> </p> <p> <pre><code>docker run -p 5000:80 -v ${pwd}/pygeoapi-config.yml:/pygeoapi/local.config.yml -v ${pwd}/geodata:/geodata https://hub.docker.com/r/geopython/pygeoapi:latest\n</code></pre> </p> <p>Alternativamente, pode construir uma nova imagem Docker incluindo tanto a configura\u00e7\u00e3o como os dados para o servi\u00e7o. </p> <pre><code>FROM geopython/pygeoapi:latest\nCOPY ./my.config.yml /pygeoapi/local.config.yml\n</code></pre> <p>Pode ter notado que o ficheiro de configura\u00e7\u00e3o da pygeoapi inclui uma refer\u00eancia ao endpoint no qual a pygeoapi \u00e9 publicada. Esta configura\u00e7\u00e3o deve corresponder ao endpoint p\u00fablico do servi\u00e7o (dom\u00ednio, caminho e porta).</p> <p>Por defeito, a imagem Docker da pygeoapi executar\u00e1 a partir do caminho raiz <code>/</code>. Se precisar de executar a partir de um sub-caminho e ter todos os URLs internos corretos pode definir a vari\u00e1vel de ambiente <code>SCRIPT_NAME</code>.</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -p 5000:80 -e SCRIPT_NAME='/mypygeoapi' \\\n-v $(pwd)/my.config.yml:/pygeoapi/local.config.yml -it geopython/pygeoapi\n# navegue para http://localhost:5000/mypygeoapi\n</code></pre> </p> <p> <pre><code>docker run -p 5000:80 -e SCRIPT_NAME='/mypygeoapi' -v ${pwd}/my.config.yml:/pygeoapi/local.config.yml -it geopython/pygeoapi\n# navegue para http://localhost:5000/mypygeoapi\n</code></pre> </p>"},{"location":"pt/advanced/cloud/#resumo","title":"Resumo","text":"<p>Parab\u00e9ns! Agora pode implementar a pygeoapi como um servi\u00e7o cloud native.</p>"},{"location":"pt/advanced/crs/","title":"Suporte CRS","text":"<p>A partir da vers\u00e3o 0.15.0, a pygeoapi suporta totalmente OGC API - Features - Part 2: Coordinate Reference Systems by Reference. Isto permite a importa\u00e7\u00e3o e exporta\u00e7\u00e3o de quaisquer dados de acordo com proje\u00e7\u00f5es dedicadas. Uma \"proje\u00e7\u00e3o\" \u00e9 especificada com um identificador de Sistema de Refer\u00eancia de Coordenadas (CRS). Estes est\u00e3o em formatos URI como <code>http://www.opengis.net/def/crs/OGC/1.3/CRS84</code> (basicamente WGS84 em ordem de eixo longitude, latitude) ou o formato \"OpenGIS\" como <code>http://www.opengis.net/def/crs/EPSG/0/4258</code>. Note que o formato \"EPSG:\" como <code>EPSG:4326</code> est\u00e1 fora do \u00e2mbito da norma OGC.</p> <p>Em particular, o suporte CRS permite o seguinte:</p> <ul> <li>especificar o CRS no qual os dados s\u00e3o armazenados, na pygeoapi a op\u00e7\u00e3o de configura\u00e7\u00e3o <code>storageCRS</code> </li> <li>especificar a lista de CRSs nos quais os dados de Funcionalidades podem ser recuperados, na pygeoapi a op\u00e7\u00e3o de configura\u00e7\u00e3o <code>crs</code></li> <li>publicar estes CRSs nos metadados da cole\u00e7\u00e3o</li> <li>o par\u00e2metro de consulta <code>crs=</code> para uma cole\u00e7\u00e3o ou item de cole\u00e7\u00e3o</li> <li>o par\u00e2metro de consulta <code>bbox-crs=</code> para indicar que o par\u00e2metro <code>bbox=</code> est\u00e1 codificado nesse CRS</li> <li>o cabe\u00e7alho de resposta HTTP <code>Content-Crs</code> denota o CRS da(s) Funcionalidade(s) nos dados devolvidos</li> </ul> <p>Ent\u00e3o, embora o GeoJSON exija WGS84 em ordem longitude, latitude, o cliente e servidor podem ainda assim concordar com outros CRSs.</p> <p>Por baixo, a pygeoapi usa o bem conhecido wrapper Python pyproj para a biblioteca PROJ.</p> <p>Leia mais na documenta\u00e7\u00e3o da pygeoapi no Cap\u00edtulo CRS.</p>"},{"location":"pt/advanced/crs/#exercicio","title":"Exerc\u00edcio","text":"<p>Adicionar suporte CRS \u00e0s cole\u00e7\u00f5es pygeoapi para o tipo <code>provider</code> <code>feature</code> \u00e9 t\u00e3o simples como por exemplo estender a configura\u00e7\u00e3o do Exerc\u00edcio 2 com este fragmento:</p> <pre><code>  crs:\n      - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n      - http://www.opengis.net/def/crs/EPSG/0/4258\n      - http://www.opengis.net/def/crs/EPSG/0/3857\n      - http://www.opengis.net/def/crs/EPSG/0/4326\n  storage_crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n</code></pre> <p>Ordem</p> <p>A ordem dos eixos (s\u00e3o coordenadas em ordem longitude, latitude ou latitude, longitude?) nas proje\u00e7\u00f5es \u00e9 frequentemente uma fonte de confus\u00e3o.  No entanto, o formato URI \u00e9 bastante claro sobre isto, pelo menos mais do que o formato <code>EPSG:</code>. Ent\u00e3o http://www.opengis.net/def/crs/OGC/1.3/CRS84 \u00e9 ordem longitude, latitude, enquanto http://www.opengis.net/def/crs/EPSG/0/4326 \u00e9 ordem latitude, longitude.</p> <p>Na configura\u00e7\u00e3o abaixo, indicamos basicamente que os dados s\u00e3o armazenados em WGS84 (ordem de eixo longitude, latitude) e podem ser recuperados em CRSs como <code>http://www.opengis.net/def/crs/EPSG/0/4258</code> (ETRS89 ordem de eixo latitude, longitude) etc.</p> <p>Adicionar CRS a uma configura\u00e7\u00e3o pygeoapi</p> <p>Abra o ficheiro de configura\u00e7\u00e3o da pygeoapi num editor de texto. Encontre a linha <code># START - EXERCISE 2 - firenze-terrain</code></p> <p>Atualize a sec\u00e7\u00e3o do conjunto de dados com suporte CRS substituindo-a pelo fragmento abaixo:</p> <pre><code>firenze-terrains-vec:\n    type: collection\n    title: Limites administrativos antes de 2014\n    description: Parcelas cadastrais (terrenos) do cadastro. Ag\u00eancia do Territ\u00f3rio; SIT e Redes de Informa\u00e7\u00e3o;\n    keywords:\n        - Parcelas cadastrais\n    links:\n        - type: text/html\n          rel: canonical\n          title: Limites administrativos antes de 2014\n          href: http://dati.cittametropolitana.fi.it/geonetwork/srv/metadata/cmfi:c539d359-4387-4f83-a6f4-cd546b3d8443\n          hreflang: it\n    extents:\n        spatial:\n            bbox: [11.23,43.75,11.28,43.78]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: feature\n          name: SQLiteGPKG\n          data: /data/firenze_terrains.gpkg # colocar caminho correto aqui\n          id_field: fid\n          crs:\n            - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            - http://www.opengis.net/def/crs/EPSG/0/4258\n            - http://www.opengis.net/def/crs/EPSG/0/3857\n            - http://www.opengis.net/def/crs/EPSG/0/4326\n          storage_crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n          title_field: codbo\n          table: firenze_terrains\n</code></pre> <p>Agora vamos inspecionar os metadados da cole\u00e7\u00e3o e recuperar Funcionalidades em v\u00e1rios CRSs. Podemos at\u00e9 fazer isto na interface Swagger, mas usar o navegador \u00e9 bastante r\u00e1pido e claro.</p>"},{"location":"pt/advanced/crs/#metadados","title":"Metadados","text":"<p>Metadados da Cole\u00e7\u00e3o</p> <p>Abra o URL:  http://localhost:5000/collections/firenze-terrains-vec Os seus CRSs configurados s\u00e3o exibidos na parte inferior da p\u00e1gina: \"Reference Systems\" e \"Storage CRS\".</p> <p>Veja estes em formato JSON, tamb\u00e9m na parte inferior:  http://localhost:5000/collections/firenze-terrains-vec?f=json <pre><code>   .\n   .\n   \"crs\":[\n    \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\",\n    \"http://www.opengis.net/def/crs/EPSG/0/4258\",\n    \"http://www.opengis.net/def/crs/EPSG/0/3857\",\n    \"http://www.opengis.net/def/crs/EPSG/0/4326\"\n   ],\n   \"storageCRS\":\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n }\n</code></pre></p>"},{"location":"pt/advanced/crs/#reprojetar-funcionalidades","title":"Reprojetar Funcionalidades","text":"<p>Usar o par\u00e2metro de consulta CRS</p> <p>Abra o URL:  http://localhost:5000/collections/firenze-terrains-vec/items?f=json&amp;crs=http://www.opengis.net/def/crs/EPSG/0/4258</p> <p>Este \u00e9 ETRS89, semelhante a WGS84, mas para o Continente Europeu (Datum) e em ordem lat,lon. Este \u00e9 por exemplo usado no INSPIRE.</p> <p>Veja estes em formato JSON, tamb\u00e9m na parte inferior:</p> <pre><code>\"type\":\"FeatureCollection\",\n  \"features\":[\n      {\n          \"type\":\"Feature\",\n          \"geometry\":{\n              \"type\":\"MultiPolygon\",\n              \"coordinates\":[\n                  [\n                      [\n                          [\n                              43.77805936835436,\n                              11.23486287997071\n                          ],\n                          [\n                              43.77809089595012,\n                              11.2348943159564\n                          ],\n                          [\n                              43.77810038978989,\n                              11.23491359066035\n                          ],\n                          [\n                              43.77705757917591,\n                              11.2368990806804\n                          ],\n   .\n   .\n   \"crs\":[\n    \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\",\n    \"http://www.opengis.net/def/crs/EPSG/0/4258\",\n    \"http://www.opengis.net/def/crs/EPSG/0/3857\",\n    \"http://www.opengis.net/def/crs/EPSG/0/4326\"\n   ],\n   \"storageCRS\":\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n }\n</code></pre> <p>Se abrir a consola de desenvolvimento do navegador, pode observar o cabe\u00e7alho de resposta HTTP:</p> <p><code>Content-Crs: &lt;http://www.opengis.net/def/crs/EPSG/0/4258&gt;</code></p> <p>(O URI CRS est\u00e1 sempre entre <code>&lt;</code> <code>&gt;</code>)</p>"},{"location":"pt/advanced/downstream-applications/","title":"Usar a pygeoapi em aplica\u00e7\u00f5es downstream","text":"<p>Embora a pygeoapi seja tipicamente executada como uma aplica\u00e7\u00e3o aut\u00f3noma, tamb\u00e9m foi projetada para permitir uso direto atrav\u00e9s de aplica\u00e7\u00f5es Python externas em v\u00e1rios padr\u00f5es de design diferentes a m\u00faltiplos n\u00edveis. Da documenta\u00e7\u00e3o oficial, o diagrama abaixo fornece uma vis\u00e3o geral de como a pygeoapi \u00e9 projetada e arquitetada:</p> <p></p> <p>H\u00e1 duas formas principais de criar uma aplica\u00e7\u00e3o downstream:</p> <ul> <li>Usar a API principal</li> <li>Estender atrav\u00e9s da interface web das frameworks suportadas out-of-the box</li> </ul>"},{"location":"pt/advanced/downstream-applications/#usar-a-api-principal-diretamente","title":"Usar a API principal diretamente","text":"<p>O ponto de entrada da API Python principal da pygeoapi \u00e9 <code>pygeoapi.api.API</code>, que \u00e9 inicializada com a configura\u00e7\u00e3o da pygeoapi como um <code>dict</code> Python.</p> <p>Note</p> <p>A API principal da pygeoapi permite ao programador gerir a configura\u00e7\u00e3o da pygeoapi de v\u00e1rias formas (ficheiro em disco, armazenamento de objetos, baseado em base de dados, etc.)</p> <p>A partir daqui, os objetos API fornecem v\u00e1rias fun\u00e7\u00f5es, a maioria das quais requer um objeto <code>pygeoapi.api.APIRequest</code> de acordo com a framework web. Exemplos incluem:</p> <ul> <li>Flask</li> <li>Starlette</li> <li>FastAPI</li> <li>Django</li> </ul> <p>Note</p> <p>Consulte a documenta\u00e7\u00e3o oficial para mais informa\u00e7\u00f5es sobre <code>pygeoapi.api.APIRequest</code> (pode at\u00e9 usar o seu pr\u00f3prio objeto de pedido personalizado desde que satisfa\u00e7a os requisitos de interface de <code>pygeoapi.api.APIRequest</code>.</p> <p>Vamos ver como seria uma integra\u00e7\u00e3o API b\u00e1sica, usando Flask como exemplo:</p> <pre><code>from flask import Flask, make_response, request\n\nfrom pygeoapi.api import API\nfrom pygeoapi.util import yaml_load\n\nmy_flask_app = Flask(__name__)\n\nwith open('my-pygeoapi-config.yml') as fh:\n    my_pygeoapi_config = yaml_load(fh)\n\nmy_pygeoapi_api = API(my_pygeoapi_config)\n\n@my_flask_app.route('/my-landing-page-route')\ndef my_def():\n\n    headers, status, content = my_pygeoapi_api.landing_page(request)\n\n    response = make_response(content, status)\n\n    if headers: \n        response.headers = headers\n\n    return response\n</code></pre> <p>Note</p> <p>Consulte a documenta\u00e7\u00e3o oficial para mais informa\u00e7\u00f5es sobre a API Python principal</p>"},{"location":"pt/advanced/downstream-applications/#estender-atraves-de-uma-framework-web","title":"Estender atrav\u00e9s de uma framework web","text":"<p>A pygeoapi pode ser instalada e usada ao n\u00edvel do roteamento web como uma depend\u00eancia no seu projeto. Esta \u00e9 praticamente a forma mais f\u00e1cil de aproveitar a flexibilidade e a modularidade da sua arquitetura. Uma vez que as interfaces estejam dispon\u00edveis, ent\u00e3o o programador pode usar a framework preferida para servir a aplica\u00e7\u00e3o frontend. Na pr\u00e1tica os seguintes m\u00f3dulos:</p> <ul> <li><code>pygeoapi.flask_app.py</code> para blueprints Flask</li> <li><code>pygeoapi.starlette_app.py</code> para Starlette/FastAPI</li> <li><code>pygeoapi.django_app.py</code> para Django (PR em curso PR)</li> </ul> <p>Alguns exemplos est\u00e3o dispon\u00edveis abaixo para programadores.</p>"},{"location":"pt/advanced/downstream-applications/#exemplos","title":"Exemplos","text":""},{"location":"pt/advanced/downstream-applications/#blueprints-flask","title":"Blueprints Flask","text":"<pre><code>from flask import Flask\n\nfrom pygeoapi.flask_app import BLUEPRINT as pygeoapi_blueprint\n\nmy_flask_app = Flask(__name__, static_url_path='/static')\nmy_flask_app.url_map.strict_slashes = False\n\n# montar todos os endpoints da pygeoapi em /oapi\nmy_flask_app.register_blueprint(pygeoapi_blueprint, url_prefix='/oapi')\n\n\n@my_flask_app.route('/')\ndef home():\n    return '&lt;p&gt;home page&lt;/p&gt;'\n</code></pre>"},{"location":"pt/advanced/downstream-applications/#starlette-e-fastapi","title":"Starlette e FastAPI","text":"<pre><code>import uvicorn\nfrom fastapi import FastAPI\nfrom fastapi.exceptions import RequestValidationError\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\nfrom starlette.middleware.cors import CORSMiddleware\n\nfrom pygeoapi.starlette_app import app as pygeoapi_app\n\n\ndef create_app() -&gt; FastAPI:\n    \"\"\"Gerir cria\u00e7\u00e3o da aplica\u00e7\u00e3o.\"\"\"\n    app = FastAPI(title=\"my_pygeoapi\", root_path=\"\", debug=True)\n\n    # Definir todas as origens CORS habilitadas\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=[\"*\"],\n        allow_credentials=True,\n        allow_methods=[\"*\"],\n        allow_headers=[\"*\"],\n    )\n\n    @app.exception_handler(StarletteHTTPException)\n    async def custom_http_exception_handler(request, e):\n        return await http_exception_handler(request, e)\n\n    @app.exception_handler(RequestValidationError)\n    async def custom_validation_exception_handler(request, e):\n        return await request_validation_exception_handler(request, e)\n\n    # montar todos os endpoints da pygeoapi em /oapi\n    app.mount(path=\"/oapi\", app=pygeoapi_app)\n\n    return app\n\napp = create_app()\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, port=5000)\n</code></pre>"},{"location":"pt/advanced/i18n/","title":"Suporte multil\u00edngue","text":"<p>A pygeoapi suporta multilingualismo a tr\u00eas n\u00edveis:</p> <ul> <li>Na configura\u00e7\u00e3o da pygeoapi pode fornecer t\u00edtulos e resumos do servi\u00e7o e cole\u00e7\u00f5es em m\u00faltiplas linguagens.</li> <li>Um conjunto de strings de texto traduz\u00edveis que s\u00e3o traduzidas e introduzidas como parte dos formatos de sa\u00edda JSON e HTML. As tradu\u00e7\u00f5es s\u00e3o geridas pela framework Babel</li> <li>Nomes/valores de colunas em conjuntos de dados baseados em funcionalidades. Se um conjunto de dados cont\u00e9m colunas em m\u00faltiplas l\u00ednguas, a pygeoapi tentar\u00e1 devolver respostas de dados na l\u00edngua solicitada</li> </ul> <p>Note</p> <p>As mensagens de erro n\u00e3o s\u00e3o traduzidas, para facilitar copy-paste do erro para o  stackoverflow e  GitHub issues.</p> <p>A negocia\u00e7\u00e3o de l\u00edngua \u00e9 acionada pelo cabe\u00e7alho HTTP <code>Accept-Language</code> enviado pelo cliente, e pode sempre ser substitu\u00edda com o par\u00e2metro URL <code>?lang=fr</code>.</p>"},{"location":"pt/advanced/i18n/#configuracao-multilingue","title":"Configura\u00e7\u00e3o multil\u00edngue","text":"<p>Na configura\u00e7\u00e3o da pygeoapi podemos indicar as l\u00ednguas suportadas pela inst\u00e2ncia. A primeira l\u00edngua \u00e9 a l\u00edngua padr\u00e3o. Para a maioria das propriedades de configura\u00e7\u00e3o textuais podemos fornecer uma tradu\u00e7\u00e3o em l\u00ednguas alternativas.</p> <pre><code>lakes:\n  type: collection\n  title:\n      en: Large Lakes\n      pt: Grandes Lagos\n  description:\n      en: lakes of the world, public domain\n      pt: lagos do mundo, dom\u00ednio p\u00fablico\n  keywords:\n      en:\n          - lakes\n          - water bodies\n      pt:\n          - lagos\n          - corpos de \u00e1gua\n</code></pre>"},{"location":"pt/advanced/i18n/#strings-de-texto-dentro-de-templates-html-jinja2","title":"Strings de texto dentro de templates HTML Jinja2","text":"<p>A maioria das strings de texto traduz\u00edveis existe dentro dos templates HTML Jinja2. As strings de texto a serem traduzidas s\u00e3o colocadas numa tag <code>trans</code>, da seguinte forma:</p> <pre><code>&lt;title&gt;{% trans %}Page title{% endtrans %}&lt;/title&gt;\n</code></pre> <p>O Babel fornece um utilit\u00e1rio que extrai todas as chaves a serem traduzidas dos templates para um \u00fanico ficheiro <code>.pot</code>. </p> Linux/MacWindows (PowerShell) <p> <pre><code>pybabel extract -F babel-mapping.ini -o locale/messages.pot ./\n</code></pre> </p> <p> <pre><code>pybabel extract -F babel-mapping.ini -o locale/messages.pot ./\n</code></pre> </p> <p>O ficheiro <code>.pot</code> resultante \u00e9 usado para criar ou atualizar ficheiros <code>.po</code> existentes, que existem para cada l\u00edngua, contendo as tradu\u00e7\u00f5es atuais.</p> Linux/MacWindows (PowerShell) <p> <pre><code>pybabel init -d locale -l it -i locale/messages.pot\n</code></pre> </p> <p> <pre><code>pybabel init -d locale -l it -i locale/messages.pot\n</code></pre> </p> <p>Os ficheiros <code>.po</code> s\u00e3o armazenados no reposit\u00f3rio de c\u00f3digo fonte da pygeoapi no GitHub. Pode criar um Pull Request para adicionar ou atualizar as suas linguagens favoritas. Os ficheiros <code>.po</code> tamb\u00e9m podem ser adicionados a software de tradu\u00e7\u00e3o como transifex.com. </p> <p>Editar um ficheiro <code>.po</code></p> <p>Abra um ficheiro <code>.po</code> da pasta locale num editor de texto. Edite alguns valores. Guarde o ficheiro e reinicie o servi\u00e7o. Verifique se o conte\u00fado atualizado est\u00e1 dispon\u00edvel. Tamb\u00e9m pode tentar adicionar uma nova chave a um template e traduzi-la atrav\u00e9s do mecanismo <code>.po</code>.</p>"},{"location":"pt/advanced/i18n/#anotar-a-lingua-das-colunas-de-dados","title":"Anotar a l\u00edngua das colunas de dados","text":"<p>A pygeoapi inclui um mecanismo para influenciar as respostas da API baseado na l\u00edngua solicitada. Se o nosso servi\u00e7o opera com requisitos multil\u00edngues, pode fazer sentido adicionar colunas textuais em m\u00faltiplas l\u00ednguas. Por exemplo, na configura\u00e7\u00e3o da pygeoapi podemos ent\u00e3o indicar qual coluna deve ser usada como o campo t\u00edtulo, para qual l\u00edngua. </p> <p>Publicar um conjunto de dados multil\u00edngue</p> <p>Para este workshop, prepar\u00e1mos um conjunto de dados multil\u00edngue de <code>hotspots de wifi gratuitos em Floren\u00e7a</code> (<code>workshop/exercises/data/free-wifi-florence.csv</code>). Vamos adicionar o conjunto de dados \u00e0 configura\u00e7\u00e3o da pygeoapi usando o provedor CSV. Vamos adicionar uma configura\u00e7\u00e3o title-field com para cada coluna traduzida a l\u00edngua relevante.</p> <pre><code>data: /data/free-wifi-florence.csv\nid_field: id\ntitle_field: \n  en: name-en\n  it: name-it\n  de: name-de\n</code></pre> <p>Vamos testar a configura\u00e7\u00e3o navegando para a p\u00e1gina de itens da cole\u00e7\u00e3o e mudando a l\u00edngua anexando <code>?lang=it</code>, <code>?lang=de</code> ao URL.</p>"},{"location":"pt/advanced/i18n/#resumo","title":"Resumo","text":"<p>Parab\u00e9ns! Personaliz\u00e1mos a pygeoapi para suportar m\u00faltiplas l\u00ednguas.</p>"},{"location":"pt/advanced/inspire/","title":"Suporte INSPIRE","text":"<p>INSPIRE \u00e9 uma diretiva europeia sobre partilha de dados no dom\u00ednio ambiental. Os estados membros da UE  investiram quase 20 anos de esfor\u00e7o para harmonizar dados no dom\u00ednio ambiental e public\u00e1-los usando normas OGC.  A diretiva est\u00e1 no final do seu tempo de vida, mas a expectativa \u00e9 que as conven\u00e7\u00f5es da diretiva INSPIRE sejam adotadas  por diretivas futuras, como as diretivas do pacto verde e dados abertos. </p> <p>Nos \u00faltimos 20 anos, o panorama das TI mudou consideravelmente. O INSPIRE acompanhou estes desenvolvimentos adotando uma  s\u00e9rie de Boas Pr\u00e1ticas que substituem as  Diretrizes T\u00e9cnicas originais.</p> <p>Algumas das boas pr\u00e1ticas recentes e futuras focam-se nos desenvolvimentos no dom\u00ednio OGC API.  Uma boa pr\u00e1tica j\u00e1 foi adotada sobre fornecer  servi\u00e7os de descarregamento usando OGC API - Features  e outras est\u00e3o em prepara\u00e7\u00e3o, como o  servi\u00e7o de descoberta usando OGC API - Records.  Estes desenvolvimentos tornam a pygeoapi uma op\u00e7\u00e3o interessante  para fornecer servi\u00e7os INSPIRE.</p>"},{"location":"pt/advanced/inspire/#servicos-inspire-e-a-sua-alternativa-ogc-api","title":"Servi\u00e7os INSPIRE e a sua alternativa OGC API","text":"<p>Os servi\u00e7os INSPIRE s\u00e3o tipicamente categorizados em servi\u00e7os de visualiza\u00e7\u00e3o, servi\u00e7os de descarregamento e servi\u00e7os de descoberta.  Os servi\u00e7os de descarregamento s\u00e3o ainda divididos em fontes Vetoriais, fontes de Cobertura e fontes de Sensores. A iniciativa OGC API fornece as APIs relacionadas para cada tipo de servi\u00e7o. A tabela abaixo destaca para cada tipo de servi\u00e7o a recomenda\u00e7\u00e3o das Diretrizes T\u00e9cnicas e as Boas Pr\u00e1ticas relevantes. </p> Tipo de servi\u00e7o TG OGC API Estado da boa pr\u00e1tica Servi\u00e7o de descoberta CSW OGC API - Records Em prepara\u00e7\u00e3o Servi\u00e7o de visualiza\u00e7\u00e3o WM(T)S OGC API - Maps / OGC API - Tiles N\u00e3o agendado Em prepara\u00e7\u00e3o Servi\u00e7o de descarregamento - Vetor WFS OGC API - Features Adotada Servi\u00e7o de descarregamento - Cobertura WCS OGC API - Coverages / STAC <sup>1</sup> N\u00e3o agendado Em prepara\u00e7\u00e3o Servi\u00e7o de descarregamento - Sensor SOS OGC API - EDR / Sensorthings API <sup>2</sup> N\u00e3o agendado Adotada <p>Note</p> <p>Ao adotar Boas Pr\u00e1ticas, considere que a documenta\u00e7\u00e3o e ferramentas para valida\u00e7\u00e3o ainda s\u00e3o limitadas.  Al\u00e9m disso, o Portal Geo INSPIRE pode ainda n\u00e3o estar pronto para recolher registos de um endpoint OGC API - Records. </p> <p>Publicar documentos de metadados como um servi\u00e7o de descoberta INSPIRE</p> <p>Neste exerc\u00edcio vamos importar uma pasta de documentos de metadados para uma base de dados TinyDB e vamos configurar a base de dados como um endpoint OGC API - Records.  Descarregue o ficheiro zip 'inspire-records.zip' do reposit\u00f3rio. Extraia o ficheiro zip. A pasta <code>/tests</code> cont\u00e9m um script  load_tinydb_records.py. O script tem 2 par\u00e2metros:</p> Linux/MacWindows (PowerShell) <p> <pre><code>python3 load_tinydb_records.py &lt;path/to/xml-files&gt; &lt;output.db&gt;\n</code></pre> </p> <p> <pre><code>python3 load_tinydb_records.py &lt;path/to/xml-files&gt; &lt;output.db&gt;\n</code></pre> </p> <p>Agora configure TinyDB como fornecedor para OGC API - Records. Reinicie o servi\u00e7o e verifique o resultado. Verifique tamb\u00e9m a sa\u00edda XML de alguns dos registos. </p>"},{"location":"pt/advanced/inspire/#ogc-api-e-os-modelos-de-dados-inspire","title":"OGC API e os modelos de dados INSPIRE","text":"<p>A maioria dos modelos de dados INSPIRE tem uma estrutura hier\u00e1rquica, que n\u00e3o \u00e9 comum na comunidade OGC API orientada para GeoJSON.  Em teoria \u00e9 poss\u00edvel fornecer GML hier\u00e1rquico a partir de um endpoint OGC API, mas ainda n\u00e3o h\u00e1 muitas experi\u00eancias atualmente. Duas iniciativas podem trazer melhorias a este aspeto:</p> <ul> <li>a pygeoapi facilita a configura\u00e7\u00e3o de uma codifica\u00e7\u00e3o JSON-LD usando uma ontologia arbitr\u00e1ria. A  boa pr\u00e1tica sobre web sem\u00e2ntica fornece alguns dos modelos de dados numa ontologia RDF</li> <li>A boa pr\u00e1tica sobre codifica\u00e7\u00f5es alternativas sugere uma  abordagem para publicar conjuntos de dados usando um modelo de dados relacional como GeoPackage, que se adequa melhor \u00e0 comunidade OGC API</li> </ul>"},{"location":"pt/advanced/inspire/#ogc-api-como-um-registo-de-listas-de-codigos","title":"OGC API como um registo de listas de c\u00f3digos","text":"<p>Um caso de uso t\u00edpico no INSPIRE \u00e9 a op\u00e7\u00e3o de estender uma lista de c\u00f3digos INSPIRE para corresponder a um requisito local. Para este caso de uso, a  lista de c\u00f3digos estendida tem de ser publicada num registo. A OGC API - Common fornece mecanismos para publicar listas de conceitos como itens  em cole\u00e7\u00f5es. A pygeoapi tamb\u00e9m fornece um mecanismo para anunciar os conceitos usando a ontologia SKOS atrav\u00e9s da sua codifica\u00e7\u00e3o JSON-LD  . Na coincid\u00eancia de um conceito ter uma propriedade de geometria, a lista de c\u00f3digos pode at\u00e9 ser publicada como OGC API - Features  (num mapa).</p> <p>Publicar uma lista de c\u00f3digos via OGC API</p> <p>Uma lista de c\u00f3digos de tipos de solo alem\u00e3 foi disponibilizada em formato CSV em <code>workshop/exercises/data/bodenart.en.csv</code>. Use o fornecedor CSV para publicar este conjunto de dados na pygeoapi. Que URL usaria para referenciar um conceito na lista publicada?</p> <pre><code>SoilTypes:\n    type: collection\n    title: Tipos de solo da Alemanha\n    description: Bodenarten auf Basis der Bodenkundlichen Kartieranleitung 5. Auflage (KA5)\n    keywords:\n        - soiltype\n    links:\n        - type: text/html\n          rel: canonical\n          title: Tipos de solo da Alemanha\n          href: https://registry.gdi-de.org/codelist/de.bund.thuenen/bodenart\n          hreflang: de\n    extents:\n        spatial:\n            bbox: [0,0,0,0]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: feature\n          name: CSV\n          data: /data/bodenart.en.csv\n          id_field: Label\n          geometry:\n              x_field: x\n              y_field: y\n</code></pre>"},{"location":"pt/advanced/inspire/#resumo","title":"Resumo","text":"<p>Parab\u00e9ns! Trabalhou com a pygeoapi para conformidade INSPIRE</p> <ol> <li> <p>A Sensorthings API n\u00e3o \u00e9 uma norma OGC API e atualmente n\u00e3o \u00e9 suportada pela pygeoapi. \u00c9 listada aqui para completude\u00a0\u21a9</p> </li> <li> <p>STAC n\u00e3o \u00e9 uma norma OGC API mas \u00e9 suportada pela pygeoapi\u00a0\u21a9</p> </li> </ol>"},{"location":"pt/advanced/security-access-control/","title":"Seguran\u00e7a e controlo de acessos","text":""},{"location":"pt/advanced/security-access-control/#visao-geral","title":"Vis\u00e3o geral","text":"<p>A seguran\u00e7a em geral \u00e9 um t\u00f3pico amplo e complexo, afetando todo o ciclo de vida de desenvolvimento. \u00c9 recomendado seguir as melhores pr\u00e1ticas de seguran\u00e7a durante todas as fases de desenvolvimento como design, codifica\u00e7\u00e3o e implementa\u00e7\u00e3o. Nesta workshop focaremos apenas na seguran\u00e7a de API e controlo de acessos, em vez da gama completa de t\u00f3picos de seguran\u00e7a de aplica\u00e7\u00f5es.</p>"},{"location":"pt/advanced/security-access-control/#seguranca-de-api","title":"Seguran\u00e7a de API","text":"<p>A seguran\u00e7a de API \u00e9 todo o processo para proteger APIs de ataques. \u00c9 parte das diretrizes de seguran\u00e7a mais gerais que s\u00e3o tratadas no documento OWASP Top Ten. Portanto, essas recomenda\u00e7\u00f5es ainda se aplicam.</p> <p>Seguran\u00e7a de Aplica\u00e7\u00f5es</p> <p>O documento Top Ten do Open Web Application Security Project (OWASP) \u00e9 uma ferramenta muito boa para garantir o m\u00ednimo contra os riscos de seguran\u00e7a e gerir amea\u00e7as cr\u00edticas que mais provavelmente afetam o seu c\u00f3digo.</p>"},{"location":"pt/advanced/security-access-control/#controlo-de-acessos","title":"Controlo de acessos","text":"<p>O controlo de acessos \u00e9 outra parte fundamental do Open Web Application Security Project e aborda a Gest\u00e3o de Identidade e Acesso (IAM) de uma API. A IAM consiste em duas partes diferentes de um fluxo de seguran\u00e7a:</p> <ul> <li>Autentica\u00e7\u00e3o (AuthN) verifica a identidade do utilizador para permitir ou negar acesso subsequente (ver pr\u00f3ximo)</li> <li>Autoriza\u00e7\u00e3o (AuthZ) valida permiss\u00f5es de um utilizador (identidade) para aceder a um recurso. As permiss\u00f5es dessa identidade s\u00e3o verificadas contra as pol\u00edticas de um recurso para (des)permitir acesso a, por exemplo, (partes de) uma API.</li> </ul> <p>Estas partes s\u00e3o geralmente geridas por infraestruturas e solu\u00e7\u00f5es dedicadas que geralmente fornecem a maioria dos requisitos de seguran\u00e7a out-of-the-box.</p> <p>Especifica\u00e7\u00e3o de Seguran\u00e7a OpenAPI</p> <p>A especifica\u00e7\u00e3o OpenAPI tem elementos muito bem definidos para programadores e adotantes. Os mais relevantes s\u00e3o:</p> <ul> <li>Security Scheme Object define os esquemas de seguran\u00e7a que podem ser usados pelas opera\u00e7\u00f5es. Os esquemas suportados s\u00e3o Autentica\u00e7\u00e3o HTTP, uma Chave API, fluxos OAuth2 e OpenID Connect.</li> <li>Security Requirement Object define a lista de esquemas de seguran\u00e7a necess\u00e1rios para executar uma opera\u00e7\u00e3o.</li> </ul>"},{"location":"pt/advanced/security-access-control/#consideracoes-da-pygeoapi","title":"Considera\u00e7\u00f5es da pygeoapi","text":"<p>A pygeoapi ainda n\u00e3o suporta elementos de seguran\u00e7a OpenAPI. A implementa\u00e7\u00e3o futura poderia incluir gera\u00e7\u00e3o do documento OpenAPI da pygeoapi com uma configura\u00e7\u00e3o de seguran\u00e7a, ou gerar a partir de uma aplica\u00e7\u00e3o/solu\u00e7\u00e3o de controlo de acessos conhecida (como fastgeoapi ou pygeoapi-auth).</p> <p>A implementa\u00e7\u00e3o direta de controlo de acessos n\u00e3o est\u00e1 no \u00e2mbito da pygeoapi. A abordagem desejada aqui seria aproveitar uma solu\u00e7\u00e3o existente e definir/integrar os endpoints seguros de acordo. Por exemplo, fastgeoapi ou pygeoapi-auth poderiam ser implementados downstream da pygeoapi, e governar o acesso a endpoints espec\u00edficos (cole\u00e7\u00f5es, itens, etc.).</p> <p>Note</p> <p>A documenta\u00e7\u00e3o oficial da pygeoapi fornece o estado oficial do projeto sobre atualiza\u00e7\u00f5es de implementa\u00e7\u00e3o de seguran\u00e7a, e deve ser visitada para se manter atualizado com o estado mais recente da implementa\u00e7\u00e3o de seguran\u00e7a no projeto.</p>"},{"location":"pt/advanced/semantic-web-linked-data/","title":"Web Sem\u00e2ntica e Linked Data","text":"<p>Esta sec\u00e7\u00e3o aborda 3 aspetos da Web Sem\u00e2ntica:</p> <ul> <li>Motores de busca</li> <li>Publicar dados espaciais na web sem\u00e2ntica</li> <li>Proxy para a web sem\u00e2ntica</li> </ul>"},{"location":"pt/advanced/semantic-web-linked-data/#motores-de-busca","title":"Motores de busca","text":"<p>Os motores de busca usam tecnologia semelhante \u00e0 Web Sem\u00e2ntica para facilitar a captura de dados estruturados (tamb\u00e9m conhecidos como rich snippets) de p\u00e1ginas web. A pygeoapi suporta este caso de uso atrav\u00e9s da incorpora\u00e7\u00e3o de um snippet JSON-LD <code>schema.org</code> na codifica\u00e7\u00e3o HTML,</p> <p>Tip</p> <p>A ontologia <code>schema.org</code> n\u00e3o \u00e9 uma ontologia formal da Web Sem\u00e2ntica, estando portanto um pouco desconectada do resto da Web Sem\u00e2ntica</p> <p>Tip</p> <p>Consulte mais informa\u00e7\u00f5es em Otimiza\u00e7\u00e3o para Motores de Busca</p>"},{"location":"pt/advanced/semantic-web-linked-data/#publicar-dados-espaciais-na-web-semantica","title":"Publicar dados espaciais na Web Sem\u00e2ntica","text":"<p>A OGC API - Common adotou v\u00e1rias conven\u00e7\u00f5es W3C, que aproximam as OGC APIs das normas da Web Sem\u00e2ntica, comparado com as normas de primeira gera\u00e7\u00e3o dos Servi\u00e7os Web OGC (OWS).</p> <p>Atualmente, a pygeoapi n\u00e3o pretende ser uma implementa\u00e7\u00e3o completa da Web Sem\u00e2ntica, no entanto \u00e9 poss\u00edvel anunciar alguns aspetos da Web Sem\u00e2ntica para que os dados possam ser percorridos por clientes conscientes da Web Sem\u00e2ntica.</p> <p>Usar um cliente SPARQL para consultar a pygeoapi</p> <p>SPARQL \u00e9 comummente conhecido como a linguagem de consulta para consultar triple stores.  No entanto, tamb\u00e9m pode usar SPARQL para consultar grafos de recursos web ligados. O cliente SPARQL percorre liga\u00e7\u00f5es entre  os recursos para localizar os triples solicitados. Jena ARQ \u00e9 um cliente  SPARQL de linha de comandos que consegue executar tais consultas. O Jena \u00e9 bastante dif\u00edcil de configurar, embora haja uma  imagem Docker dispon\u00edvel. Como alternativa, usaremos uma implementa\u00e7\u00e3o web  do motor ARQ. Navegue para https://demos.isl.ics.forth.gr/sparql-ld-endpoint e substitua a consulta na caixa de texto por:</p> <pre><code>SELECT * WHERE { \n  SERVICE &lt;https://demo.pygeoapi.io/master/collections/lakes&gt; { \n    { \n    ?s ?p ?o  \n    } \n  } \n}\n</code></pre> <p>Uma consulta a um item retorna o item com a sua geometria:</p> <pre><code>SELECT * WHERE { \n  SERVICE &lt;https://demo.pygeoapi.io/master/collections/lakes/items/1&gt; {\n    {{ ?s ?p ?o }}\n  }\n}\n</code></pre> <p>Note que o cliente SPARQL falha se codificar diretamente o formato HTML. </p> <pre><code>SELECT * WHERE { \n  SERVICE &lt;https://demo.pygeoapi.io/master/collections/lakes?f=html&gt; {\n    { ?s ?p ?o }\n  }\n}\n</code></pre> <p>O JSON-LD conforme esperado pelos motores de busca tem alguns desafios para as ferramentas da web sem\u00e2ntica. Ent\u00e3o como funciona se o formato n\u00e3o for codificado diretamente?  O motor SPARQL negocia com o endpoint para avaliar que codifica\u00e7\u00f5es (RDF) est\u00e3o dispon\u00edveis, e baseado na negocia\u00e7\u00e3o de conte\u00fado  solicita a codifica\u00e7\u00e3o <code>JSON_LD</code> via <code>f=jsonld</code>.</p> <p>A pygeoapi adotou conven\u00e7\u00f5es da comunidade JSON-LD para anotar JSON como RDF. Para funcionalidades, cada propriedade (coluna numa tabela fonte)  \u00e9 anotada por um conceito sem\u00e2ntico. A configura\u00e7\u00e3o relacionada para aplicar as anota\u00e7\u00f5es \u00e9 gerida no elemento de contexto de uma defini\u00e7\u00e3o de recurso</p> <p>Tip</p> <p>Leia mais na documenta\u00e7\u00e3o da pygeoapi.</p> <pre><code>context:\n    - schema: https://schema.org/\n    stn_id: schema:identifer\n    datetime:\n        \"@id\": schema:observationDate\n        \"@type\": schema:DateTime\n    value:\n        \"@id\": schema:value\n        \"@type\": schema:Number\n</code></pre>"},{"location":"pt/advanced/semantic-web-linked-data/#proxy-para-a-web-semantica","title":"Proxy para a Web Sem\u00e2ntica","text":"<p>Os engenheiros de dados espaciais s\u00e3o geralmente desafiados quando importam e visualizam fragmentos da web sem\u00e2ntica. O n\u00famero de  clientes espaciais que atualmente suportam intera\u00e7\u00e3o SPARQL \u00e9 limitado e requer conhecimento especializado para usar.  Um grupo dentro da comunidade da pygeoapi pretende facilitar o acesso \u00e0 web sem\u00e2ntica para engenheiros de dados espaciais introduzindo a pygeoapi como uma proxy  entre os clientes GIS t\u00edpicos e a web sem\u00e2ntica.</p> <p>Uma nova funcionalidade est\u00e1 a ser preparada que introduz um fornecedor SPARQL na pygeoapi.  O fornecedor permite navegar pelos resultados de uma consulta SPARQL como uma cole\u00e7\u00e3o OGC API - Features.</p>"},{"location":"pt/advanced/semantic-web-linked-data/#resumo","title":"Resumo","text":"<p>Parab\u00e9ns! Agora pode configurar configura\u00e7\u00f5es da pygeoapi com conceitos de linked data.</p>"},{"location":"pt/advanced/seo/","title":"Otimiza\u00e7\u00e3o para Motores de Busca (SEO)","text":"<p>A OGC API - Features adotou a Boa Pr\u00e1tica 2 de Dados Espaciais na Web: Tornar os seus dados espaciais index\u00e1veis por motores de busca com a recomenda\u00e7\u00e3o de incluir HTML como formato de sa\u00edda de qualquer OGC API. Isto significa que os utilizadores podem navegar numa OGC API a partir do seu navegador e os Motores de Busca conseguem rastrear o conte\u00fado.</p> <p>Um aspeto a considerar \u00e9 que, uma vez que a API se torna uma p\u00e1gina web, as pr\u00e1ticas comuns para arquitetura web e desenvolvimento tornam-se relevantes:</p> <ul> <li>o website tem uma navega\u00e7\u00e3o clara?</li> <li>est\u00e1 inclu\u00eddo um log\u00f3tipo da empresa, marca, declara\u00e7\u00e3o de privacidade, aviso de cookies?</li> <li>a p\u00e1gina web \u00e9 WCAG acess\u00edvel?</li> </ul> <p>Tip</p> <p>Note que a configura\u00e7\u00e3o da pygeoapi tamb\u00e9m tem uma op\u00e7\u00e3o para desativar a sa\u00edda HTML. Nesse cen\u00e1rio, apenas a sa\u00edda JSON est\u00e1 dispon\u00edvel.</p> <p>Na Web, os websites s\u00e3o tipicamente visitados por web crawlers de motores de busca populares. Os crawlers s\u00e3o processos automatizados que ajudam a construir o \u00edndice do motor de busca. Os crawlers seguem liga\u00e7\u00f5es na Web para identificar conte\u00fado novo ou atualizado . A liga\u00e7\u00e3o cruzada da sua API a outros recursos aumenta portanto a visibilidade (e classifica\u00e7\u00e3o) da sua API.</p> <p>O British Geo6 escreveu uma extensa boa pr\u00e1tica sobre SEO para editores de dados que oferece uma boa vis\u00e3o geral do SEO no \u00e2mbito das publica\u00e7\u00f5es de dados.</p>"},{"location":"pt/advanced/seo/#ajustar-o-comportamento-dos-web-crawlers","title":"Ajustar o comportamento dos Web Crawlers","text":"<p>Este par\u00e1grafo apresenta alguns mecanismos que facilitam ou bloqueiam web crawlers de indexar o seu conte\u00fado.</p> <p>Se n\u00e3o est\u00e1 interessado em ter o seu conte\u00fado indexado por motores de busca, pode fornecer um ficheiro robots.txt na raiz do seu website, especificando que pastas n\u00e3o devem ser indexadas. Mais drasticamente \u00e9 a op\u00e7\u00e3o de bloquear o acesso para crawlers ou bots ao seu conte\u00fado filtrando tr\u00e1fego para o website baseado no cabe\u00e7alho HTTP User-Agent. Tal regra pode ser adicionada a uma configura\u00e7\u00e3o de firewall ou servidor web.</p> <p>Um ficheiro <code>robots.txt</code> tamb\u00e9m pode incluir uma liga\u00e7\u00e3o para um Sitemap. Muitos motores de busca fornecem a op\u00e7\u00e3o de submeter um sitemap para acelerar o rastreamento e indexa\u00e7\u00e3o. A pygeoapi n\u00e3o fornece um sitemap do seu conte\u00fado, mas pode criar o seu pr\u00f3prio sitemap (publicar como <code>/sitemap.xml</code>), especificando URLs do seu conte\u00fado desejado para ser indexado.</p> <p>Os motores de busca fornecem ferramentas para avaliar o comportamento de pesquisa do seu website. Estas ferramentas podem fornecer informa\u00e7\u00f5es valiosas sobre a capacidade de encontrar o seu website e conte\u00fado (por exemplo, palavras-chave usadas para localizar o seu website).</p>"},{"location":"pt/advanced/seo/#schemaorgdataset","title":"Schema.org/Dataset","text":"<p>Os motores de busca cooperam na iniciativa Schema.org. O Schema.org permite-lhe anotar o seu website usando o vocabul\u00e1rio <code>schema.org</code>, para que os motores de busca indexem o conte\u00fado de forma estruturada. O Google foi o primeiro a empregar estas anota\u00e7\u00f5es para fornecer um motor de busca dedicado para conjuntos de dados. A pygeoapi adiciona anota\u00e7\u00f5es <code>schema.org/Dataset</code> \u00e0s p\u00e1ginas de cole\u00e7\u00e3o, para que as cole\u00e7\u00f5es sejam automaticamente inclu\u00eddas na pesquisa de conjuntos de dados do Google.</p> <p>Avaliar as anota\u00e7\u00f5es schema.org em cole\u00e7\u00f5es</p> <p>O Google fornece uma ferramenta para avaliar anota\u00e7\u00f5es <code>Schema.org</code> em websites. Tente avaliar um endpoint de cole\u00e7\u00e3o da pygeoapi na ferramenta. Se executar a pygeoapi localmente (n\u00e3o acess\u00edvel ao google), pode copiar o c\u00f3digo fonte de uma p\u00e1gina como HTML no separador <code>&lt;code&gt;</code>, caso contr\u00e1rio pode colar o URL da p\u00e1gina no separador <code>URL</code>.</p> <p>Note</p> <p>Uma ferramenta semelhante \u00e9 disponibilizada pelo Yandex (note que \u00e9 necess\u00e1rio registo).</p>"},{"location":"pt/advanced/ui-custom-templates/","title":"Personaliza\u00e7\u00e3o de UI e templating","text":"<p>A pygeoapi adotou o mecanismo de templating Jinja2 para estilizar a sa\u00edda HTML. Cada elemento visualizado na sa\u00edda HTML \u00e9 personaliz\u00e1vel substituindo o template relevante. Os templates est\u00e3o localizados na pasta <code>pygeoapi/templates</code>. \u00c9 poss\u00edvel substituir qualquer template copiando-o para uma pasta separada e ajust\u00e1-lo \u00e0s suas necessidades. Na configura\u00e7\u00e3o da pygeoapi pode ent\u00e3o indicar o caminho para a pasta de substitui\u00e7\u00e3o. Note que para ficheiros que n\u00e3o s\u00e3o colocados na pasta de substitui\u00e7\u00e3o, o ficheiro original \u00e9 usado.</p> <p>Caution</p> <p>Para qualquer personaliza\u00e7\u00e3o, tenha em mente que com uma nova vers\u00e3o da pygeoapi as altera\u00e7\u00f5es nos templates padr\u00e3o n\u00e3o est\u00e3o automaticamente dispon\u00edveis nos ficheiros substitu\u00eddos. As atualiza\u00e7\u00f5es precisam de ser cuidadosamente testadas e validadas.</p>"},{"location":"pt/advanced/ui-custom-templates/#jinja2","title":"Jinja2","text":"<p>Jinja2 \u00e9 um conceito de templating comum na comunidade Python. Com um conhecimento m\u00ednimo de HTML ser\u00e1 capaz de fazer personaliza\u00e7\u00f5es menores mas significativas. No n\u00facleo da configura\u00e7\u00e3o de template da pygeoapi est\u00e1 o template <code>_base.html</code>, que define o cabe\u00e7alho e rodap\u00e9 da p\u00e1gina. O fragmento abaixo define o rodap\u00e9 da p\u00e1gina, note os par\u00e2metros em chavetas, que s\u00e3o substitu\u00eddos por conte\u00fado din\u00e2mico. </p> <pre><code> &lt;footer class=\"sticky\"&gt;\n    {% trans %}Powered by {% endtrans %} \n    &lt;a title=\"pygeoapi\" href=\"https://pygeoapi.io\"&gt;\n        &lt;img src=\"{{ config['server']['url'] }}/assets/images/pygeoapi.png\" title=\"pygeoapi logo\" style=\"height:24px;vertical-align: middle;\"/&gt;&lt;/a&gt; \n    {{ version }}\n&lt;/footer&gt;\n</code></pre> <p>Personalizar uma p\u00e1gina HTML</p> <p>Copie <code>_base.html</code> para uma pasta separada. Ajuste alguns elementos nessa p\u00e1gina (por exemplo, imagem do log\u00f3tipo). Depois, inclua uma refer\u00eancia \u00e0 nova pasta na configura\u00e7\u00e3o da pygeoapi. Reinicie o servi\u00e7o. Verifique o resultado.</p>"},{"location":"pt/advanced/ui-custom-templates/#personalizacoes-css","title":"Personaliza\u00e7\u00f5es CSS","text":"<p>A partir do template HTML personalizado pode referenciar um novo ficheiro de folha de estilo com personaliza\u00e7\u00f5es ou adicionar diretamente as suas personaliza\u00e7\u00f5es ao /static/css/default.css.</p>"},{"location":"pt/advanced/ui-custom-templates/#resumo","title":"Resumo","text":"<p>Parab\u00e9ns! Adicionou um aspeto e comportamento personalizados \u00e0 sua implementa\u00e7\u00e3o pygeoapi.</p>"},{"location":"pt/publishing/","title":"Publica\u00e7\u00e3o de Dados","text":"<p>Note</p> <p>Certifique-se de que tem a pygeoapi configurada e que consegue executar o servi\u00e7o com a configura\u00e7\u00e3o de defeito em http://localhost:5000.</p> <p>Nesta sec\u00e7\u00e3o, ir\u00e1 aprender a publicar diferentes tipos de dados geoespaciais e metadados atrav\u00e9s dos seguintes exerc\u00edcios:</p> <ul> <li>Exerc\u00edcio 1 - O meu primeiro conjunto de dados</li> <li>Exerc\u00edcio 2 - Dados vetoriais via OGC API - Features</li> <li>Exerc\u00edcio 3 - Dados raster via OGC API - Coverages</li> <li>Exerc\u00edcio 4 - Mapas de dados geoespaciais via OGC API - Maps</li> <li>Exerc\u00edcio 5 - Mosaicos de dados geoespaciais via OGC API - Tiles</li> <li>Exerc\u00edcio 6 - Metadados via OGC API - Records</li> <li>Exerc\u00edcio 7 - Dados ambientais via OGC API - Environmental Data Retrieval</li> <li>Exerc\u00edcio 8 - Fun\u00e7\u00f5es via OGC API - Processes</li> <li>Exerc\u00edcio 9 - pygeoapi como uma ponte para outros servi\u00e7os</li> </ul>"},{"location":"pt/publishing/first/","title":"Exerc\u00edcio 1 - O primeiro conjunto de dados","text":"<p>Nesta sec\u00e7\u00e3o, ir\u00e1 publicar um conjunto de dados vetoriais.</p> <p>Para este exerc\u00edcio, iremos usar um conjunto de dados CSV de \u00e1guas balneares na Est\u00f3nia, gentilmente cedido pela Ag\u00eancia de Sa\u00fade da Est\u00f3nia.</p> <p>Pode encontrar este conjunto de dados em <code>workshop/exercises/data/tartu/bathingwater-estonia.csv</code>.</p> <p>Este exerc\u00edcio consiste em ajustar o <code>workshop/exercises/pygeoapi.config.yml</code> para definir este conjunto de dados como uma cole\u00e7\u00e3o da OGC API - Features.</p>"},{"location":"pt/publishing/first/#verificar-a-configuracao-existente-do-docker-compose","title":"Verificar a configura\u00e7\u00e3o existente do Docker Compose","text":"<p>Antes de fazer quaisquer altera\u00e7\u00f5es, vamos garantir que a configura\u00e7\u00e3o inicial do Docker Compose que lhe foi fornecida est\u00e1 a funcionar.</p> <p>Para testar:</p> <p>Testar a configura\u00e7\u00e3o do workshop</p> <ol> <li>Numa shell de terminal, navegue para a pasta do workshop e digite:</li> </ol> Linux/MacWindows (PowerShell) <p> <pre><code>cd workshop/exercises\ndocker compose up\n</code></pre> </p> <p> <pre><code>cd workshop/exercises\ndocker compose up\n</code></pre> </p> <ol> <li>Abra http://localhost:5000 no seu navegador, verifique algumas cole\u00e7\u00f5es</li> <li>Feche digitando <code>CTRL-C</code></li> </ol> <p>Note</p> <p>Tamb\u00e9m pode executar o contentor Docker em segundo plano (detached) da seguinte forma:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker compose up -d\ndocker ps  # verifique que o container pygeoapi est\u00e1 em execu\u00e7\u00e3o\n# visite http://localhost:5000 no seu navegador, verifique algumas cole\u00e7\u00f5es\ndocker logs --follow pygeoapi  # ver registos\ndocker compose down --remove-orphans\n</code></pre> </p> <p> <pre><code>docker compose up -d\ndocker ps  # verifique que o container pygeoapi est\u00e1 em execu\u00e7\u00e3o\n# visite http://localhost:5000 no seu navegador, verifique algumas cole\u00e7\u00f5es\ndocker logs --follow pygeoapi  # ver registos\ndocker compose down --remove-orphans\n</code></pre> </p>"},{"location":"pt/publishing/first/#publicar-o-primeiro-conjunto-de-dados","title":"Publicar o primeiro conjunto de dados","text":"<p>Chegou o momento de publicar o seu primeiro conjunto de dados.</p> <p>Configurar o ficheiro de configura\u00e7\u00e3o da pygeoapi</p> <ol> <li>Abra o ficheiro <code>workshop/exercises/pygeoapi/pygeoapi.config.yml</code> no seu editor de texto</li> <li>Procure a sec\u00e7\u00e3o de configura\u00e7\u00e3o comentada que come\u00e7a com <code># START - EXERCISE 1 - Your First Collection</code></li> <li>Descomente todas as linhas at\u00e9 <code># END - EXERCISE 1 - Your First Collection</code></li> </ol> <p>Certifique-se de que a indenta\u00e7\u00e3o est\u00e1 alinhada (dica: diretamente abaixo de <code># START ...</code>)</p> <p>A sec\u00e7\u00e3o de configura\u00e7\u00e3o \u00e9 a seguinte:</p> <pre><code>    Bathing_Water_Estonia:\n        type: collection\n        title: Bathing Water Estonia\n        description: Locations where the Estonian Health Board monitors the bathing water quality\n        keywords:\n            - bathing water\n            - estonia\n        links:\n            - type: text/csv\n              rel: canonical\n              title: data\n              href: https://avaandmed.eesti.ee/datasets/supluskohad\n              hreflang: EE\n        extents:\n            spatial:\n                bbox: [20,57,29,60]\n                crs: http://www.opengis.net/def/crs/EPSG/0/4326\n        providers:\n            - type: feature\n              name: CSV\n              data: /data/tartu/bathingwater-estonia.csv\n              id_field: id\n              title_field: Name\n              geometry:\n                x_field: x\n                y_field: y\n              storage_crs: http://www.opengis.net/def/crs/EPSG/0/3300\n</code></pre> <p>A parte mais relevante \u00e9 a sec\u00e7\u00e3o <code>providers</code>. Aqui, definimos um <code>Provider CSV</code>, apontando o caminho do ficheiro para o diret\u00f3rio <code>/data</code> que iremos montar (ver a seguir) do diret\u00f3rio local para o container de Docker. Como um CSV n\u00e3o \u00e9 um ficheiro espacial, configuramos explicitamente a pygeoapi para que a longitude e a latitude (x e y) sejam mapeadas a partir das colunas <code>lon</code> e <code>lat</code> no ficheiro CSV. Note o par\u00e2metro <code>storage_crs</code>, que indica o sistema de coordenadas que \u00e9 usado nos dados de origem.</p> <p>Tip</p> <p>Para saber mais sobre a sintaxe e as conven\u00e7\u00f5es de configura\u00e7\u00e3o da pygeoapi, consulte o cap\u00edtulo relevante na documenta\u00e7\u00e3o.</p> <p>Tip</p> <p>A pygeoapi inclui in\u00fameros fornecedores de dados que permitem o acesso a uma variedade de formatos de dados. Atrav\u00e9s do plugin OGR/GDAL, o n\u00famero de formatos suportados \u00e9 quase ilimitado. Consulte a p\u00e1gina do fornecedor de dados para saber como pode configurar uma liga\u00e7\u00e3o ao conjunto de dados da sua escolha. Pode sempre copiar um exemplo de configura\u00e7\u00e3o relevante e coloc\u00e1-lo na sec\u00e7\u00e3o de conjuntos de dados do ficheiro de configura\u00e7\u00e3o da pygeoapi para o seu projeto futuro.</p>"},{"location":"pt/publishing/first/#testar","title":"Testar","text":"<p>Iniciar com a configura\u00e7\u00e3o atualizada</p> <ol> <li>Comece por digitar <code>docker compose up</code></li> <li>Observe o output do registo (logging)</li> <li>Se n\u00e3o houver erros: abra http://localhost:5000</li> <li>Procure a cole\u00e7\u00e3o \"Bathing Water Estonia\"</li> <li>Navegue pelos itens da cole\u00e7\u00e3o</li> <li>Verifique a representa\u00e7\u00e3o json adicionando <code>?f=json</code> ao URL (ou clicando em 'json' no canto superior direito)</li> </ol>"},{"location":"pt/publishing/first/#depuracao-de-erros-de-configuracao","title":"Depura\u00e7\u00e3o de erros de configura\u00e7\u00e3o","text":"<p>Ocasionalmente, pode encontrar erros, brevemente discutidos aqui:</p> <ul> <li>N\u00e3o \u00e9 poss\u00edvel encontrar um ficheiro, um erro de digita\u00e7\u00e3o na configura\u00e7\u00e3o</li> <li>O formato ou a estrutura do ficheiro espacial n\u00e3o \u00e9 totalmente suportado</li> <li>A porta (5000) j\u00e1 est\u00e1 a ser utilizada. Existe uma pygeoapi anterior ainda em execu\u00e7\u00e3o? Se alterar a porta, considere que tamb\u00e9m tem de atualizar o ficheiro de configura\u00e7\u00e3o da pygeoapi</li> </ul> <p>Existem dois par\u00e2metros no ficheiro de configura\u00e7\u00e3o que ajudam a resolver estes problemas. Defina o n\u00edvel de registo (logging) para <code>DEBUG</code> e indique um caminho para um ficheiro de registo.</p> <p>Tip</p> <p>No Docker, defina o caminho do ficheiro de registo para a pasta montada, para que possa aced\u00ea-lo facilmente a partir do seu sistema anfitri\u00e3o. Tamb\u00e9m pode ver os registos da consola do seu contentor Docker da seguinte forma:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker logs --follow pygeoapi\n</code></pre> </p> <p> <pre><code>docker logs --follow pygeoapi\n</code></pre> </p> <p>Tip</p> <p>Erros relacionados com caminhos de ficheiros ocorrem normalmente na configura\u00e7\u00e3o inicial. No entanto, tamb\u00e9m podem acontecer em momentos inesperados, resultando num servi\u00e7o interrompido. Produtos como o GeoHealthCheck t\u00eam como objetivo monitorizar, detetar e notificar sobre o estado e a disponibilidade do servi\u00e7o. Os testes da OGC API - Features no GeoHealthCheck verificam a disponibilidade do servi\u00e7o em intervalos. Consulte a documenta\u00e7\u00e3o do GeoHealthCheck para mais informa\u00e7\u00f5es.</p>"},{"location":"pt/publishing/ogcapi-coverages/","title":"Exerc\u00edcio 3 - Dados raster via OGC API - Coverages","text":"<p>A OGC API - Coverages fornece uma API Web para aceder a dados raster (grelhas, dados de dete\u00e7\u00e3o remota, cubos de dados multidimensionais):</p> <ul> <li>OGC API - Coverages (rascunho)</li> </ul>"},{"location":"pt/publishing/ogcapi-coverages/#suporte-da-pygeoapi","title":"Suporte da pygeoapi","text":"<p>A pygeoapi suporta a especifica\u00e7\u00e3o de rascunho da OGC API - Coverages, com o rasterio e o xarray como backends principais, bem como CoverageJSON e output nativo.</p> <p>Note</p> <p>Consulte a documenta\u00e7\u00e3o oficial para mais informa\u00e7\u00f5es sobre os backends raster suportados.</p>"},{"location":"pt/publishing/ogcapi-coverages/#publicar-um-conjunto-de-dados-raster","title":"Publicar um conjunto de dados raster","text":"<p>Nos exerc\u00edcios anteriores, demonstr\u00e1mos os passos envolvidos na publica\u00e7\u00e3o de dados vetoriais e na atualiza\u00e7\u00e3o da configura\u00e7\u00e3o da pygeoapi. Nesta sec\u00e7\u00e3o, vamos publicar um ficheiro raster no formato GeoTIFF, a partir de um fornecedor rasterio.</p> <p>Atualizar a configura\u00e7\u00e3o da pygeoapi</p> <p>Abra o ficheiro de configura\u00e7\u00e3o da pygeoapi num editor de texto. Adicione uma nova sec\u00e7\u00e3o de conjunto de dados da seguinte forma:</p> <pre><code>tartu-ntl:\n    type: collection\n    title: Amostra de dados de luzes noturnas da NASA Blue Marble sobre a Est\u00f3nia\n    description: Amostra de dados de luzes noturnas da NASA Blue Marble sobre a Est\u00f3nia\n    keywords:\n        - Blue Marble\n        - Luzes Noturnas\n        - NTL\n    links:\n        - type: text/html\n          rel: about\n          title: Dados de Luzes Noturnas da NASA Blue Marble\n          href: https://appliedsciences.nasa.gov/get-involved/training/english/arset-introduction-nasas-black-marble-night-lights-data\n          hreflang: en\n    extents:\n        spatial:\n          bbox: [26.6264,58.32569,26.82632,58.433989]\n          crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: coverage\n          name: rasterio\n          data: /data/tartu/estonia_light.tif # coloque o caminho correto aqui\n          format:\n              name: GTiff\n              mimetype: application/tiff\n</code></pre> <p>Tip</p> <p>A diretiva <code>format.name</code> do fornecedor rasterio requer um nome de driver raster GDAL v\u00e1lido.</p> <p>Guarde a configura\u00e7\u00e3o e reinicie o Docker Compose. Navegue para http://localhost:5000/collections para avaliar se o novo conjunto de dados foi publicado.</p>"},{"location":"pt/publishing/ogcapi-coverages/#acesso-do-lado-do-cliente","title":"Acesso do lado do cliente","text":""},{"location":"pt/publishing/ogcapi-coverages/#gdalogr","title":"GDAL/OGR","text":"<p>O GDAL/OGR fornece suporte para a OGC API - Coverages. Isto significa que pode usar o <code>gdalinfo</code> para consultar e converter dados de endpoints da OGC API - Coverages, tal como qualquer outra fonte de dados raster. Isto tamb\u00e9m significa que pode estabelecer liga\u00e7\u00f5es a endpoints da OGC API - Coverages a partir de qualquer software que tenha uma interface para o GDAL, como MapServer, GeoServer, Manifold, FME, ArcGIS, etc.</p> <p>Usar o GDAL para interagir com a OGC API - Coverages</p> <ul> <li>Verifique se tem uma vers\u00e3o recente do GDAL instalada, caso contr\u00e1rio, use o GDAL do OSGeoLive</li> <li>Execute <code>gdalinfo</code> na linha de comandos para verificar uma liga\u00e7\u00e3o \u00e0 OGC API - Coverages:</li> </ul> Linux/MacWindows (PowerShell) <p> <pre><code>gdalinfo OGCAPI:https://maps.ecere.com/ogcapi/collections/SRTM_ViewFinderPanorama\n</code></pre> </p> <p> <pre><code>gdalinfo OGCAPI:https://maps.ecere.com/ogcapi/collections/SRTM_ViewFinderPanorama\n</code></pre> </p>"},{"location":"pt/publishing/ogcapi-coverages/#owslib","title":"OWSLib","text":"<p>A OWSLib \u00e9 uma biblioteca Python para interagir com os Servi\u00e7os Web da OGC e suporta v\u00e1rias OGC API, incluindo a OGC API - Coverages.</p> <p>Interagir com a OGC API - Coverages via OWSLib</p> <p>Se n\u00e3o tiver o Python instalado, considere executar este exerc\u00edcio num container de Docker. Consulte o Cap\u00edtulo de Configura\u00e7\u00e3o.</p> Linux/MacWindows (PowerShell) <p> <code>bash pip3 install owslib</code> </p> <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p>Em seguida, inicie uma sess\u00e3o de consola Python com: <code>python3</code> (pare a sess\u00e3o escrevendo <code>exit()</code>).</p> Linux/MacWindows (PowerShell) <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.coverages import Coverages\n&gt;&gt;&gt; SERVICE_URL = 'https://demo.pygeoapi.io/master/'\n&gt;&gt;&gt; w = Coverages(SERVICE_URL)\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master/'\n&gt;&gt;&gt; gdps = w.collection('gdps-temperature')\n&gt;&gt;&gt; gdps['id']\n'gdps-temperature'\n&gt;&gt;&gt; gdps['title']\n'Amostra do Sistema de Previs\u00e3o Determin\u00edstica Global'\n&gt;&gt;&gt; gdps['description']\n'Amostra do Sistema de Previs\u00e3o Determin\u00edstica Global'\n&gt;&gt;&gt; schema = w.collection_schema('gdps-temperature')\n&gt;&gt;&gt; len(schema['field'])\n1\n&gt;&gt;&gt; schema['properties']['1']['title']\n'Temperatura [C]'\n&gt;&gt;&gt; schema['properties']['1']['x-ogc-unit']\n'[C]'\n&gt;&gt;&gt; schema['properties']['1']['type']\n'number'\n</code></pre> </p> <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.coverages import Coverages\n&gt;&gt;&gt; SERVICE_URL = 'https://demo.pygeoapi.io/master/'\n&gt;&gt;&gt; w = Coverages(SERVICE_URL)\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master/'\n&gt;&gt;&gt; gdps = w.collection('gdps-temperature')\n&gt;&gt;&gt; gdps['id']\n'gdps-temperature'\n&gt;&gt;&gt; gdps['title']\n'Amostra do Sistema de Previs\u00e3o Determin\u00edstica Global'\n&gt;&gt;&gt; gdps['description']\n'Amostra do Sistema de Previs\u00e3o Determin\u00edstica Global'\n&gt;&gt;&gt; schema = w.collection_schema('gdps-temperature')\n&gt;&gt;&gt; len(schema['field'])\n1\n&gt;&gt;&gt; schema['properties']['1']['title']\n'Temperatura [C]'\n&gt;&gt;&gt; schema['properties']['1']['x-ogc-unit']\n'[C]'\n&gt;&gt;&gt; schema['properties']['1']['type']\n'number'\n</code></pre> </p> <p>Note</p> <p>Consulte a documenta\u00e7\u00e3o oficial da OWSLib para mais exemplos.</p>"},{"location":"pt/publishing/ogcapi-coverages/#resumo","title":"Resumo","text":"<p>Parab\u00e9ns! Agora \u00e9 capaz de publicar dados raster na pygeoapi.</p>"},{"location":"pt/publishing/ogcapi-edr/","title":"Exerc\u00edcio 7 - Dados ambientais via OGC API - Environmental Data Retrieval","text":"<p>OGC API - Environmental Data Retrieval fornece uma Web API para aceder a dados ambientais usando padr\u00f5es de consulta bem definidos:</p> <ul> <li>Norma OGC API - Environmental Data Retrieval</li> </ul> <p>A OGC API - Environmental Data Retrieval utiliza a OGC API - Features como bloco de constru\u00e7\u00e3o, permitindo assim integra\u00e7\u00e3o simplificada para clientes e utilizadores. A EDR pode ser considerada uma API de conveni\u00eancia que n\u00e3o requer conhecimento aprofundado sobre o armazenamento/modelo de dados subjacente.</p>"},{"location":"pt/publishing/ogcapi-edr/#suporte-na-pygeoapi","title":"Suporte na pygeoapi","text":"<p>A pygeoapi suporta a especifica\u00e7\u00e3o OGC API - Environmental Data Retrieval aproveitando tanto plugins de fornecedor de funcionalidades como de cobertura.</p> <p>Note</p> <p>Consulte a documenta\u00e7\u00e3o oficial para mais informa\u00e7\u00f5es sobre backends EDR suportados</p>"},{"location":"pt/publishing/ogcapi-edr/#publicar-dados-ambientais-na-pygeoapi","title":"Publicar dados ambientais na pygeoapi","text":"<p>Vamos publicar alguns dados ICOADS atrav\u00e9s do plugin EDR xarray. Os dados ICOADS do exemplo podem ser encontrados em <code>workshop/exercises/data/coads_sst.nc</code>:</p> <p>Atualizar a configura\u00e7\u00e3o da pygeoapi</p> <p>Abra o ficheiro de configura\u00e7\u00e3o da pygeoapi num editor de texto. Adicione uma nova sec\u00e7\u00e3o de conjunto de dados da seguinte forma:</p> <pre><code>    icoads-sst:\n        type: collection\n        title: International Comprehensive Ocean-Atmosphere Data Set (ICOADS)\n        description: International Comprehensive Ocean-Atmosphere Data Set (ICOADS)\n        keywords:\n            - icoads\n            - sst\n            - air temperature\n        extents:\n            spatial:\n                bbox: [-180,-90,180,90]\n                crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            temporal:\n                begin: 2000-01-16T06:00:00Z\n                end: 2000-12-16T06:00:00Z\n        links:\n            - type: text/html\n              rel: canonical\n              title: information\n              href: https://psl.noaa.gov/data/gridded/data.coads.1deg.html\n              hreflang: en-US\n        providers:\n            - type: edr\n              name: xarray-edr\n              data: /data/coads_sst.nc\n              format:\n                  name: NetCDF\n                  mimetype: application/x-netcdf\n</code></pre> <p>Guarde a configura\u00e7\u00e3o e reinicie o Docker Compose. Navegue para http://localhost:5000/collections para avaliar se o novo conjunto de dados foi publicado.</p> <p>\u00c0 primeira vista, a cole\u00e7\u00e3o <code>icoads-sst</code> aparece como uma cole\u00e7\u00e3o normal OGC API - Coverages. Olhe um pouco mais de perto para a descri\u00e7\u00e3o da cole\u00e7\u00e3o, e note que h\u00e1 uma chave 'parameter_names' que descreve os nomes dos par\u00e2metros EDR para as consultas da cole\u00e7\u00e3o.</p>"},{"location":"pt/publishing/ogcapi-edr/#owslib-avancado","title":"OWSLib - Avan\u00e7ado","text":"<p>OWSLib \u00e9 uma biblioteca Python para interagir com Servi\u00e7os Web OGC e suporta v\u00e1rias OGC APIs incluindo OGC API - Environmental Data Retrieval.</p> <p>Interagir com OGC API - Environmental Data Retrieval via OWSLib</p> <p>Se n\u00e3o tem Python instalado, considere executar este exerc\u00edcio num contentor Docker. Consulte o Cap\u00edtulo de Configura\u00e7\u00e3o.</p> Linux/MacWindows (PowerShell) <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p>Depois, inicie uma sess\u00e3o de consola Python com <code>python3</code> (pare a sess\u00e3o escrevendo <code>exit()</code>).</p> Linux/MacWindows (PowerShell) <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.edr import  EnvironmentalDataRetrieval\n&gt;&gt;&gt; w = EnvironmentalDataRetrieval('https://demo.pygeoapi.io/master')\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master'\n&gt;&gt;&gt; api = w.api()  # documento OpenAPI\n&gt;&gt;&gt; collections = w.collections()\n&gt;&gt;&gt; len(collections['collections'])\n13\n&gt;&gt;&gt; icoads_sst = w.collection('icoads-sst')\n&gt;&gt;&gt; icoads_sst['parameter-names'].keys()\ndict_keys(['SST', 'AIRT', 'UWND', 'VWND'])\n&gt;&gt;&gt; data = w.query_data('icoads_sst', 'position', coords='POINT(-75 45)', parameter_names=['SST', 'AIRT'])\n&gt;&gt;&gt; data  # dados CoverageJSON\n</code></pre> </p> <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.edr import  EnvironmentalDataRetrieval\n&gt;&gt;&gt; w = EnvironmentalDataRetrieval('https://demo.pygeoapi.io/master')\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master'\n&gt;&gt;&gt; api = w.api()  # documento OpenAPI\n&gt;&gt;&gt; collections = w.collections()\n&gt;&gt;&gt; len(collections['collections'])\n13\n&gt;&gt;&gt; icoads_sst = w.collection('icoads-sst')\n&gt;&gt;&gt; icoads_sst['parameter-names'].keys()\ndict_keys(['SST', 'AIRT', 'UWND', 'VWND'])\n&gt;&gt;&gt; data = w.query_data('icoads_sst', 'position', coords='POINT(-75 45)', parameter_names=['SST', 'AIRT'])\n&gt;&gt;&gt; data  # dados CoverageJSON\n</code></pre> </p> <p>Note</p> <p>Consulte a documenta\u00e7\u00e3o oficial da OWSLib para mais exemplos.</p>"},{"location":"pt/publishing/ogcapi-edr/#resumo","title":"Resumo","text":"<p>Parab\u00e9ns! Agora \u00e9 capaz de publicar dados ambientais na pygeoapi.</p>"},{"location":"pt/publishing/ogcapi-features/","title":"Exerc\u00edcio 2 - Dados vetoriais via OGC API - Features","text":"<p>A OGC API - Features fornece uma API Web para aceder a dados  vetoriais (geometrias e os seus atributos). A especifica\u00e7\u00e3o principal abrange o acesso e consulta b\u00e1sicos  de dados, partes adicionais est\u00e3o em desenvolvimento com as seguintes capacidades:</p> <ul> <li>OGC API - Features - Parte 1: Core fornece capacidades b\u00e1sicas de acesso e consulta</li> <li>OGC API - Features - Parte 2: Coordinate Reference Systems by Reference    permite a importa\u00e7\u00e3o e exporta\u00e7\u00e3o de dados de diferentes sistemas de coordenadas</li> <li>OGC API - Features - Parte 3: Filtering adiciona a capacidade de    pesquisas complexas usando a Common Query Language (CQL2)</li> <li>OGC API - Features - Parte 4: Create, Replace, Update and Delete (rascunho) adiciona capacidades transacionais</li> </ul>"},{"location":"pt/publishing/ogcapi-features/#suporte-da-pygeoapi","title":"Suporte da pygeoapi","text":"<p>A pygeoapi suporta todas as partes da especifica\u00e7\u00e3o OGC API - Features acima (a Parte 3 depende do suporte do backend,  por examplo, Elasticsearch).</p> <p>Nota</p> <p>Consulte a documenta\u00e7\u00e3o oficial  para mais informa\u00e7\u00f5es sobre os backends vetoriais suportados.</p> <p>Nota</p> <p>Consulte a documenta\u00e7\u00e3o oficial para mais informa\u00e7\u00f5es sobre o  suporte a CQL.</p> <p>A seguir, vamos explorar como publicar dados vetoriais usando um <code>GeoPackage</code>.</p>"},{"location":"pt/publishing/ogcapi-features/#publicar-um-geopackage","title":"Publicar um GeoPackage","text":"<p>Na sec\u00e7\u00e3o anterior, demonstr\u00e1mos os passos envolvidos para adicionar um conjunto de dados \u00e0 pygeoapi e atualizar a  sua configura\u00e7\u00e3o. Neste exerc\u00edcio, vamos publicar outro ficheiro vetorial, desta vez de uma fonte de dados  vetoriais GeoPackage (SQLite3).</p> <p>Dica</p> <p>Pode ser \u00fatil abrir o conjunto de dados no QGIS enquanto adiciona e atualiza o seu servidor  da pygeoapi para avaliar facilmente os atributos da tabela, nomes, propriedades espaciais e SRC.</p> <p>Vamos adicionar o ficheiro <code>workshop/exercises/data/brazil/guama_river.gpkg.zip</code>:</p> <p>Atualizar a configura\u00e7\u00e3o da pygeoapi</p> <p>Primeiro, vamos descompactar o ficheiro  guama_river.gpkg.zip  para <code>guama_river.gpkg</code>.</p> <p>Depois, abra o ficheiro de configura\u00e7\u00e3o da pygeoapi num editor de texto. Encontre a linha <code># START - EXERCISE 2 - flowlines Guama River</code>.</p> <p>Adicione uma nova sec\u00e7\u00e3o de conjunto de dados. descomentando as linhas at\u00e9 <code># END - EXERCISE 2 -  flowlines Guama River</code>:</p> <pre><code>guama-river:\n    type: collection\n    title: Guama River\n    description: Guama River Basin mainstem flowlines\n    keywords:\n        - Guama River\n        - Merit Hydro\n    links:\n        - type: text/html\n          rel: canonical\n          title: data\n          href: https://www.sciencebase.gov/catalog/item/614a8864d34e0df5fb97572d\n          hreflang: EE\n    extents:\n        spatial:\n            bbox: [-49.16, -5.0, -46.8, -1.2]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n    providers:\n        - type: feature\n          name: SQLiteGPKG\n          data: /data/brazil/guama_river.gpkg # coloque o caminho correto aqui\n          id_field: fid\n          table: guama_river # nome da tabela dentro do gpkg\n</code></pre> <p>Guarde o ficheiro e reinicie o Docker Compose. Navegue para http://localhost:5000/collections para avaliar se o  novo conjunto de dados com o t\u00edtulo \"Guama River\" foi publicado.</p> <p>Nota</p> <p>O driver SQLite incidentalmente tem desafios para abrir a extens\u00e3o GeoPackage no MacOS. Consulte a documenta\u00e7\u00e3o oficial ou tente com um formato de dados alternativo. Se usar Docker, isto n\u00e3o \u00e9 um problema.</p>"},{"location":"pt/publishing/ogcapi-features/#opcional-publicar-um-ficheiro-geojson-usando-elasticsearch","title":"OPCIONAL: Publicar um ficheiro GeoJSON usando Elasticsearch","text":"<p>Este exerc\u00edcio \u00e9 opcional, se o tempo permitir, ou pode realiz\u00e1-lo ap\u00f3s o workshop.</p> <p>Aqui exploramos a publica\u00e7\u00e3o de dados em OGC API - Features usando a pygeoapi com um fornecedor de backend  Elasticsearch. Para isso, precisamos do reposit\u00f3rio GitHub pygeoapi-examples:</p> Linux/MacWindows (PowerShell) <p> <pre><code>git clone https://github.com/geopython/pygeoapi-examples.git\n</code></pre> </p> <p> <pre><code>git clone https://github.com/geopython/pygeoapi-examples.git\n</code></pre> </p> <p>Em alternativa, pode descarregar o reposit\u00f3rio como um ficheiro .zip e descompact\u00e1-lo.</p> <p>Mude para a pasta <code>docker/elastic</code> e execute o ficheiro <code>docker-compose.yml</code>:</p> Linux/MacWindows (PowerShell) <p> <pre><code>cd docker/elastic\ndocker compose up\n</code></pre> </p> <p> <pre><code>cd docker/elastic\ndocker compose up\n</code></pre> </p> <p>Se tiver problemas a iniciar os servi\u00e7os, consulte o  ficheiro README. Pode precisar de  adaptar a configura\u00e7\u00e3o de mem\u00f3ria virtual do seu sistema.</p> <p>Primeiro, vamos carregar o ficheiro <code>greater_hyderabad_municipal_corporation_ward_Boundaries.geojson</code> para o  servidor Elasticsearch.</p> <p>Edite o script <code>add-data.sh</code> dentro da pasta <code>ES</code>, adicionando estas duas linhas antes do final:</p> <p><pre><code>curl -o /tmp/hyderabad.geojson https://raw.githubusercontent.com/geopython/diving-into-pygeoapi/refs/heads/main/workshop/exercises/data/hyderabad/greater_hyderabad_municipal_corporation_ward_Boundaries.geojson\npython3 /load_es_data.py /tmp/hyderabad.geojson objectid\n</code></pre> Atrav\u00e9s destas altera\u00e7\u00f5es, o ficheiro <code>greater_hyderabad_municipal_corporation_ward_Boundaries.geojson</code> \u00e9 descarregado  para dentro do container Docker do Elasticsearch e depois carregado para o Elasticsearch.</p> <p>Depois disto, precisamos de reconstruir a imagem Docker:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker compose build\n</code></pre> </p> <p> <pre><code>docker compose build\n</code></pre> </p> <p>A seguir, precisamos de configurar a pygeoapi inserindo o excerto abaixo no ficheiro de configura\u00e7\u00e3o da  pygeoapi <code>pygeoapi/docker.config.yml</code>. Esta modifica\u00e7\u00e3o resulta na publica\u00e7\u00e3o do  ficheiro <code>greater_hyderabad_municipal_corporation_ward_boundaries.geojson</code> como OGC API - Features usando o  fornecedor de backend Elasticsearch.</p> <pre><code>    hyderabad:\n        type: collection\n        title: Greater Hyderabad Municipal Corporation ward boundaries\n        description: The city ward boundaries represent the administrative and electoral boundary areas of the city. It plays a great role in planning of the city, for each council of the municipal corporation.\n        keywords:\n           - Boundaries\n           - Administrative\n           - Ward\n        links:\n            - type: text/html\n              rel: canonical\n              title: information\n              href: https://livingatlas-dcdev.opendata.arcgis.com/datasets/a090c89d52f1498f96a82e97b8bfb83e_0/about\n              hreflang: en-US\n        extents:\n            spatial:\n                bbox: [78.2379194985166180,17.2908061510471995,78.6217049083810764,17.5618443356918768]\n                crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            temporal:\n                begin: 2011-11-11\n                end: null  # or empty\n        providers:\n            - type: feature\n              name: Elasticsearch\n              #Note elastic_search is the docker container of ES the name is defined in the docker-compose.yml\n              data: http://elastic_search:9200/hyderabad\n              id_field: objectid\n</code></pre> <p>No arranque (ex: docker compose up -d), o contentor da pygeoapi ir\u00e1 esperar at\u00e9 que os dados tenham sido ingeridos e  o \u00edndice do Elasticsearch tenha sido constru\u00eddo. Pode verificar os registos usando:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker compose logs --follow\n</code></pre> </p> <p> <pre><code>docker compose logs --follow\n</code></pre> </p> <p>Depois do servidor ter arrancado, pode aceder \u00e0 p\u00e1gina da cole\u00e7\u00e3o aqui:</p> <p>http://localhost:5000/collections/hyderabad</p> <p>E aos itens (features) aqui:</p> <p>http://localhost:5000/collections/hyderabad/items</p> <p></p>"},{"location":"pt/publishing/ogcapi-features/#opcional-pygeoapi-como-um-proxy-wfs","title":"OPCIONAL: pygeoapi como um proxy WFS","text":"<p>A pygeoapi tamb\u00e9m pode funcionar como um servi\u00e7o de frontend da OGC API - Features para um WFS OGC existente atrav\u00e9s  do fornecedor GDAL/OGR. Esta fun\u00e7\u00e3o de ponte permite-lhe efetivamente publicar um WFS como OGC API - Features.</p> <p>Isto \u00e9 expandido numa sec\u00e7\u00e3o avan\u00e7ada deste workshop: A pygeoapi como uma Ponte para outros Servi\u00e7os - sec\u00e7\u00e3o WFS.</p>"},{"location":"pt/publishing/ogcapi-features/#acesso-de-lado-do-cliente","title":"Acesso de lado do cliente","text":""},{"location":"pt/publishing/ogcapi-features/#qgis","title":"QGIS","text":"<p>O QGIS Foi um dos primeiros clientes SIG de Desktop que adicionou suporte para a OGC API - Features. O suporte foi  integrado no fornecedor WFS existente.</p> <p>Abrir uma cole\u00e7\u00e3o da OGC API - Features no QGIS</p> <p>Siga os passos para adicionar algumas cole\u00e7\u00f5es de um endpoint da OGC API - Features:</p> <ul> <li>Abra o QGIS (se n\u00e3o tiver o QGIS, pode usar o OSGeoLive)</li> <li>No menu Layer, selecione <code>Adicionar Layer</code> &gt; <code>Adicionar layer WFS / layer OGC API Features</code></li> <li>No painel <code>Gestor de fontes de dados</code>, escolha 'Nova liga\u00e7\u00e3o'</li> </ul> <p></p> <ul> <li>Adicione o URL https://demo.pygeoapi.io/master (ou o endere\u00e7o de um servidor local)</li> <li>Pode agora clicar no bot\u00e3o <code>detetar</code> e o QGIS ir\u00e1 notar que est\u00e1 a configurar um endpoint da OGC API - Features</li> <li>O QGIS facilita a defini\u00e7\u00e3o do tamanho da p\u00e1gina (o pedido \u00e9 dividido em v\u00e1rios pedidos)<ul> <li>para pontos, pode facilmente defini-lo para 2500</li> <li>para alguns pol\u00edgonos com alta densidade, 100 j\u00e1 pode ser lento</li> </ul> </li> <li>Pressione <code>OK</code> para guardar a liga\u00e7\u00e3o e voltar ao ecr\u00e3 anterior</li> <li>Agora clique no bot\u00e3o <code>Ligar</code> para obter as cole\u00e7\u00f5es do servi\u00e7o</li> </ul> <p></p> <ul> <li>Pode agora adicionar cole\u00e7\u00f5es ao seu projeto QGIS</li> <li>Tamb\u00e9m pode construir uma pesquisa para adicionar um subconjunto da cole\u00e7\u00e3o</li> <li>Feche o <code>Gestor de fontes de dados</code>. Note que o QGIS aplicou um estilo padr\u00e3o, tal como faria se adicionasse    um layer baseado em ficheiro. Pode trabalhar com a cole\u00e7\u00e3o de forma semelhante; identificar, aplicar estilo,    filtrar, exportar, etc.</li> </ul> <p>Dica</p> <p>Ative o <code>Painel de Ferramentas de Debug/Desenvolvimento</code> (clique com o bot\u00e3o direito do rato em qualquer  parte dos \u00edcones da barra de ferramentas e selecione). Ele exibir\u00e1 o tr\u00e1fego HTTP dentro do QGIS e \u00e9 uma  ferramenta valiosa no debug de liga\u00e7\u00f5es falhadas.</p> <p>Nota</p> <p>Um n\u00famero crescente de clientes GIS de Desktop adiciona suporte para as OGC APIs em lan\u00e7amentos subsequentes.  Por exemplo, o ArcGIS Pro  suporta a OGC API - Features  desde a vers\u00e3o 2.8.</p>"},{"location":"pt/publishing/ogcapi-features/#gdalogr-avancado","title":"GDAL/OGR - Avan\u00e7ado","text":"<p>O GDAL/OGR fornece suporte para a OGC API - Features.  Isto significa que pode usar o <code>ogrinfo</code> e o <code>ogr2ogr</code> para consultar e converter dados de endpoints da OGC API -  Features, tal como qualquer outra fonte de dados vetoriais. Significa tamb\u00e9m que pode estabelecer liga\u00e7\u00f5es a endpoints  da OGC API - Features a partir de qualquer software que tenha uma interface para o GDAL, como MapServer, GeoServer,  Manifold, FME, ArcGIS, etc.</p> <p>Usar o OGR para interagir com a OGC API - Features</p> <ul> <li>Verifique se tem uma vers\u00e3o recente do GDAL instalada, caso contr\u00e1rio, use o GDAL do OSGeoLive</li> <li>Execute o <code>ogrinfo</code> na linha de comandos para verificar uma liga\u00e7\u00e3o \u00e0 OGC API - Features</li> </ul> Linux/Mac <p> <pre><code>ogrinfo OAPIF:https://demo.pygeoapi.io/master/collections/obs\n</code></pre> </p> Windows (PowerShell) <p> <pre><code>ogrinfo OAPIF:https://demo.pygeoapi.io/master/collections/obs\n</code></pre> </p> <p>Verifique as informa\u00e7\u00f5es de resumo sobre o layer com:</p> Linux/MacWindows (PowerShell) <p> <pre><code>ogrinfo OAPIF:https://demo.pygeoapi.io/master/collections/obs obs -so\n</code></pre> </p> <p> <pre><code>ogrinfo OAPIF:https://demo.pygeoapi.io/master/collections/obs obs -so\n</code></pre> </p> <p>Agora, vamos converter as observa\u00e7\u00f5es para uma shapefile</p> Linux/MacWindows (PowerShell) <p> <pre><code>ogr2ogr -f \"ESRI Shapefile\" obs.shp OAPIF:https://demo.pygeoapi.io/master/collections/obs\n</code></pre> </p> <p> <pre><code>ogr2ogr -f \"ESRI Shapefile\" obs.shp OAPIF:https://demo.pygeoapi.io/master/collections/obs\n</code></pre> </p> <p>Note</p> <p>Pode at\u00e9 usar o OGR para acrescentar novas features a uma cole\u00e7\u00e3o da OGC API - Features que suporte transa\u00e7\u00f5es.  Leia mais aqui sobre o suporte a transa\u00e7\u00f5es na pygeoapi.</p> <p>Usar a biblioteca GDAL a partir da linha de comandos com Docker</p> <p>Se n\u00e3o tiver a GDAL instalada, ou quiser usar/experimentar outra vers\u00e3o, pode sempre executar a imagem de Docker  da GDAL diretamente a partir da linha de comandos. A OSGeo fornece  Imagens de Docker da GDAL. O principal a ter em conta \u00e9 o  mapeamento correto de volumes Docker para que as ferramentas de linha de comandos da GDAL possam aceder a  ficheiros locais. Isto pode ser muito \u00fatil para convers\u00f5es r\u00e1pidas de dados. A maioria das imagens tamb\u00e9m vem  com bindings Python da GDAL.</p> <p>Primeiro, pode descarregar uma Imagem Docker muito pequena:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker pull ghcr.io/osgeo/gdal:alpine-small-latest\n</code></pre> </p> <p> <pre><code>docker pull ghcr.io/osgeo/gdal:alpine-small-latest\n</code></pre> </p> <p>Depois pode executar, por exemplo, as ferramentas de linha de comandos do OGR. O comando base \u00e9 <code>docker  run -it --rm ghcr.io/osgeo/gdal:alpine-small-latest</code>. Isto executa um contentor Docker interativamente (<code>-it</code>) e  remove-o ao sair (<code>--rm</code>). Abaixo est\u00e3o exemplos.</p> <p>Liste os formatos Vetoriais dispon\u00edveis no GDAL/OGR :</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -it --rm ghcr.io/osgeo/gdal:alpine-small-latest \\\n                    ogrinfo --formats\n</code></pre> </p> <p> <pre><code>docker run -it --rm ghcr.io/osgeo/gdal:alpine-small-latest ogrinfo --formats\n</code></pre> </p> <p>Obter informa\u00e7\u00e3o sobre um ficheiro geoespacial. Note o mapeamento de volumes: <code>-v $(pwd)/data:/work</code> para aceder  a ficheiros locais dentro do container de Docker (os comandos est\u00e3o numa \u00fanica linha, quebrados para facilitar  a leitura).</p> Linux/MacWindows (PowerShell) <p> <pre><code>cd git/workshop/exercises\ndocker run -v $(pwd)/data:/work -it --rm \\\n   ghcr.io/osgeo/gdal:alpine-small-latest \\\n   ogrinfo /work/tartu/bathingwater-estonia.geojson\n\nINFO: Open of `/work/tartu/bathingwater-estonia.geojson'\n      using driver `GeoJSON' successful.\n1: bathingwater-estonia (Point)\n</code></pre> </p> <p> <pre><code>cd git/workshop/exercises\ndocker run -v ${pwd}/data:/work -it --rm ghcr.io/osgeo/gdal:alpine-small-latest ogrinfo /work/tartu/bathingwater-estonia.geojson\n\nINFO: Open of `/work/tartu/bathingwater-estonia.geojson'\n      using driver `GeoJSON' successful.\n1: bathingwater-estonia (Point)\n</code></pre> </p> <p>Converter o ficheiro GeoJSON para um GeoPackage (GPKG) com <code>ogr2ogr</code>:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -v $(pwd)/data:/work -it --rm \\\n   ghcr.io/osgeo/gdal:alpine-small-latest \\\n   ogr2ogr -f \"GPKG\" /work/tartu/bathingwater-estonia.gpkg \\\n                     /work/tartu/bathingwater-estonia.geojson\n</code></pre> </p> <p> <code>bash docker run -v ${pwd}/data:/work -it --rm ghcr.io/osgeo/gdal:alpine-small-latest ogr2ogr -f \"GPKG\" /work/tartu/bathingwater-estonia.gpkg /work/tartu/bathingwater-estonia.geojson</code> </p> <p>Tamb\u00e9m pode usar o <code>ogrinfo</code> para obter informa\u00e7\u00f5es sobre uma cole\u00e7\u00e3o da OGC API - Features. Caso esteja a aceder  a uma cole\u00e7\u00e3o local, ter\u00e1 de se certificar de que o contentor \u00e9 executado na rede do anfitri\u00e3o (host):</p> Linux/MacWindows <p> <pre><code>docker run \\\n--network=host \\\nghcr.io/osgeo/gdal:alpine-small-latest \\\nogrinfo OAPIF:http://localhost:5000/collections/obs obs -so\n</code></pre> </p> <p> <pre><code>docker run --network=host ghcr.io/osgeo/gdal:alpine-small-latest ogrinfo OAPIF:http://localhost:5000/collections/obs obs -so\n</code></pre> </p>"},{"location":"pt/publishing/ogcapi-features/#owslib-avancado","title":"OWSLib - Avan\u00e7ado","text":"<p>A OWSLib \u00e9 uma biblioteca de Python para interagir com Servi\u00e7os Web OGC e suporta  v\u00e1rias OGC APIs, incluindo a OGC API - Features.</p> <p>Este exerc\u00edcio ser\u00e1 feito usando um jupyter notebook. Se preferir, pode faz\u00ea-lo usando Python a partir da linha de  comandos (ver abaixo).</p> <p>Antes de continuar, certifique-se de que est\u00e1 na pasta <code>workshop/exercises</code>. Precisar\u00e1 disso para poder usar o  jupyter notebook.</p> Linux/MacWindows (PowerShell) <p> <pre><code>pwd\n</code></pre> </p> <p> <pre><code>cd\n</code></pre> </p> <p>Depois use o docker para iniciar um contentor com o jupyter notebook, montando tamb\u00e9m a pasta local como um volume:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker run -p 8888:8888 -v $(pwd):/home/jovyan/work jupyter/base-notebook\n</code></pre> </p> <p> <pre><code>docker run -p 8888:8888 -v ${pwd}:/home/jovyan/work jupyter/base-notebook\n</code></pre> </p> <p>Introduza o url indicado na linha de comandos, <code>http://127.0.0.1:8888/lab</code> seguido de um token. Entre na pasta <code>work</code>  e abra o <code>features-owslib.ipynb</code>.</p> <p></p> <p>Execute o notebook para explorar um servidor OGC API - Features, usando a owslib.</p> <p>Nota</p> <p>Pode executar as mesmas instru\u00e7\u00f5es usando o seu servidor pygeoapi local, em vez da inst\u00e2ncia  de demonstra\u00e7\u00e3o da pygeoapi.</p>"},{"location":"pt/publishing/ogcapi-features/#usar-python-a-partir-da-linha-de-comandos","title":"Usar Python a partir da linha de comandos","text":"<p>Interagir com a OGC API - Features via OWSLib</p> <p>Se n\u00e3o tiver o Python instalado, considere executar este exerc\u00edcio num contentor Docker. Veja o  Cap\u00edtulo de Configura\u00e7\u00e3o.</p> Linux/MacWindows (PowerShell) <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p>Depois, inicie uma sess\u00e3o de consola Python com <code>python3</code> (pare a sess\u00e3o escrevendo <code>exit()</code>).</p> Linux/MacWindows (PowerShell) <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.features import Features\n&gt;&gt;&gt; w = Features('https://demo.pygeoapi.io/master')\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master'\n&gt;&gt;&gt; conformance = w.conformance()\n{u'conformsTo': [u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core', u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30', u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html', u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson']}\n&gt;&gt;&gt; api = w.api()  # OpenAPI document\n&gt;&gt;&gt; collections = w.collections()\n&gt;&gt;&gt; len(collections['collections'])\n13\n&gt;&gt;&gt; feature_collections = w.feature_collections()\n&gt;&gt;&gt; len(feature_collections)\n13\n&gt;&gt;&gt; lakes = w.collection('lakes')\n&gt;&gt;&gt; lakes['id']\n'lakes'\n&gt;&gt;&gt; lakes['title']\n'Large Lakes'\n&gt;&gt;&gt; lakes['description']\n'lakes of the world, public domain'\n&gt;&gt;&gt; lakes_queryables = w.collection_queryables('lakes')\n&gt;&gt;&gt; len(lakes_queryables['properties'])\n6\n&gt;&gt;&gt; lakes_query = w.collection_items('lakes')\n&gt;&gt;&gt; lakes_query['features'][0]['properties']\n{u'scalerank': 0, u'name_alt': None, u'admin': None, u'featureclass': u'Lake', u'id': 0, u'name': u'Lake Baikal'}\n</code></pre> </p> <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.features import Features\n&gt;&gt;&gt; w = Features('https://demo.pygeoapi.io/master')\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master'\n&gt;&gt;&gt; conformance = w.conformance()\n{u'conformsTo': [u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core', u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30', u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html', u'http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson']}\n&gt;&gt;&gt; api = w.api()  # OpenAPI document\n&gt;&gt;&gt; collections = w.collections()\n&gt;&gt;&gt; len(collections['collections'])\n13\n&gt;&gt;&gt; feature_collections = w.feature_collections()\n&gt;&gt;&gt; len(feature_collections)\n13\n&gt;&gt;&gt; lakes = w.collection('lakes')\n&gt;&gt;&gt; lakes['id']\n'lakes'\n&gt;&gt;&gt; lakes['title']\n'Large Lakes'\n&gt;&gt;&gt; lakes['description']\n'lakes of the world, public domain'\n&gt;&gt;&gt; lakes_queryables = w.collection_queryables('lakes')\n&gt;&gt;&gt; len(lakes_queryables['properties'])\n6\n&gt;&gt;&gt; lakes_query = w.collection_items('lakes')\n&gt;&gt;&gt; lakes_query['features'][0]['properties']\n{u'scalerank': 0, u'name_alt': None, u'admin': None, u'featureclass': u'Lake', u'id': 0, u'name': u'Lake Baikal'}\n</code></pre> </p> <p>Nota</p> <p>Consulte a documenta\u00e7\u00e3o oficial da OWSLib para mais exemplos.</p>"},{"location":"pt/publishing/ogcapi-features/#resumo","title":"Resumo","text":"<p>Parab\u00e9ns! Agora \u00e9 capaz de publicar dados vetoriais com a pygeoapi.</p>"},{"location":"pt/publishing/ogcapi-maps/","title":"Exerc\u00edcio 4 - Mapas de dados geoespaciais via OGC API - Maps","text":"<p>s--- title: Exerc\u00edcio 4 - Mapas de dados geoespaciais via OGC API - Maps</p>"},{"location":"pt/publishing/ogcapi-maps/#exercicio-4-mapas-de-dados-geoespaciais-via-ogc-api-maps","title":"Exerc\u00edcio 4 - Mapas de dados geoespaciais via OGC API - Maps","text":"<p>A OGC API - Maps fornece uma API Web para aceder a quaisquer dados geoespaciais como uma imagem de mapa georreferenciada.</p> <ul> <li>OGC API - Maps</li> </ul>"},{"location":"pt/publishing/ogcapi-maps/#suporte-da-pygeoapi","title":"Suporte da pygeoapi","text":"<p>A pygeoapi suporta a especifica\u00e7\u00e3o da OGC API - Maps, utilizando o MapServer MapScript e uma fachada WMS como backends principais.</p> <p>Note</p> <p>Consulte a documenta\u00e7\u00e3o oficial para mais informa\u00e7\u00f5es sobre os backends de mapa suportados.</p>"},{"location":"pt/publishing/ogcapi-maps/#publicar-um-conjunto-de-dados-raster","title":"Publicar um conjunto de dados raster","text":"<p>Nesta sec\u00e7\u00e3o, iremos expor um ficheiro Geopackage dispon\u00edvel na localiza\u00e7\u00e3o <code>workshop/exercises/data/airport.gpkg</code> utilizando o MapServer MapScript. Estes dados podem ser consumidos por v\u00e1rios clientes que s\u00e3o compat\u00edveis com a OGC API - Maps. Uma lista de alguns desses clientes pode ser encontrada aqui. Aqui tamb\u00e9m podemos passar o estilo no formato .sld, que pode ser gerado no Geoserver, QGIS, etc.</p> <p>Interagir com a OGC API - Maps via MapScript</p> <p>Abra o ficheiro de configura\u00e7\u00e3o da pygeoapi num editor de texto. Encontre a linha <code># START - EXERCISE 4 - Maps</code>.</p> <p>Descomente a sec\u00e7\u00e3o relacionada com #airports.</p> <pre><code>airports:\n    type: collection\n    title: airports of the world\n    description: Point data representing airports around the world with various metadata such as name, Code, etc.\n    keywords:\n        - airports\n        - natural earth\n    links:\n        - type: text/html\n          rel: canonical\n          title: information\n          href: https://www.naturalearthdata.com/downloads/10m-cultural-vectors/airports/\n          hreflang: en-US\n    extents:\n        spatial:\n            bbox: [-180,-90,180,90]\n            crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n        temporal:\n            begin:\n            end: null  # or empty\n    providers:\n        - type: map\n          name: MapScript\n          data: /data/airport.gpkg\n          options:\n              type: MS_LAYER_POINT\n              layer: airport\n              style: /data/airport.sld\n          format:\n              name: png\n              mimetype: image/png\n</code></pre> <p>Note</p> <p>Consulte a documenta\u00e7\u00e3o oficial para mais informa\u00e7\u00f5es sobre os backends de mapa suportados.</p>"},{"location":"pt/publishing/ogcapi-maps/#a-pygeoapi-como-um-proxy-wms","title":"A pygeoapi como um proxy WMS","text":"<p>Pode consultar a sec\u00e7\u00e3o \"A pygeoapi como uma Ponte para Outros Servi\u00e7os\" para aprender a publicar WMS como OGC API - Maps.</p>"},{"location":"pt/publishing/ogcapi-maps/#acesso-do-lado-do-cliente","title":"Acesso do lado do cliente","text":""},{"location":"pt/publishing/ogcapi-maps/#qgis","title":"QGIS","text":"<p>O QGIS adicionou suporte para APIs que fornecem layers de imagem renderizadas atrav\u00e9s do seu suporte raster.</p> <p>Adicionar camada da OGC API - Maps ao QGIS</p> <ul> <li>Instale uma vers\u00e3o recente do QGIS (&gt;3.28).</li> <li>Abra o painel <code>Adicionar camada raster</code>.</li> <li>Selecione <code>OGCAPI</code> para o tipo de Fonte.</li> <li>Adicione o ponto de extremidade local como fonte <code>http://localhost:5000/collections/airports</code>.</li> <li>Selecione <code>PNG</code> como formato de imagem.</li> <li>Finalmente, adicione a camada ao mapa.</li> </ul>"},{"location":"pt/publishing/ogcapi-maps/#owslib","title":"OWSLib","text":"<p>A OWSLib \u00e9 uma biblioteca Python para interagir com os Servi\u00e7os Web da OGC e suporta v\u00e1rias OGC APIs, incluindo a OGC API - Maps.</p> <p>Interagir com a OGC API - Maps via OWSLib</p> <p>Se n\u00e3o tiver Python instalado, considere executar este exerc\u00edcio num contentor Docker. Consulte o Cap\u00edtulo de Configura\u00e7\u00e3o.</p> Linux/MacWindows (PowerShell) <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p>Para executar em Python:</p> Linux/MacWindows (PowerShell) <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.maps import Maps\n&gt;&gt;&gt; m = Maps('http://localhost:5000')\n&gt;&gt;&gt; data = m.map('airports', width=1200, height=800, transparent=False)\n&gt;&gt;&gt; with open(\"output.png\", \"wb\") as fh:\n...     fh.write(data.getbuffer())\n</code></pre> </p> <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.maps import Maps\n&gt;&gt;&gt; m = Maps('http://localhost:5000')\n&gt;&gt;&gt; data = m.map('airports', width=1200, height=800, transparent=False)\n&gt;&gt;&gt; with open(\"output.png\", \"wb\") as fh:\n...     fh.write(data.getbuffer())\n</code></pre> </p> <p>Note</p> <p>Consulte a documenta\u00e7\u00e3o oficial da OWSLib para mais exemplos.</p>"},{"location":"pt/publishing/ogcapi-maps/#resumo","title":"Resumo","text":"<p>Parab\u00e9ns! Agora \u00e9 capaz de servir um OGC WMS atrav\u00e9s da pygeoapi e da OGC API - Maps.</p>"},{"location":"pt/publishing/ogcapi-processes/","title":"Exerc\u00edcio 8 - Fun\u00e7\u00f5es via OGC API - Processes","text":"<p>OGC API - Processes suporta o encapsulamento de tarefas computacionais em processos execut\u00e1veis que podem ser oferecidos por um servidor atrav\u00e9s de uma Web API e ser invocados por uma aplica\u00e7\u00e3o cliente.</p> <ul> <li>OGC API - Processes: Part 1: Core</li> </ul> <p>A OGC API - Processes utiliza a OGC API - Common como bloco de constru\u00e7\u00e3o, permitindo assim implementa\u00e7\u00e3o e integra\u00e7\u00e3o simplificadas para clientes e utilizadores.</p>"},{"location":"pt/publishing/ogcapi-processes/#suporte-na-pygeoapi","title":"Suporte na pygeoapi","text":"<p>A pygeoapi suporta a especifica\u00e7\u00e3o OGC API - Processes, com a capacidade de publicar c\u00f3digo Python (independentemente de qu\u00e3o simples ou complexo) como uma defini\u00e7\u00e3o de Processo OGC API. A pygeoapi tamb\u00e9m suporta processamento s\u00edncrono ou ass\u00edncrono, com a capacidade de armazenar e recuperar o estado/resultados de 'tarefas'.</p> <p>Note</p> <p>Consulte a documenta\u00e7\u00e3o oficial para mais informa\u00e7\u00f5es sobre publica\u00e7\u00e3o de processos na pygeoapi</p>"},{"location":"pt/publishing/ogcapi-processes/#publicar-codigo-python-como-um-processo-na-pygeoapi","title":"Publicar c\u00f3digo Python como um processo na pygeoapi","text":"<p>Com a pygeoapi vamos configurar OGC API - Processes usando c\u00f3digo Python que implementa o <code>BaseProcessor</code> da pygeoapi, que \u00e9 uma classe abstrata base fundamental da pygeoapi. Neste exerc\u00edcio vamos implementar uma fun\u00e7\u00e3o \"squared\" como um processo usando o c\u00f3digo Python de exemplo em <code>workshop/exercises/plugins/process/squared.py</code>. O processo j\u00e1 est\u00e1 definido para fazer parte do ambiente e configura\u00e7\u00e3o da pygeoapi.</p> <p>Atualizar a configura\u00e7\u00e3o da pygeoapi</p> <p>Abra o ficheiro de configura\u00e7\u00e3o da pygeoapi num editor de texto. Adicione uma nova sec\u00e7\u00e3o de processo da seguinte forma:</p> <pre><code>    squared:\n        type: process\n        processor:\n            name: pygeoapi.process.squared.SquaredProcessor\n</code></pre> <p>Atualizar o c\u00f3digo Python</p> <p>Abra o c\u00f3digo Python em <code>workshop/exercises/plugins/process/squared.py</code>. Encontre a fun\u00e7\u00e3o <code>execute</code> e atualize o c\u00f3digo Python para calcular o valor de entrada ao quadrado.</p> <p>Guarde a configura\u00e7\u00e3o e reinicie o Docker Compose. Navegue para http://localhost:5000/processes para avaliar se o novo processo foi publicado. Inspecione os metadados detalhados do processo navegando para http://localhost:5000/processes/squared para inspecionar como os metadados do processo definidos no c\u00f3digo/ficheiro Python s\u00e3o disponibilizados em JSON.</p>"},{"location":"pt/publishing/ogcapi-processes/#acesso-cliente","title":"Acesso cliente","text":""},{"location":"pt/publishing/ogcapi-processes/#swagger","title":"Swagger","text":"<p>A forma mais f\u00e1cil de testar o novo processo \u00e9 usando a interface Swagger incorporada da pygeoapi. Navegue para http://localhost:5000/openapi e experimente o processo na interface Swagger.</p> <p></p> <p></p> <p></p>"},{"location":"pt/publishing/ogcapi-processes/#resumo","title":"Resumo","text":"<p>Parab\u00e9ns! Agora \u00e9 capaz de publicar c\u00f3digo Python como um processo na pygeoapi.</p>"},{"location":"pt/publishing/ogcapi-records/","title":"Exerc\u00edcio 6 - Metadados via OGC API - Records","text":"<p>A OGC API - Records fornece uma API de Web com a capacidade de criar, modificar, e consultar metadados na Web:</p> <ul> <li>Leia a especifica\u00e7\u00e3o OGC API - Records: Part 1: Core no website da OGC.</li> </ul> <p>A OGC API - Records utiliza a OGC API - Features como bloco de constru\u00e7\u00e3o, permitindo assim implementa\u00e7\u00e3o e integra\u00e7\u00e3o simplificadas para clientes e utilizadores.</p>"},{"location":"pt/publishing/ogcapi-records/#suporte-na-pygeoapi","title":"Suporte na pygeoapi","text":"<p>A pygeoapi suporta a especifica\u00e7\u00e3o OGC API - Records, usando Elasticsearch e TinyDB rasterio como backends principais.</p> <p>Note</p> <p>Consulte a documenta\u00e7\u00e3o oficial para mais informa\u00e7\u00f5es sobre backends de cat\u00e1logo/metadados suportados</p>"},{"location":"pt/publishing/ogcapi-records/#publicar-registos-de-metadados-na-pygeoapi","title":"Publicar registos de metadados na pygeoapi","text":"<p>Com a pygeoapi vamos configurar OGC API - Records usando qualquer fornecedor de dados suportado. Neste exerc\u00edcio vamos usar o backend de cat\u00e1logo TinyDB. Vamos utilizar o cat\u00e1logo de exemplo em <code>workshop/exercises/data/tartu/metadata/catalogue.tinydb</code>.</p> <p>Atualizar a configura\u00e7\u00e3o da pygeoapi</p> <p>Abra o ficheiro de configura\u00e7\u00e3o da pygeoapi num editor de texto. Adicione uma nova sec\u00e7\u00e3o de conjunto de dados da seguinte forma:</p> <pre><code>    example_catalogue:\n        type: collection\n        title: FOSS4G Europe Estonia national catalogue\n        description: FOSS4G Europe Estonia national catalogue\n        keywords:\n            - estonia\n            - catalogue\n            - FOSS4G Europe\n        links:\n            - type: text/html\n              rel: canonical\n              title: information\n              href: https://metadata.geoportaal.ee\n              hreflang: en-US\n        extents:\n            spatial:\n                bbox: [23.3397953631, 57.4745283067, 28.1316992531, 59.6110903998]\n                crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n        providers:\n            - type: record\n              name: TinyDBCatalogue\n              data: /data/tartu/metadata/catalogue.tinydb\n              id_field: externalId\n              time_field: recordCreated\n              title_field: title\n</code></pre> <p>Guarde a configura\u00e7\u00e3o e reinicie o Docker Compose. Navegue para http://localhost:5000/collections para avaliar se o novo conjunto de dados foi publicado.</p>"},{"location":"pt/publishing/ogcapi-records/#formatos-de-metadados","title":"Formatos de metadados","text":"<p>Por defeito, a pygeoapi suporta e espera o modelo de records e os \"queryables\" da OGC API - Records. Para formatos de metadados adicionais, pode desenvolver o seu pr\u00f3prio plugin personalizado para a pygeoapi, ou converter os seus metadados para o modelo de records da OGC API - Records antes de os adicionar \u00e0 pygeoapi.</p> <p>Instalar a OWSLib</p> <p>Se n\u00e3o tiver o Python instalado, considere executar este exerc\u00edcio num container Docker. Consulte o Cap\u00edtulo de Configura\u00e7\u00e3o.</p> Linux/MacWindows (PowerShell) <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p> <pre><code>pip3 install owslib\n</code></pre> </p>"},{"location":"pt/publishing/ogcapi-records/#exemplo-de-loader-de-iso-19139-para-tinydbcatalogue","title":"Exemplo de loader de ISO 19139 para TinyDBCatalogue","text":"<p>\u00c9 poss\u00edvel carregar mais metadados de exemplo ISO19139 numa base de dados TinyDB com o seguinte script (raw):</p> Linux/MacWindows (PowerShell) <p> <pre><code>cd workshop/exercises/data/tartu/metadata\ncurl -O https://raw.githubusercontent.com/geopython/pygeoapi/master/tests/load_tinydb_records.py\npython3 load_tinydb_records.py xml catalogue.tinydb\n</code></pre> </p> <p> <pre><code>cd workshop/exercises/data/tartu/metadata\ncurl https://raw.githubusercontent.com/geopython/pygeoapi/master/tests/load_tinydb_records.py\npython3 load_tinydb_records.py xml catalogue.tinydb\n</code></pre> </p> <p>Se n\u00e3o tiver o curl instalado, copie o URL acima para o seu navegador web e guarde localmente.</p> <p>Se n\u00e3o tiver o Python instalado, pode usar o loader utilizando o container Docker da OWSLib. Consulte o Cap\u00edtulo de Configura\u00e7\u00e3o.</p> <p>Usar o container Docker da OWSLib para carregar metadados</p> Linux/MacWindows (PowerShell) <p> <pre><code>cd workshop/exercises\ndocker run -it --rm --network=host --name owslib -v $(pwd)/data:/data python:3.10-slim /bin/bash\npip3 install owslib\napt-get update -y &amp;&amp; apt-get install curl -y\ncurl -O https://raw.githubusercontent.com/geopython/pygeoapi/master/tests/load_tinydb_records.py\npython3 load_tinydb_records.py /data/tartu/metadata/xml /data/tartu/metadata/catalogue.tinydb\n</code></pre> </p> <p> <pre><code>cd workshop/exercises\ndocker run -it --rm --network=host --name owslib -v ${pwd}/data:/data python:3.10-slim /bin/bash\npip3 install owslib\napt-get update -y &amp;&amp; apt-get install curl -y\ncurl -O https://raw.githubusercontent.com/geopython/pygeoapi/master/tests/load_tinydb_records.py\npython3 load_tinydb_records.py /data/tartu/metadata/xml /data/tartu/metadata/catalogue.tinydb\n</code></pre> </p> <p>Navegue para http://localhost:5000/collections/example_catalogue para avaliar se os novos metadados foram publicados na cole\u00e7\u00e3o.</p> <p>Tip</p> <p>O pygeometa \u00e9 um pacote Python para gerar metadados para conjuntos de dados geoespaciais. AOpygeometa permite gerir metadados em ficheiros YAML simples \"metadata control files (MCF)\", e suporta importa\u00e7\u00e3o, exporta\u00e7\u00e3o, bem como transforma\u00e7\u00f5es para muitos formatos de metadados geoespaciais. Metadados da OGC API - Records podem ser produzidos usando o pygeometa, quer a partir de ficheiros MCF ou por transforma\u00e7\u00e3o de outros formatos.</p> <p>Instale e execute o pygeometa como abaixo para ter uma ideia dos v\u00e1rios comandos e funcionalidades (al\u00e9m disso, consulte o tutorial).</p> Linux/MacWindows (PowerShell) <p> <pre><code>pip3 install pygeometa\npygeometa --help\n</code></pre> </p> <p> <pre><code>pip3 install pygeometa\npygeometa --help\n</code></pre> </p>"},{"location":"pt/publishing/ogcapi-records/#a-pygeoapi-como-um-proxy-de-csw","title":"A pygeoapi como um proxy de CSW","text":"<p>Pode verificar a sec\u00e7\u00e3o \"pygeoapi como uma Ponte para Outros servi\u00e7os\" para aprender como publicar CSW como OGC API - Records.</p>"},{"location":"pt/publishing/ogcapi-records/#acesso-de-cliente","title":"Acesso de cliente","text":""},{"location":"pt/publishing/ogcapi-records/#qgis","title":"QGIS","text":"<p>O QGIS suporta a OGC API - Records atrav\u00e9s do plugin MetaSearch. O MetaSearch focava-se originalmente apenas em Catalogue Service for the Web (OGC:CSW), mas foi estendido para a OGC API - Records. O MetaSearch \u00e9 um plugin padr\u00e3o no QGIS e n\u00e3o requer instala\u00e7\u00e3o adicional.</p> <p>Consultar a OGC API - Records a partir do QGIS</p> <p>Siga estes passos para se conectar a um servi\u00e7o e consultar conjuntos de dados:</p> <ul> <li>Localize o plugin MetaSearch no menu Web ou na Barra de Ferramentas . O painel de pesquisa principal aparecer\u00e1 com a lista de cat\u00e1logos padr\u00e3o do MetaSearch j\u00e1 preenchida.</li> </ul> <p></p> <ul> <li>abra o separador <code>Services</code>, para encontrar o bot\u00e3o <code>New</code> para criar uma nova liga\u00e7\u00e3o</li> <li>adicione uma liga\u00e7\u00e3o a <code>https://demo.pygeoapi.io/master</code></li> <li>clique em <code>Service Info</code> para obter informa\u00e7\u00f5es sobre o servi\u00e7o</li> <li>volte ao separador Search</li> <li>selecione a liga\u00e7\u00e3o que acabou de criar</li> <li>escreva um termo de pesquisa e clique em <code>search</code></li> <li>repare que quando seleciona um resultado da pesquisa, uma pegada vermelha \u00e9 desenhada no mapa, destacando a localiza\u00e7\u00e3o do conjunto de dados</li> </ul> <p></p>"},{"location":"pt/publishing/ogcapi-records/#owslib","title":"OWSLib","text":"<p>A OWSLib \u00e9 uma biblioteca Python para interagir com OGC Web Services e suporta v\u00e1rias OGC APIs, incluindo a OGC API - Records.</p> <p>Interagir com a OGC API - Records via OWSLib</p> <p>Se n\u00e3o tiver o Python instalado, considere executar este exerc\u00edcio num contentor Docker. Consulte o Cap\u00edtulo de Configura\u00e7\u00e3o.</p> Linux/MacWindows (PowerShell) <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p> <pre><code>pip3 install owslib\n</code></pre> </p> <p>Depois, inicie uma sess\u00e3o de consola Python com <code>python3</code> (pare a sess\u00e3o escrevendo <code>exit()</code>).</p> Linux/MacWindows (PowerShell) <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.records import Records\n&gt;&gt;&gt; SERVICE_URL = 'https://demo.pygeoapi.io/master/'\n&gt;&gt;&gt; w = Records(SERVICE_URL)\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master'\n&gt;&gt;&gt; dutch_metacat = w.collection('dutch-metadata')\n&gt;&gt;&gt; dutch_metacat['id']\n'dutch-metadata'\n&gt;&gt;&gt; dutch_metacat['title']\n'Sample metadata records from Dutch Nationaal georegister'\n&gt;&gt;&gt; dutch_metacat['description']\n'Sample metadata records from Dutch Nationaal georegister'\n&gt;&gt;&gt; dutch_metacat_query = w.collection_items('dutch-metadata', limit=1)\n&gt;&gt;&gt; dutch_metacat_query['numberMatched']\n198\n&gt;&gt;&gt; dutch_metacat_query['numberReturned']\n1\n&gt;&gt;&gt; dutch_metacat_query = w.collection_items('dutch-metadata', q='Wegpanorama')\n&gt;&gt;&gt; dutch_metacat_query['numberMatched']\n2\n</code></pre> </p> <p> <pre><code>&gt;&gt;&gt; from owslib.ogcapi.records import Records\n&gt;&gt;&gt; SERVICE_URL = 'https://demo.pygeoapi.io/master/'\n&gt;&gt;&gt; w = Records(SERVICE_URL)\n&gt;&gt;&gt; w.url\n'https://demo.pygeoapi.io/master'\n&gt;&gt;&gt; dutch_metacat = w.collection('dutch-metadata')\n&gt;&gt;&gt; dutch_metacat['id']\n'dutch-metadata'\n&gt;&gt;&gt; dutch_metacat['title']\n'Sample metadata records from Dutch Nationaal georegister'\n&gt;&gt;&gt; dutch_metacat['description']\n'Sample metadata records from Dutch Nationaal georegister'\n&gt;&gt;&gt; dutch_metacat_query = w.collection_items('dutch-metadata', limit=1)\n&gt;&gt;&gt; dutch_metacat_query['numberMatched']\n198\n&gt;&gt;&gt; dutch_metacat_query['numberReturned']\n1\n&gt;&gt;&gt; dutch_metacat_query = w.collection_items('dutch-metadata', q='Wegpanorama')\n&gt;&gt;&gt; dutch_metacat_query['numberMatched']\n2\n</code></pre> </p> <p>Note</p> <p>Consulte a documenta\u00e7\u00e3o oficial da OWSLib para mais exemplos.</p>"},{"location":"pt/publishing/ogcapi-records/#resumo","title":"Resumo","text":"<p>Parab\u00e9ns! Agora \u00e9 capaz de publicar metadados na pygeoapi.</p>"},{"location":"pt/publishing/ogcapi-tiles/","title":"Exerc\u00edcio 5 - Tiles de dados geoespaciais via OGC API - Tiles","text":"<p>A OGC API - Tiles fornece uma API Web para disponibilizar tiles (ou mosaicos) de informa\u00e7\u00e3o geoespacial. S\u00e3o suportadas diferentes formas de informa\u00e7\u00e3o geoespacial, como tiles de elementos vetoriais (\"vector tiles\"), coverages, mapas (ou imagens) e, potencialmente, outros tipos de tiles de informa\u00e7\u00e3o geoespacial. O standard est\u00e1 dispon\u00edvel neste documento:</p> <ul> <li>OGC API - Tiles: Parte 1: Core</li> </ul> <p>Note</p> <p>A OGC API - Tiles estende a estrutura de URL <code>collections/*</code> (os conjuntos de tiles s\u00e3o listados em <code>/collections/example/tiles</code>:</p> <pre><code>https://demo.pygeoapi.io/collections/lakes/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}?f=mvt\n</code></pre>"},{"location":"pt/publishing/ogcapi-tiles/#suporte-da-pygeoapi","title":"Suporte da pygeoapi","text":"<p>A pygeoapi suporta a especifica\u00e7\u00e3o core da OGC API - Tiles e \u00e9 capaz de anunciar um conjunto de tiles existente. Note que a pr\u00f3pria pygeoapi n\u00e3o renderiza tiles a partir de dados de origem, mas suporta a publica\u00e7\u00e3o de tiles de diferentes fornecedores de backend. </p> <p>Note</p> <p>A estrutura de URL da OGC API - Tiles \u00e9 compat\u00edvel com camadas XYZ em bibliotecas comuns como OpenLayers, Leaflet e MapML.</p> <p>Note</p> <p>Consulte a documenta\u00e7\u00e3o oficial para mais informa\u00e7\u00f5es sobre os backends de tiles suportados.</p> <p>Note</p> <p>A pygeoapi atualmente suporta dois Tile Matrix Sets muito conhecidos: <code>WorldCRS84Quad</code> e <code>WebMercatorQuad</code>. A sua defini\u00e7\u00e3o \u00e9 publicada no ponto de extremidade /TileMatrixSets.</p>"},{"location":"pt/publishing/ogcapi-tiles/#publicar-tiles-vetoriais-pre-renderizadas","title":"Publicar tiles vetoriais pr\u00e9-renderizadas","text":"<p>Neste cen\u00e1rio, as tiles devem ser pr\u00e9-renderizadas antes de serem servidas. O fornecedor <code>MVT-tippecanoe</code> permite servir tiles pr\u00e9-renderizadas pelo tippecanoe, seja a partir de uma directoria no disco ou de um servidor est\u00e1tico (ex.: bucket S3 ou MinIO).</p> <p>Para este exerc\u00edcio, ir\u00e1 publicar um conjunto de dados vetoriais dos limites dos bairros da corpora\u00e7\u00e3o municipal da grande Hyderabad, a partir da localiza\u00e7\u00e3o abaixo:</p> <ul> <li>data: <code>workshop/exercises/data/hyderabad/greater_hyderabad_municipal_corporation_ward_Boundaries.geojson</code></li> </ul> <p>Como primeiro passo vamos gerar as tiles, usando o tippecanoe:</p> <p>Usar o tippecanoe para gerar tiles vetoriais</p> Linux/MacWindows (PowerShell) <p> <pre><code>cd workshop/exercises\ndocker run -it --rm -v $(pwd)/data:/data emotionalcities/tippecanoe \\\ntippecanoe -r1 -pk -pf --output-to-directory=/data/tiles/ --force --maximum-zoom=16 \\\n--extend-zooms-if-still-dropping --no-tile-compression /data/hyderabad/greater_hyderabad_municipal_corporation_ward_Boundaries.geojson\n</code></pre> </p> <p> <pre><code>cd workshop/exercises\ndocker run -it --rm -v ${pwd}/data:/data emotionalcities/tippecanoe tippecanoe -r1 -pk -pf --output-to-directory=/data/tiles/ --force --maximum-zoom=16 --extend-zooms-if-still-dropping --no-tile-compression /data/hyderabad/greater_hyderabad_municipal_corporation_ward_Boundaries.geojson\n</code></pre> </p> <p>Note</p> <p>Por favor, note que a ferramenta tippecanoe requer que o ficheiro de entrada esteja em WGS84, e produz sempre tiles em WebMercator.</p> <p>Atualizar a configura\u00e7\u00e3o da pygeoapi</p> <p>Abra a configura\u00e7\u00e3o da pygeoapi num editor de texto. Adicione uma nova sec\u00e7\u00e3o de conjunto de dados da seguinte forma:</p> <pre><code>    hyderabad:\n        type: collection\n        title: Greater Hyderabad Municipal Corporation ward boundaries\n        description: The city ward boundaries represent the administrative and electoral boundary areas of the city. It plays a great role in planning of the city, for each council of the municipal corporation.\n        keywords:\n           - Boundaries\n           - Administrative\n           - Ward\n        links:\n            - type: text/html\n              rel: canonical\n              title: information\n              href: https://livingatlas-dcdev.opendata.arcgis.com/datasets/a090c89d52f1498f96a82e97b8bfb83e_0/about\n              hreflang: en-US\n        extents:\n            spatial:\n                bbox: [78.2379194985166180,17.2908061510471995,78.6217049083810764,17.5618443356918768]\n                crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            temporal:\n                begin: 2011-11-11\n                end: null  # or empty\n        providers:\n            - type: feature\n              name: GeoJSON\n              data: /data/hyderabad/greater_hyderabad_municipal_corporation_ward_Boundaries.geojson\n              id_field: objectid\n            - type: tile\n              name: MVT-tippecanoe\n              data: /data/tiles/  # local directory tree\n              options:\n                zoom:\n                    min: 0\n                    max: 16\n              format:\n                    name: pbf\n                    mimetype: application/vnd.mapbox-vector-tile\n</code></pre> <p>Guarde o ficheiro e reinicie o Docker Compose. Navegue para http://localhost:5000/collections para avaliar se o novo conjunto de dados foi publicado.</p> <p>Verifica\u00e7\u00e3o adicional para os seguintes endpoints espec\u00edficos de tiles na cole\u00e7\u00e3o <code>hyderabad</code>:</p> <ul> <li>links de tiles em http://localhost:5000/collections/hyderabad/tiles</li> <li>metadados de tiles em http://localhost:5000/collections/hyderabad/tiles/WebMercatorQuad/metadata</li> </ul> <p></p>"},{"location":"pt/publishing/ogcapi-tiles/#publicar-tiles-vetoriais-a-partir-do-elasticsearch","title":"Publicar tiles vetoriais a partir do Elasticsearch","text":"<p>O Elasticsearch fornece um middleware que renderiza um \u00edndice dinamicamente, como tiles vetoriais. Este middleware tamb\u00e9m \u00e9 suportado pelo backend mvt da pygeoapi.</p> <p>Se quiser explorar a publica\u00e7\u00e3o de tiles vetoriais usando o Elasticsearch, clone o reposit\u00f3rio pygeoapi-examples:</p> Linux/MacWindows (PowerShell) <p> <pre><code>git clone https://github.com/geopython/pygeoapi-examples.git\n</code></pre> </p> <p> <pre><code>git clone https://github.com/geopython/pygeoapi-examples.git\n</code></pre> </p> <p>Depois, mude para a pasta <code>docker/mvt-elastic</code>:</p> Linux/MacWindows (PowerShell) <p> <pre><code>cd docker/mvt-elastic\n</code></pre> </p> <p> <pre><code>cd docker/mvt-elastic\n</code></pre> </p> <p>Edite o script <code>add-data.sh</code> na pasta <code>ES</code>, adicionando estas duas linhas antes do fim:</p> <pre><code>    curl -o /tmp/hyderabad.geojson https://raw.githubusercontent.com/geopython/diving-into-pygeoapi/refs/heads/main/workshop/exercises/data/hyderabad/greater_hyderabad_municipal_corporation_ward_Boundaries.geojson\n    python3 /load_es_data.py /tmp/hyderabad.geojson objectid\n</code></pre> <p>Acima, estamos a descarregar o <code>greater_hyderabad_municipal_corporation_ward_Boundaries.geojson</code> para dentro do container e a ingeri-lo num \u00edndice do Elasticsearch. Depois disto, precisamos de construir a imagem docker:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker compose build\n</code></pre> </p> <p> <pre><code>docker compose build\n</code></pre> </p> <p>Edite a configura\u00e7\u00e3o <code>docker.config.yml</code> na pasta <code>pygeoapi</code>, adicionando este bloco de c\u00f3digo antes do fim:</p> <pre><code>    hyderabad:\n        type: collection\n        title: Limites dos bairros da Corpora\u00e7\u00e3o Municipal da Grande Hyderabad\n        description: Os limites dos bairros da cidade representam as \u00e1reas de fronteira administrativa e eleitoral da cidade. Desempenha um grande papel no planeamento da cidade, para cada conselho da corpora\u00e7\u00e3o municipal.\n        keywords:\n           - Limites\n           - Administrativo\n           - Bairro\n        links:\n            - type: text/html\n              rel: canonical\n              title: informa\u00e7\u00e3o\n              href: https://livingatlas-dcdev.opendata.arcgis.com/datasets/a090c89d52f1498f96a82e97b8bfb83e_0/about\n              hreflang: en-US\n        extents:\n            spatial:\n                bbox: [78.2379194985166180,17.2908061510471995,78.6217049083810764,17.5618443356918768]\n                crs: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            temporal:\n                begin: 2011-11-11\n                end: null  # ou vazio\n        providers:\n            - type: feature\n              name: Elasticsearch\n              #Nota: elastic_search \u00e9 o container de docker do ES, o nome \u00e9 definido no docker-compose.yml\n              data: http://elastic_search:9200/hyderabad\n              id_field: objectid\n            - type: tile\n              name: MVT-elastic\n              data: http://elastic_search:9200/hyderabad/_mvt/geometry/{z}/{x}/{y}?grid_precision=0\n              # o \u00edndice deve ter um geo_point\n              options:\n                zoom:\n                    min: 0\n                    max: 29\n              format:\n                    name: pbf\n                    mimetype: application/vnd.mapbox-vector-tile\n</code></pre> <p>Esta configura\u00e7\u00e3o permite a publica\u00e7\u00e3o do <code>greater_hyderabad_municipal_corporation_ward_Boundaries.geojson</code> como OGC API - Features e OGC API - Tiles.</p> <p>Note</p> <p>A API de pesquisa de tiles vetoriais do Elastic suporta n\u00edveis de zoom de 0 a 29.</p> <p>Finalmente, inicie a composi\u00e7\u00e3o docker, que ir\u00e1 descarregar e ingerir o conjunto de dados e public\u00e1-lo na pygeoapi:</p> Linux/MacWindows (PowerShell) <p> <pre><code>docker compose up\n</code></pre> </p> <p> <pre><code>docker compose up\n</code></pre> </p> <p>Note</p> <p>Pode verificar o seu \u00edndice elastic em: http://localhost:9200/_cat/indices</p> <p>Se estiver em produ\u00e7\u00e3o, poder\u00e1 querer fechar as portas do elastic no docker-compose.</p>"},{"location":"pt/publishing/ogcapi-tiles/#acesso-do-lado-do-cliente","title":"Acesso do lado do cliente","text":""},{"location":"pt/publishing/ogcapi-tiles/#qgis","title":"QGIS","text":"<p>O QGIS suporta tiles Vetoriais da OGC API atrav\u00e9s da Camada de tiles Vetoriais. Embora a OGC API - Tiles n\u00e3o seja suportada nativamente, pode personalizar a <code>liga\u00e7\u00e3o gen\u00e9rica</code> para aceder a eles no QGIS.</p> <p>Aceder a tiles Vetoriais da OGC API a partir do QGIS</p> <p>Antes de entrar no QGIS, aceda \u00e0 p\u00e1gina de instala\u00e7\u00e3o da sua pygeoapi no navegador e siga estes passos.</p> <ul> <li>aceda \u00e0 p\u00e1gina da cole\u00e7\u00e3o do conjunto de dados de tiles: http://localhost:5000/collections/hyderabad</li> <li>navegue para a p\u00e1gina de tiles clicando em <code>tiles</code>: http://localhost:5000/collections/hyderabad/tiles</li> <li>clique em <code>Tileset Metadata</code>: http://localhost:5000/collections/hyderabad/tiles/WebMercatorQuad/metadata</li> <li>Tome nota do URL template: <code>http://localhost:5000/collections/hyderabad/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}?f=mvt</code> e os valores de minZoom e maxZoom</li> </ul> <p>Siga estes passos para se ligar a um servi\u00e7o e aceder a tiles vetoriais:</p> <ul> <li> <p>localize o servi\u00e7o de tiles vetoriais no painel do navegador do lado esquerdo. Note que tamb\u00e9m pode usar o menu superior e navegar para <code>Layer &gt; Adicionar Layer &gt; Adicionar Layer de Tiles Vetoriaiss</code></p> </li> <li> <p>clique com o bot\u00e3o direito para abrir o menu de contexto e escolha <code>Nova Liga\u00e7\u00e3o Gen\u00e9rica</code></p> </li> <li>preencha os valores necess\u00e1rios. Para URL, use o URL que anotou no passo anterior, substituindo <code>{tileMatrix}/{tileRow}/{tileCol}</code> por <code>{z}/{y}/{x}</code>.</li> </ul> <p></p> <ul> <li>pressione <code>OK</code> para adicionar o servi\u00e7o. Neste ponto, dever\u00e1 ver a liga\u00e7\u00e3o aparecer. Clique em <code>Adicionar</code> para a adicionar ao mapa</li> <li>Fa\u00e7a zoom para Hyderabad para visualizar o seu conjunto de dados</li> </ul> <p></p> <p></p>"},{"location":"pt/publishing/ogcapi-tiles/#leafletjs","title":"LeafletJS","text":"<p>O LeafletJS \u00e9 uma biblioteca JavaScript popular para adicionar mapas interativos a websites. O LeafletJS n\u00e3o suporta explicitamente as OGC APIs, no entanto, pode interagir com a OGC API usando diretamente os resultados da API.</p> <p>Adicionar OGC API - Tiles a um website com LeafletJS</p> <ul> <li>copie o HTML abaixo para um ficheiro chamado <code>vector-tiles.html</code>, ou localize este ficheiro em <code>workshop/exercises/html</code></li> <li>abra o ficheiro num navegador web</li> </ul> <p>O c\u00f3digo usa a biblioteca LeafletJS com o plugin leaflet.vectorgrid para exibir o servi\u00e7o OGC API - Tiles de Hyderabad sobre um layer de base.</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Exerc\u00edcio OGC API - Tiles&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\" style=\"width:100vw;height:100vh;\"&gt;&lt;/div&gt;\n&lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.0.3/dist/leaflet.css\" /&gt;\n&lt;script type=\"text/javascript\" src=\"https://unpkg.com/leaflet@1.3.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"https://unpkg.com/leaflet.vectorgrid@1.3.0/dist/Leaflet.VectorGrid.bundled.js\"&gt;&lt;/script&gt;\n&lt;script&gt;    \nmap = L.map('map').setView({ lat: 17.425181, lng: 78.5493906 }, 11);\nmap.addLayer(\n    new L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}', {\n    attribution: 'Tiles &amp;copy; Esri &amp;mdash; National Geographic, Esri, DeLorme, NAVTEQ, UNEP-WCMC, USGS, NASA, ESA, METI, NRCAN, GEBCO, NOAA, iPC',\n    minZoom: 1,\n    maxZoom: 16,\n    }));\n function getColor(val){\n    if (val &lt; 40) {return \"#f2e6c7\"}\n    else if (val &lt; 80) {return \"#8fa37e\"}\n    else if (val &lt; 100) {return \"#f0d17d\"}\n    else if (val &lt; 120) {return  \"#d7ded1\"}\n    else return \"#c2d0d9\";\n }\n var vectorTileStyling = {\n    greater_hyderabad_municipal_corporation_ward_Boundaries: function(properties) {\n        return ({\n            fill: true,\n            fillColor: getColor(properties.objectid),\n            color: \"#ffffff\",\n            fillOpacity: 1.0,\n            weight: 5,\n            //color: \"#ffffff\",\n            opacity: 1.0,\n        });\n    }\n} \n    var mapVectorTileOptions = {\n        rendererFactory: L.canvas.tile,\n        interactive: true,\n        vectorTileLayerStyles: vectorTileStyling,\n        };\n    var pbfURL='http://localhost:5000/collections/hyderabad/tiles/WorldCRS84Quad/{z}/{y}/{x}?f=mvt';\n    var pbfLayer=L.vectorGrid.protobuf(pbfURL,mapVectorTileOptions).on('click',function(e) {\n        console.log(e.layer);\n    L.DomEvent.stop(e);\n    }).addTo(map); \n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Neste exemplo, as cores dos s\u00edmbolos refletem o valor do atributo <code>objectid</code>.</p> <p></p> <p>Note</p> <p>Pode verificar os atributos do layer, abrindo a consola nas ferramentas de developer. </p> <p>Tip</p> <p>Tente adicionar um layer de tiles vetoriais da pygeoapi diferente atualizando o c\u00f3digo em <code>workshop/exercises/html/vector-tiles.html</code>.</p> <p>Se quiser renderizar as tiles do exemplo do Elasticsearch, pode consultar o c\u00f3digo deste reposit\u00f3rio aqui:</p> Linux/MacWindows (PowerShell) <p> <pre><code>git clone -b ogcapi-ws https://github.com/emotional-cities/vtiles-example.git\n</code></pre> </p> <p> <pre><code>git clone -b ogcapi-ws https://github.com/emotional-cities/vtiles-example.git\n</code></pre> </p> <p></p> <p>Tip</p> <p>Consulte a documenta\u00e7\u00e3o oficial da LeafletJS</p>"},{"location":"pt/publishing/ogcapi-tiles/#openlayers","title":"OpenLayers","text":"<p>O OpenLayers \u00e9 uma biblioteca JavaScript popular para adicionar mapas interativos a websites. O OpenLayers suporta nativamente a OGC API - Tiles (mapa e vetor). Pode verificar o c\u00f3digo para o exemplo abaixo em: https://ogcincubator.github.io/ogcapi-tiles-demo/</p> <p> </p> <p>Tip</p> <p>Consulte a documenta\u00e7\u00e3o oficial do OpenLayers</p>"},{"location":"pt/publishing/ogcapi-tiles/#resumo","title":"Resumo","text":"<p>Parab\u00e9ns! Agora \u00e9 capaz de publicar tiles na pygeoapi. Pode aprender mais sobre este Standard em: https://tiles.developer.ogc.org/</p>"}]}